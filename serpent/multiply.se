macro multiply($aflat:$asz, $arows, $acols, $bflat:$bsz, $brows, $bcols):
    with a = array($arows):
        with i = 0:
            while i < $arows:
                a[i] = array($acols)
                with j = 0:
                    while j < $acols:
                        a[i][j] = $aflat[j + i*$acols]
                        j += 1
                i += 1
        with b = array($brows):
            with i = 0:
                while i < $brows:
                    b[i] = array($bcols)
                    with j = 0:
                        while j < $bcols:
                            b[i][j] = $bflat[j + i*$bcols]
                            j += 1
                    i += 1
        with c = array($arows):
            if $bcols > 1:
                with i = 0:
                    while i < $arows:
                        c[i] = array($bcols)
                        i += 1
            with i = 0:
                while i < $arows:
                    with j = 0:
                        while j < $bcols:
                            with k = 0:
                                while k < $acols:
                                    if $bcols == 1:
                                        c[i] += a[i][k] * b[k]
                                    else:
                                        c[i][j] += a[i][k] * b[k][j]
                                    k += 1
                            j += 1
                    i += 1
                c

def test_multiply():
    a = [[1, 4], [2, 5], [3, 6]]
    arows = 3
    acols = 2
    aflat = array(arows * acols)
    i = 0
    while i < arows:
        j = 0
        while j < acols:
            aflat[j + i*acols] = a[i][j]
            j += 1
        i += 1
    b = [[1, 2, 3], [4, 5, 6]]
    brows = 2
    bcols = 3
    bflat = array(brows * bcols)
    i = 0
    while i < brows:
        j = 0
        while j < bcols:
            bflat[j + i*bcols] = b[i][j]
            j += 1
        i += 1
    expected = [[17, 22, 27], [22, 29, 36], [27, 36, 45]]
    actual = multiply(aflat:(arows*acols), arows, acols, bflat:(brows*bcols), brows, bcols)
    i = 0
    while i < arows:
        j = 0
        while j < bcols:
            if expected[i][j] != actual[i][j]:
                return(0)
            j += 1
        i += 1
    return(1)
