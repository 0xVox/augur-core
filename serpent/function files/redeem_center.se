# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2015 Forecast Foundation 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you have questions, please contact Joey Krug (joey@augur.net) or
# Jack Peterson (jack@augur.net).

extern whitelist.se: [addAddress:ii:s, check:i:i, checkaddr:ii:i, replaceAddress:iii:s]
extern center.se: [center:aaaaaii:a, tokenize:ai:a, covariance:aaii:a]

# inset('../consensus/logging.se')
inset('../consensus/constants.se')

WHITELIST = 0xf1e4b1b0d357ded7a34c08dcac1a5d8d1eda795c
EXPIRING_EVENTS = 0xb7b617b776e66cbae79606d2b6221501ad110090
BRANCHES = 0x2440e4769deb9fd3fd528884b95dc76e4e3482cf
CENTER = create("../consensus/center.se")

def center(branch, period, num_events, num_reports, v_size):
    if !WHITELIST.check(msg.sender):
        return(-1)
    with reputation = array(num_reports):
        with i = 0:
            while i < num_reports:
                reputation[i] = self.Reporting[branch].reputation[i].repValue
                i += 1
        with scaled = array(num_events):
            with scaled_max = array(num_events):
                with scaled_min = array(num_events):
                    with j = 0:
                        while j < num_events:
                            if self.Events[self.EventsExpDates[branch][period].events[j]].maxValue != 1:
                                scaled[j] = 1
                                scaled_max[j] = self.Events[self.EventsExpDates[branch][period].events[j]].maxValue * ONE
                                scaled_min[j] = self.Events[self.EventsExpDates[branch][period].events[j]].minValue * ONE
                            else:
                                scaled[j] = 0
                                scaled_min[j] = -ONE
                                scaled_max[j] = ONE
                            j += 1
                    with reports_filled = load(self.EventsExpDates[branch][period].reportsFilled[0], items=v_size):
                        with lflatsize = v_size + num_events + 1:
                            with result = CENTER.center(reports_filled, reputation, scaled, scaled_max, scaled_min, MAX_ITERATIONS, outsz=lflatsize):
                                save(self.EventsExpDates[branch][period].weightedCenteredData[0], result, items=v_size)
                                save(self.EventsExpDates[branch][period].loadingVector[0], slice(result, items=v_size, items=lflatsize), items=num_events+2)

def covariance(branch, period, num_events, num_reports, v_size):
    if !WHITELIST.check(msg.sender):
        return(-1)
    with reputation = array(num_reports):
        with i = 0:
            while i < num_reports:
                reputation[i] = self.Reporting[branch].reputation[i].repValue
                i += 1
        with reptokens = CENTER.tokenize(reputation, num_reports, outsz=num_reports):
            with wcd = load(self.EventsExpDates[branch][period].weightedCenteredData[0], items=v_size):
                with covrow = CENTER.covariance(wcd, reptokens, num_reports, num_events, outsz=num_events):
                    save(self.EventsExpDates[branch][period].covarianceMatrixRow[0], covrow, items=num_events)
                    # save a copy of weightedCenteredData as "deflated", needed in the following steps
                    save(self.EventsExpDates[branch][period].deflated[0], self.EventsExpDates[branch][period].weightedCenteredData[0], items=v_size)
