# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation 
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net
data Info[](description[2048], descriptionLength, creator, creationFee)

# CurrentVotePeriod is the current index in eventsExpDates
# Branches' index is the hash of the branch (aka branchID)
# currentVotePeriod is a nonce that tells us which bucket of events up to be
# voted on in the current vote period (should always be 1 behind block.number/periodlength or current EventsExpDates index)
# period parameter for reporting
# currentExpPeriod = (block.number / self.Branches[branch].periodLength)
# currentExpPeriod - 1 is what's up for reporting at any given time
data Branches[](currentVotePeriod, periodLength, step, markets[], numMarkets, minTradingFee)

# Events' index is the eventID
# a binary outcome has 0 for min && 1 for max value, but consensus will return 2^64 and 2^65 respectively
# so for voting 1 and 2 in fxp. need to be given for binaries, not 0 & 1
# S&P 500 scalar would be say 0 && 4700, respectively
# categorical markets have fixed point min and max
 # so max-min/numOutcomes is interval between outcomes (useful for ui, e.g. 1 is >50, 2 is >100, etc.)
# need outcomes returned as 1*2^64, 2*2^64, etc... indeterminate as 3*2^63
data Events[](branch, expirationDate, outcome, minValue, maxValue, numOutcomes)

# Reporting index is the branchID
# Reporters index is the rep. address
# We 0 index reputation so can walk thru for consensus
# EventsExpDates index is the currentVotePeriod or in the future if an event expires in the future
# RepIDtoIndex returns a reporter's reporters[] index given their reputationID as the key
# Events is 0 indexed as well
data Reporting[](reputation[](repValue, reporterID), numberReporters, repIDtoIndex[])

# [branchID][votingPeriod]
# v_size = numReports * numEvents
# reportsFilled, reportsMask, weightedCenteredData, loadingVector, scores, set1, set2, old,
# new1, new2, adjPrinComp, smoothRep, outcomesFinal, consensusReward is all consensus data
# reporters is [reporterID][eventNum]
# reporthash is [reporterID] = hash
data EventsExpDates[][](numberEvents, events[], totalRepReported, reporters[][], reportHash[], vSize, reportsFilled[], reportsMask[], weightedCenteredData[], loadingVector[], scores[], set1[], set2[], old[], new1[], new2[], adjPrinComp[], smoothRep[], outcomesFinal[])

# Markets' index is the marketID
# Events is a 0 indexed array of events in the market in the format of
    # [1, event, event, 2, event, 3, event, event, event]
    # 1 means dimension 1, 2 is events in dimension 2, 3 is the dimension 3 events
# Sharespurchased keeps track of the number of shares purchased for each outcome
    # sharesPurchased states starts at 1 - (same for participants[].shares[] array)
# Participants is a 0 indexed array of participants, their cashIDs, && the shares in each outcome they've purchased of an event
# a binary outcome state 1 is no, 2 is true, 0 if not determined
# tradingFee is a percent in fixedPoint
# tradingPeriod is which eventexpperiod market expires in
data Markets[](events[], sharesPurchased[], addr2participant[], participants[](participantID, shares[]), lenEvents, currentParticipant, winningOutcomes[], alpha, cumulativeScale, numOutcomes, tradingPeriod, tradingFee, branch)

data p2pBets[](eventID, amtToBet, outcomeOneBettor, outcomeZeroBettor)

data cashcoinBalances[]

data nonces[]

data branchList[]

data branchListCount

# loop through events in the market, get their outcomes && use those to determine the winning events!
# distribute coins among winning events
# when multidimen fancy payouts we report on the events separately per usual, but combine them to determine winning state of a fancy market && then payout that state
# @return 0 if fail, if success 1
# Error messages otherwise
    # -1: Market has no cash anyway
    # -2: 0 outcome
    # -3: Outcome indeterminable 
def closeMarket(branch, market):
    if(self.cashcoinBalances[market]<=0):
        return(-1)
    numberEvents = self.Markets[market].lenEvents
    tradingPeriod = self.Markets[market].tradingPeriod
    # check if any events in the market were pushed back and that market has expired
    # (as long as the latest expiring event wasn't pushed back, we know they all got reported on)
    # if it *was* pushed back, we'll just get an outcome of 0, return 0 until the event is actually reported on, then we can resolve the market
    if(self.Branches[branch].currentVotePeriod > tradingPeriod):
        # loop through events in the market, get their outcomes && use those to determine the winning events!
        n = 0
        # (max poss. winning outcomes is 200 outcomes total all scalar multidimensional)
        winningOutcomes = array(200)
        while n < numberEvents:
            fxpOutcome = self.Events[self.Markets[market].events[n]].outcome
            if(fxpOutcome==0):
                return(-2)
            outcome = fxpOutcome/2^64 
            # makes sure it's not a scalar
            if(fxpOutcome==3*2^63 && numberEvents==1 && !(self.Events[event].maxValue!=1 && self.Events[event].numOutcomes==2)):
                # return all the $$$ - (@ 50 cents a share)
                i = 0
                while i < self.Markets[market].currentParticipant:
                    sharesOwnedOne = self.Markets[market].participants[i].shares[1]
                    sharesOwnedTwo = self.Markets[market].participants[i].shares[2]
                    participant = self.Markets[market].participants[i].participantID
                    self.cashcoinBalances[market] -= sharesOwnedOne*3*2^63 / 2^64
                    self.cashcoinBalances[participant] += sharesOwnedOne*3*2^63 / 2^64
                    self.cashcoinBalances[market] -= sharesOwnedTwo*3*2^63 / 2^64
                    self.cashcoinBalances[participant] += sharesOwnedTwo*3*2^63 / 2^64
                    i += 1

                # give back initial liquidity and ls-lmsr alpha fees (or as much of it/profits are left)
                # refund left over initial liquidity in market - half to market creator, other half to voters
                # rest of money available in market + the additional trading fees divy up amongst reporters and market creator
                initialLiquidity = self.Info[marketID].creationFee
                # split up excess profits & liquidity
                self.cashcoinBalances[branch] += self.cashcoinBalances[market] / 2
                self.cashcoinBalances[self.Info[market].creator] += self.cashcoinBalances[market] / 2
                self.cashcoinBalances[market] -= self.cashcoinBalances[market]

                self.Markets[market].winningOutcomes[0] = 1
                self.Markets[market].winningOutcomes[0] = 2
                return(-3)
            elif(fxpOutcome==0):
                return(-2)
            if(n==0):
                #scalar or .5
                if((self.Events[self.Markets[market].events[n]].maxValue!=1 && self.Events[self.Markets[market].events[n]].numOutcomes==2) || fxpOutcome==3*2^63):
                    winningOutcomes[0] = 1
                    winningOutcomes[1] = 2
                # anything besides scalar or .5
                else:
                    winningOutcomes[0] += outcome
            elif(n==1):
                if((self.Events[self.Markets[market].events[n]].maxValue!=1 && self.Events[self.Markets[market].events[n]].numOutcomes==2) || fxpOutcome==3*2^63):
                    # scalar, scalar
                    if(winningOutcomes[1]):
                        winningOutcomes[2] = 3
                        winningOutcomes[3] = 4
                    # nonscalar, scalar
                    else:
                      # winningOutcomes[0] = winningOutcomes[0]
                        winningOutcomes[1] = winningOutcomes[0] + self.Events[self.Markets[market].events[n-1]].numOutcomes
                # scalar, nonscalar
                elif(winningOutcomes[1]):
                    winningOutcomes[0] += self.Events[self.Markets[market].events[n-1]].numOutcomes*(outcome-1)
                    winningOutcomes[1] += self.Events[self.Markets[market].events[n-1]].numOutcomes*(outcome-1)
                # nonscalar, nonscalar
                else:
                    winningOutcomes[0] += self.Events[self.Markets[market].events[n-1]].numOutcomes*(outcome-1)
            elif(n==2):
                if((self.Events[self.Markets[market].events[n]].maxValue!=1 && self.Events[self.Markets[market].events[n]].numOutcomes==2) || fxpOutcome==3*2^63):
                    #scalar, scalar, scalar
                    if(winningOutcomes[3]):
                        winningOutcomes[4] = 5
                        winningOutcomes[5] = 6
                        winningOutcomes[6] = 7
                        winningOutcomes[7] = 8
                    #scalar, nonscalar, scalar
                    #nonscalar, scalar, scalar
                    elif(winningOutcomes[1]):
                      # winningOutcomes[0] = winningOutcomes[0]
                      # winningOutcomes[1] = winningOutcomes[1]
                        winningOutcomes[2] += winningOutcomes[0] + self.Events[self.Markets[market].events[n-2]].numOutcomes * self.Events[self.Markets[market].events[n-1]].numOutcomes
                        winningOutcomes[3] += winningOutcomes[1] + self.Events[self.Markets[market].events[n-2]].numOutcomes * self.Events[self.Markets[market].events[n-1]].numOutcomes
                    #nonscalar, nonscalar, scalar
                    elif(winningOutcomes[1]==0):
                      # winningOutcomes[0] = winningOutcomes[0]
                        winningOutcomes[1] += winningOutcomes[0] + self.Events[self.Markets[market].events[n-2]].numOutcomes * self.Events[self.Markets[market].events[n-1]].numOutcomes 
                else:
                    #scalar, scalar, nonscalar
                    if(winningOutcomes[3]):
                        winningOutcomes[0] += self.Events[self.Markets[market].events[n-2]].numOutcomes * self.Events[self.Markets[market].events[n-1]].numOutcomes * (outcome-1) 
                        winningOutcomes[1] += self.Events[self.Markets[market].events[n-2]].numOutcomes * self.Events[self.Markets[market].events[n-1]].numOutcomes * (outcome-1)
                        winningOutcomes[2] += self.Events[self.Markets[market].events[n-2]].numOutcomes * self.Events[self.Markets[market].events[n-1]].numOutcomes * (outcome-1)
                        winningOutcomes[3] += self.Events[self.Markets[market].events[n-2]].numOutcomes * self.Events[self.Markets[market].events[n-1]].numOutcomes * (outcome-1)
                    #scalar, nonscalar, nonscalar
                    #nonscalar, scalar, nonscalar
                    elif(winningOutcomes[1]):
                        winningOutcomes[0] += self.Events[self.Markets[market].events[n-2]].numOutcomes * self.Events[self.Markets[market].events[n-1]].numOutcomes * (outcome-1)
                        winningOutcomes[1] += self.Events[self.Markets[market].events[n-2]].numOutcomes * self.Events[self.Markets[market].events[n-1]].numOutcomes * (outcome-1)
                    #nonscalar, nonscalar, nonscalar
                    else:
                        winningOutcomes[0] += self.Events[self.Markets[market].events[n-2]].numOutcomes * self.Events[self.Markets[market].events[n-1]].numOutcomes * (outcome-1)
            n+=1

        pricePerShare1 = 0
        pricePerShare2 = 0
        pricePerShare3 = 0
        pricePerShare4 = 0
        pricePerShare5 = 0
        pricePerShare6 = 0
        pricePerShare7 = 0
        pricePerShare8 = 0

        # mutex result non scalar not .5
        if(winningOutcomes[1]==0):
            pricePerShare1 = 2^64

        elif(winningOutcomes[7]):
            outcomeOne = self.Events[self.Markets[market].events[0]].outcome
            minValueOne = self.Events[self.Markets[market].events[0]].minValue
            maxValueOne = self.Events[self.Markets[market].events[0]].maxValue
            if(outcomeOne>maxValueOne):
                outcomeOne = maxValueOne
            elif(outcomeOne<minValueOne):
                outcomeOne = minValueOne
            outcomeTwo = self.Events[self.Markets[market].events[1]].outcome
            minValueTwo = self.Events[self.Markets[market].events[1]].minValue
            maxValueTwo = self.Events[self.Markets[market].events[1]].maxValue
            if(outcomeTwo>maxValueTwo):
                outcomeTwo = maxValueTwo
            elif(outcomeTwo<minValueTwo):
                outcomeTwo = minValueTwo
            outcomeThree = self.Events[self.Markets[market].events[2]].outcome
            minValueThree = self.Events[self.Markets[market].events[2]].minValue
            maxValueThree = self.Events[self.Markets[market].events[2]].maxValue
            if(outcomeThree>maxValueThree):
                outcomeThree = maxValueThree
            elif(outcomeThree<minValueThree):
                outcomeThree = minValueThree

            outcomeOneHighSidePercent = 2^64*(outcomeOne - 2^64*minValueOne) / (2^64*maxValueOne - 2^64*minValueOne)
            outcomeOneLowSidePercent = 2^64 - outcomeOneHighSidePercent
            outcomeTwoHighSidePercent = 2^64*(outcomeTwo - 2^64*minValueTwo) / (2^64*maxValueTwo - 2^64*minValueTwo)
            outcomeTwoLowSidePercent = 2^64 - outcomeTwoHighSidePercent
            outcomeThreeHighSidePercent = 2^64*(outcomeThree - 2^64*minValueThree) / (2^64*maxValueThree - 2^64*minValueThree)
            outcomeThreeLowSidePercent = 2^64 - outcomeThreeHighSidePercent
            
            # price is in fixed point
            # first is low low low, 2 is high low low, 3 is low high low, 4 is high high low, 5 is low low high, 6 is high low high, 7 is low high high, 8 is high high high
            pricePerShare1 = outcomeOneLowSidePercent * outcomeTwoLowSidePercent * outcomeThreeLowSidePercent / (2^64 * 2^64)
            pricePerShare2 = outcomeOneHighSidePercent * outcomeTwoLowSidePercent * outcomeThreeLowSidePercent / (2^64 * 2^64)
            pricePerShare3 = outcomeOneLowSidePercent * outcomeTwoHighSidePercent * outcomeOneLowSidePercent / (2^64 * 2^64)
            pricePerShare4 = outcomeOneHighSidePercent * outcomeTwoHighSidePercent * outcomeThreeLowSidePercent / (2^64 * 2^64)
            pricePerShare5 = outcomeOneLowSidePercent * outcomeTwoLowSidePercent * outcomeThreeHighSidePercent / (2^64 * 2^64)
            pricePerShare6 = outcomeOneHighSidePercent * outcomeTwoLowSidePercent * outcomeThreeHighSidePercent / (2^64 * 2^64)
            pricePerShare7 = outcomeOneLowSidePercent * outcomeTwoHighSidePercent * outcomeThreeHighSidePercent / (2^64 * 2^64)
            pricePerShare8 = outcomeOneHighSidePercent * outcomeTwoHighSidePercent * outcomeThreeHighSidePercent / (2^64 * 2^64)

            # distribute cashcoin to the people who won money by holding winning shares
            i = 0
            while i < self.Markets[market].currentParticipant:
                # for each winning outcome do...
                sharesOwned = array(8)
                while(winningOutcome[n]!=0):
                    sharesOwned[n] = self.Markets[market].participants[i].shares[winningOutcome[n]]
                    n+=1
                participant = self.Markets[market].participants[i].participantID
                self.cashcoinBalances[market] -= sharesOwned[0]*pricePerShare1/2^64
                self.cashcoinBalances[participant] += sharesOwned[0]*pricePerShare1/2^64
                self.cashcoinBalances[market] -= sharesOwned[1]*pricePerShare2/2^64
                self.cashcoinBalances[participant] += sharesOwned[1]*pricePerShare2/2^64
                self.cashcoinBalances[market] -= sharesOwned[2]*pricePerShare3/2^64
                self.cashcoinBalances[participant] += sharesOwned[2]*pricePerShare3/2^64
                self.cashcoinBalances[market] -= sharesOwned[3]*pricePerShare4/2^64
                self.cashcoinBalances[participant] += sharesOwned[3]*pricePerShare4/2^64
                self.cashcoinBalances[market] -= sharesOwned[4]*pricePerShare5/2^64
                self.cashcoinBalances[participant] += sharesOwned[4]*pricePerShare5/2^64
                self.cashcoinBalances[market] -= sharesOwned[5]*pricePerShare6/2^64
                self.cashcoinBalances[participant] += sharesOwned[5]*pricePerShare6/2^64
                self.cashcoinBalances[market] -= sharesOwned[6]*pricePerShare7/2^64
                self.cashcoinBalances[participant] += sharesOwned[6]*pricePerShare7/2^64
                self.cashcoinBalances[market] -= sharesOwned[7]*pricePerShare8/2^64
                self.cashcoinBalances[participant] += sharesOwned[7]*pricePerShare8/2^64
                i+=1

        elif(winningOutcomes[3]):
            # first is low-low && whatever, second is high-low, third is low-high, fourth is high-high
            scalarOne = -1
            scalarTwo = -1
            if((self.Events[self.Markets[market].events[n]].maxValue!=1 && self.Events[self.Markets[market].events[n]].numOutcomes==2) || self.Events[self.Markets[market].events[0]].outcome==3*2^63):
                scalarOne = 0
            if((self.Events[self.Markets[market].events[n]].maxValue!=1 && self.Events[self.Markets[market].events[n]].numOutcomes==2) || self.Events[self.Markets[market].events[0]].outcome==3*2^63):
                if(scalarOne == -1):
                    scalarOne = 0
                else:
                    scalarTwo = 1
            elif((self.Events[self.Markets[market].events[n]].maxValue!=1 && self.Events[self.Markets[market].events[n]].numOutcomes==2) || self.Events[self.Markets[market].events[0]].outcome==3*2^63):
                scalarTwo = 2
            outcomeOne = self.Events[self.Markets[market].events[scalarOne]].outcome
            minValueOne = self.Events[self.Markets[market].events[scalarOne]].minValue
            maxValueOne = self.Events[self.Markets[market].events[scalarOne]].maxValue
            if(outcomeOne>maxValueOne):
                outcomeOne = maxValueOne
            elif(outcomeOne<minValueOne):
                outcomeOne = minValueOne
            outcomeTwo = self.Events[self.Markets[market].events[scalarTwo]].outcome
            minValueTwo = self.Events[self.Markets[market].events[scalarTwo]].minValue
            maxValueTwo = self.Events[self.Markets[market].events[scalarTwo]].maxValue
            if(outcomeTwo>maxValueTwo):
                outcomeTwo = maxValueTwo
            elif(outcomeTwo<minValueTwo):
                outcomeTwo = minValueTwo

            outcomeOneHighSidePercent = 2^64*(outcomeOne - 2^64*minValueOne) / (2^64*maxValueOne - 2^64*minValueOne)
            outcomeOneLowSidePercent = 2^64 - outcomeOneHighSidePercent
            outcomeTwoHighSidePercent = 2^64*(outcomeTwo - 2^64*minValueTwo) / (2^64*maxValueTwo - 2^64*minValueTwo)
            outcomeTwoLowSidePercent = 2^64 - outcomeTwoHighSidePercent

            # price is in fixed point
            # share four goes with the high-high side 
            pricePerShare4 = outcomeOneHighSidePercent * outcomeTwoHighSidePercent / 2^64
            # share three goes with the low-high side
            pricePerShare3 = outcomeOneLowSidePercent * outcomeTwoHighSidePercent / 2^64
            # share two goes with the high-low side
            pricePerShare2 = outcomeOneHighSidePercent * outcomeTwoLowSidePercent / 2^64
            # share one goes with the low-low
             # both fixed point so div by 2^64 to keep in fixed point
            pricePerShare1 = outcomeOneLowSidePercent * outcomeTwoLowSidePercent / 2^64
            # distribute cashcoin to the people who won money by holding winning shares
            i = 0
            while i < self.Markets[market].currentParticipant:
                # for each winning outcome do...
                n = 0
                while(winningOutcome[n]!=0):
                    sharesOwned = self.Markets[market].participants[i].shares[winningOutcome[n]]
                    participant = self.Markets[market].participants[i].participantID
                    # low-low
                    if(n==0):
                        self.cashcoinBalances[market] -= sharesOwned*pricePerShare1/2^64
                        self.cashcoinBalances[participant] += sharesOwned*pricePerShare1/2^64
                    # high-low
                    elif(n==1):
                        self.cashcoinBalances[market] -= sharesOwned*pricePerShare2/2^64
                        self.cashcoinBalances[participant] += sharesOwned*pricePerShare2/2^64
                    # low-high
                    elif(n==2):
                        self.cashcoinBalances[market] -= sharesOwned*pricePerShare3/2^64
                        self.cashcoinBalances[participant] += sharesOwned*pricePerShare3/2^64
                    # high-high
                    elif(n==3):
                        self.cashcoinBalances[market] -= sharesOwned*pricePerShare4/2^64
                        self.cashcoinBalances[participant] += sharesOwned*pricePerShare4/2^64
                    n+=1
                i+=1

        elif(winningOutcomes[1]):
            # look for the scalar
            scalar = 0
            if((self.Events[self.Markets[market].events[n]].maxValue!=1 && self.Events[self.Markets[market].events[n]].numOutcomes==2) || self.Events[self.Markets[market].events[0]].outcome==3*2^63):
                scalar = 0
            elif((self.Events[self.Markets[market].events[n]].maxValue!=1 && self.Events[self.Markets[market].events[n]].numOutcomes==2) || self.Events[self.Markets[market].events[0]].outcome==3*2^63):
                scalar = 1
            elif((self.Events[self.Markets[market].events[n]].maxValue!=1 && self.Events[self.Markets[market].events[n]].numOutcomes==2) || self.Events[self.Markets[market].events[0]].outcome==3*2^63):
                scalar = 2
            outcome = self.Events[self.Markets[market].events[scalar]].outcome
            minValue = self.Events[self.Markets[market].events[scalar]].minValue
            maxValue = self.Events[self.Markets[market].events[scalar]].maxValue
            if(outcome>maxValue):
                outcome = maxValue
            elif(outcome<minValue):
                outcome = minValue
            # price is in fixed point
            #share two goes with the high side
            pricePerShare2 = 2^64*(outcome - 2^64*minValue) / (2^64*maxValue - 2^64*minValue)
            #share one goes with the low side of the calc
            pricePerShare1 = 2^64 - pricePerShare1
            # distribute cashcoin to the people who won money by holding winning shares
            i = 0
            while i < self.Markets[market].currentParticipant:
                # for each winning outcome do...
                n = 0
                while(winningOutcome[n]!=0):
                    sharesOwned = self.Markets[market].participants[i].shares[winningOutcome[n]]
                    participant = self.Markets[market].participants[i].participantID
                    # low side
                    if(n==0):
                        self.cashcoinBalances[market] -= sharesOwned*pricePerShare1/2^64
                        self.cashcoinBalances[participant] += sharesOwned*pricePerShare1/2^64
                    # high side (of the scalar part)
                    elif(n==1):
                        self.cashcoinBalances[market] -= sharesOwned*pricePerShare2/2^64
                        self.cashcoinBalances[participant] += sharesOwned*pricePerShare2/2^64
                    n+=1
                i += 1

        # give back initial liquidity and ls-lmsr alpha fees (or as much of it/profits are left)
        # refund left over initial liquidity in market - half to market creator, other half to voters
        # *unless* it's a scaled decision, refund all initial liquidity left over to market creator
        # rest of money available in market + the additional trading fees divy up amongst reporters and market creator
        initialLiquidity = self.Info[marketID].creationFee
        # some scalar involved
        if(winningOutcome[1]):
            if(self.cashcoinBalances[market] > initialLiquidity):
                # pay back liquidity, split up excess profits
                self.cashcoinBalances[self.Info[market].creator] += initialLiquidity
                self.cashcoinBalances[market] -= initialLiquidity
                self.cashcoinBalances[branch] += self.cashcoinBalances[market] / 2
                self.cashcoinBalances[self.Info[market].creator] += self.cashcoinBalances[market] / 2
                self.cashcoinBalances[market] -= self.cashcoinBalances[market]
            # send whatever's left of the initial liquidity to the creator
            else:
                self.cashcoinBalances[self.Info[market].creator] += self.cashcoinBalances[market]
                self.cashcoinBalances[market] -= self.cashcoinBalances[market]

        # no scalars
        else:
            # split up excess profits & liquidity
            self.cashcoinBalances[branch] += self.cashcoinBalances[market] / 2
            self.cashcoinBalances[self.Info[market].creator] += self.cashcoinBalances[market] / 2
            self.cashcoinBalances[market] -= self.cashcoinBalances[market]

        q = 0
        while(winningOutcomes[q]!=0):
            self.Markets[market].winningOutcomes[q] = winningOutcomes[q]
            q += 1
        return(1)