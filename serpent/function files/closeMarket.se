# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation 
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

extern branches.se: [addMarket:ii:i, getBranch:i:i, getBranches:_:a, getMarkets:i:a, getMinTradingFee:i:i, getNumBranches:_:i, getNumMarkets:i:i, getPeriodLength:i:i, getStep:i:i, getVotePeriod:i:i, incrementPeriod:i:i, incrementStep:i:i, initializeBranch:iiii:i, setStep:ii:i]
BRANCHES = 0x2440e4769deb9fd3fd528884b95dc76e4e3482cf

extern info.se: [getCreationFee:i:i, getCreator:i:i, getDescription:i:s, getDescriptionLength:i:i, setInfo:isii:i]
INFO = 0x84ad0e89dbbbdfb18a59954addf10ad501525a01

extern cash.se: [addCash:ii:i, balance:i:i, faucet:_:i, send:ii:i, sendFrom:iii:i, subtractCash:ii:i]
CASH = 0x559b098076d35ddc7f5057bf28eb20d9cf183a99

extern fxpFunctions.se: [fx_exp:i:i, fx_log:i:i]
FXP = 0x82695a58b84bbcc90372d06e9b1d599ca2dd60cd

extern markets.se: [addParticipant:ii:i, getAlpha:i:i, getBranchID:i:i, getCumScale:i:i, getCurrentParticipantNumber:i:i, getMarketEvents:i:a, getMarketInfo:i:a, getMarketNumOutcomes:i:i, getNumEvents:i:i, getParticipantID:ii:i, getParticipantNumber:ii:i, getParticipantSharesPurchased:iii:i, getSharesPurchased:ii:i, getSimulatedBuy:ii:_, getSimulatedSell:ii:_, getTradingFee:i:i, getTradingPeriod:i:i, getWinningOutcomes:i:a, initialLiquiditySetup:iiii:i, initializeMarket:iaiii:i, lsLmsr:i:i, modifyParticipantShares:iiii:i, modifyShares:iii:i, price:ii:i, setWinningOutcomes:a:i]
MARKETS = 0x9d8b4e6da4e917e7b951f372e66b1012b203e30e

extern events.se: [getEventBranch:i:i, getEventInfo:i:a, getExpiration:i:i, getMaxValue:i:i, getMinValue:i:i, getNumOutcomes:i:i, getOutcome:i:i, initializeEvent:iiiiii:i, setOutcome:ii:i]
EVENTS = 0xe34fd8a3840cba70fdd73a01c75302de959aa5a9

extern closeMarketOne.se: [oneOutcome:ii:i]
CLOSEONE = 

extern closeMarketTwo.se: [twoOutcomes:iaa:i]
CLOSETWO = 

extern closeMarketEight.se: [eightOutcomes:iaa:i]
CLOSEEIGHT = 

extern closeMarketFour.se: [fourOutcomes:iaa:i]
CLOSEFOUR = 

# loop through events in the market, get their outcomes && use those to determine the winning events!
# distribute coins among winning events
# when multidimen fancy payouts we report on the events separately per usual, but combine them to determine winning state of a fancy market && then payout that state
# @return 0 if fail, if success 1
# Error messages otherwise
    # -1: Market has no cash anyway
    # -2: 0 outcome
    # -3: Outcome indeterminable 
def closeMarket(branch, market):
    if(CASH.balance(market)<=0):
        return(-1)
    numberEvents = MARKETS.getNumEvents(market)
    tradingPeriod = MARKETS.getTradingPeriod(market)
    # check if any events in the market were pushed back and that market has expired
    # (as long as the latest expiring event wasn't pushed back, we know they all got reported on)
    # if it *was* pushed back, we'll just get an outcome of 0, return 0 until the event is actually reported on, then we can resolve the market
    if(BRANCHES.getVotePeriod(branch) > tradingPeriod):
        # loop through events in the market, get their outcomes && use those to determine the winning events!
        n = 0
        # (max poss. winning outcomes is 200 outcomes total all scalar multidimensional)
        winningOutcomes = array(200)
        events = array(3)
        events = MARKETS.getMarketEvents(market)
        while n < numberEvents:
            fxpOutcome = EVENTS.getOutcome(events[n])
            if(fxpOutcome==0):
                return(-2)
            outcome = fxpOutcome/2^64 
            # makes sure it's not a scalar
            if(fxpOutcome==3*2^63 && numberEvents==1 && !(EVENTS.getMaxValue(events[n])!=1 && EVENTS.getNumOutcomes(events[n])==2)):
                # return all the $$$ - (@ 50 cents a share)
                i = 0
                currentParticipant = MARKETS.getCurrentParticipantNumber(market)
                while i < currentParticipant:
                    sharesOwnedOne = MARKETS.getParticipantSharesPurchased(market, i, 1)
                    sharesOwnedTwo = MARKETS.getParticipantSharesPurchased(market, i, 2)
                    participant = MARKETS.getParticipantID(market, i)
                    CASH.subtractCash(market, sharesOwnedOne*3*2^63 / 2^64)
                    CASH.addCash(participant, sharesOwnedOne*3*2^63 / 2^64)
                    CASH.subtractCash(market, sharesOwnedTwo*3*2^63 / 2^64)
                    CASH.addCash(participant, sharesOwnedTwo*3*2^63 / 2^64)
                    i += 1

                # give back initial liquidity and ls-lmsr alpha fees (or as much of it/profits are left)
                # refund left over initial liquidity in market - half to market creator, other half to voters
                # rest of money available in market + the additional trading fees divy up amongst reporters and market creator
                initialLiquidity = INFO.getCreationFee(market)
                # split up excess profits & liquidity
                marketCash = CASH.balance(market)
                CASH.addCash(branch, marketCash/2)
                CASH.addCash(INFO.getCreator(market), marketCash / 2)
                CASH.subtractCash(market, marketCash)

                winningOutcomes[0] = 1
                winningOutcomes[1] = 2
                MARKETS.setWinningOutcomes(winningOutcomes)
                return(-3)
            elif(fxpOutcome==0):
                return(-2)
            if(n==0):
                #scalar or .5
                if((EVENTS.getMaxValue(events[n])!=1 && EVENTS.getNumOutcomes(events[n])==2) || fxpOutcome==3*2^63):
                    winningOutcomes[0] = 1
                    winningOutcomes[1] = 2
                # anything besides scalar or .5
                else:
                    winningOutcomes[0] += outcome
            elif(n==1):
                if((EVENTS.getMaxValue(events[n])!=1 && EVENTS.getNumOutcomes(events[n])==2) || fxpOutcome==3*2^63):
                    # scalar, scalar
                    if(winningOutcomes[1]):
                        winningOutcomes[2] = 3
                        winningOutcomes[3] = 4
                    # nonscalar, scalar
                    else:
                      # winningOutcomes[0] = winningOutcomes[0]
                        winningOutcomes[1] = winningOutcomes[0] + EVENTS.getNumOutcomes(events[n-1])
                # scalar, nonscalar
                elif(winningOutcomes[1]):
                    winningOutcomes[0] += EVENTS.getNumOutcomes(events[n-1])*(outcome-1)
                    winningOutcomes[1] += EVENTS.getNumOutcomes(events[n-1])*(outcome-1)
                # nonscalar, nonscalar
                else:
                    winningOutcomes[0] += EVENTS.getNumOutcomes(events[n-1])*(outcome-1)
            elif(n==2):
                if((EVENTS.getMaxValue(events[n])!=1 && EVENTS.getNumOutcomes(events[n])==2) || fxpOutcome==3*2^63):
                    #scalar, scalar, scalar
                    if(winningOutcomes[3]):
                        winningOutcomes[4] = 5
                        winningOutcomes[5] = 6
                        winningOutcomes[6] = 7
                        winningOutcomes[7] = 8
                    #scalar, nonscalar, scalar
                    #nonscalar, scalar, scalar
                    elif(winningOutcomes[1]):
                      # winningOutcomes[0] = winningOutcomes[0]
                      # winningOutcomes[1] = winningOutcomes[1]
                        winningOutcomes[2] += winningOutcomes[0] + EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1])
                        winningOutcomes[3] += winningOutcomes[1] + EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1])
                    #nonscalar, nonscalar, scalar
                    elif(winningOutcomes[1]==0):
                      # winningOutcomes[0] = winningOutcomes[0]
                        winningOutcomes[1] += winningOutcomes[0] + EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) 
                else:
                    #scalar, scalar, nonscalar
                    if(winningOutcomes[3]):
                        winningOutcomes[0] += EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) * (outcome-1) 
                        winningOutcomes[1] += EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) * (outcome-1)
                        winningOutcomes[2] += EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) * (outcome-1)
                        winningOutcomes[3] += EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) * (outcome-1)
                    #scalar, nonscalar, nonscalar
                    #nonscalar, scalar, nonscalar
                    elif(winningOutcomes[1]):
                        winningOutcomes[0] += EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) * (outcome-1)
                        winningOutcomes[1] += EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) * (outcome-1)
                    #nonscalar, nonscalar, nonscalar
                    else:
                        winningOutcomes[0] += EVENTS.getNumOutcomes(events[n-2]) * EVENTS.getNumOutcomes(events[n-1]) * (outcome-1)
            n+=1

        pricePerShare1 = 0
        pricePerShare2 = 0
        pricePerShare3 = 0
        pricePerShare4 = 0
        pricePerShare5 = 0
        pricePerShare6 = 0
        pricePerShare7 = 0
        pricePerShare8 = 0

        if(winningOutcomes[1]==0):
            CLOSEONE.oneOutcome(market, winningOutcomes[0])

        elif(winningOutcomes[7]):
            CLOSEEIGHT.eightOutcomes(market, winningOutcomes, events)

        elif(winningOutcomes[3]):
            CLOSEFOUR.fourOutcomes(market, winningOutcomes, events)

        elif(winningOutcomes[1]):
            CLOSETWO.twoOutcomes(market, winningOutcomes, events)

        # give back initial liquidity and ls-lmsr alpha fees (or as much of it/profits are left)
        # refund left over initial liquidity in market - half to market creator, other half to voters
        # *unless* it's a scaled decision, refund all initial liquidity left over to market creator
        # rest of money available in market + the additional trading fees divy up amongst reporters and market creator
        initialLiquidity = INFO.getCreationFee(market)
        creator = INFO.getCreator(market)
        marketCash = CASH.balance(market)
        # some scalar involved
        if(winningOutcome[1]):
            if(CASH.balance(market) > initialLiquidity):
                # pay back liquidity, split up excess profits
                CASH.addCash(creator, initialLiquidity)
                CASH.subtractCash(market, initialLiquidity)
                CASH.addCash(branch, marketCash/2)
                CASH.addCash(creator, marketCash/2)
                CASH.subtractCash(market, marketCash)
            # send whatever's left of the initial liquidity to the creator
            else:
                CASH.addCash(creator, marketCash)
                CASH.subtractCash(market, marketCash)

        # no scalars
        else:
            # split up excess profits & liquidity
            CASH.addCash(branch, marketCash/2)
            CASH.addCash(creator, marketCash/2)
            CASH.subtractCash(market, marketCash)

        MARKETS.setWinningOutcomes(winningOutcomes)
        return(1)
    else:
        return(0)