# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2015 Forecast Foundation 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you have questions, please contact Joey Krug (joey@augur.net) or
# Jack Peterson (jack@augur.net).

extern whitelist.se: [addAddress:ii:s, check:i:i, checkaddr:ii:i, replaceAddress:iii:s]
extern interpolate.se: [interpolate:aaaaa:a]
extern expiringEvents.se: [getVSize:ii:i, getNumberEvents:ii:i]
extern branches.se: [getBranch:i:i, getStep:i:i, getVotePeriod:i:i, getSubstep:i:i, incrementPeriod:i:i, incrementStep:i:i, incrementSubstep:i:i, setStep:ii:i, setSubstep:ii:i]
extern reporting.se: [getReporterID:ii:i]

# inset('../consensus/logging.se')
inset('../consensus/constants.se')

WHITELIST = 0xf1e4b1b0d357ded7a34c08dcac1a5d8d1eda795c
EVENTS = 0xe34fd8a3840cba70fdd73a01c75302de959aa5a9
EXPIRING_EVENTS = 0xb7b617b776e66cbae79606d2b6221501ad110090
BRANCHES = 0x2440e4769deb9fd3fd528884b95dc76e4e3482cf
REPORTING = 0x175d90d83deec9e5b75cef6b0659958fe2fd24b1
INTERPOLATE = create("../consensus/interpolate.se")

# - loop through reputation && check if in reporters, if so use their
#   report, if not use the fillin / not reported report (all zeroes)
# - use this to make a giant array of reports to pass to self.consensus
# - want to pass reports for each 0 indexed event in order (so we get
#   reports from an actual reporter)
# (if they didn't vote we set their array for each event to 0,0,0,0,0,0, etc...)
def interpolate(branch, period, num_events, num_reports, v_size):
    if !WHITELIST.check(msg.sender):
        return(-1)
    with reputation = array(num_reports):
        with report_matrix = array(v_size):
            with i = 0:
                while i < num_reports:
                    with reporterID = REPORTING.getReporterID(branch, i):
                        # Q: should the second argument here be reporterID or i (index)?
                        reputation[i] = REPORTING.getRepBalance(branch, reporterID)
                        # - checks to see if each reporter actually voted on events
                        # - if they didn't vote (simply check if they voted on first event)
                        #     do nothing (these values will be 0 by default due to Serpent array styles)
                        #     else if the reporter did report on events put their ballot into the reports array
                        with ballot = EXPIRING_EVENTS.getReporterBallot(branch, period, reporterID):
                            if ballot != 0:
                                with j = 0:
                                    while j < num_events:
                                        report_matrix[i*num_events + j] = ballot[j]
                                        j += 1
                    i += 1
            with scaled = array(num_events):
                with scaled_max = array(num_events):
                    with scaled_min = array(num_events):
                        with j = 0:
                            while j < num_events:
                                with event = EXPIRING_EVENTS.getEvent(branch, period, j):
                                    if EVENTS.getMaxValue(event) != 1:
                                        scaled[j] = 1
                                        # TODO convert maxValue and minValue to fixed-point in storage
                                        scaled_max[j] = EVENTS.getMaxValue(event) * ONE
                                        scaled_min[j] = EVENTS.getMinValue(event) * ONE
                                    else:
                                        scaled[j] = 0
                                        scaled_min[j] = NO
                                        scaled_max[j] = YES
                                    j += 1
                        with result = INTERPOLATE.interpolate(report_matrix, reputation, scaled, scaled_max, scaled_min, outsz=2*v_size):
                            EXPIRING_EVENTS.setVSize(branch, period, v_size)
                            EXPIRING_EVENTS.setReportsFilled(branch, period, slice(result, items=v_size))
                            EXPIRING_EVENTS.setReportsMask()
                            save(self.EventsExpDates[branch][period].reportsFilled[0], result, items=v_size)
                            save(self.EventsExpDates[branch][period].reportsMask[0], slice(result, items=v_size, items=2*v_size), items=v_size)
