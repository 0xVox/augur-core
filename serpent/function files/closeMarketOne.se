extern markets.se: [addParticipant:ii:i, getAlpha:i:i, getBranchID:i:i, getCumScale:i:i, getCurrentParticipantNumber:i:i, getMarketEvents:i:a, getMarketInfo:i:a, getMarketNumOutcomes:i:i, getNumEvents:i:i, getParticipantID:ii:i, getParticipantNumber:ii:i, getParticipantSharesPurchased:iii:i, getSharesPurchased:ii:i, getSimulatedBuy:ii:_, getSimulatedSell:ii:_, getTradingFee:i:i, getTradingPeriod:i:i, getWinningOutcomes:i:a, initialLiquiditySetup:iiii:i, initializeMarket:iaiii:i, lsLmsr:i:i, modifyParticipantShares:iiii:i, modifyShares:iii:i, price:ii:i, setWinningOutcomes:a:i]
MARKETS = 0x9d8b4e6da4e917e7b951f372e66b1012b203e30e

extern cash.se: [addCash:ii:i, balance:i:i, faucet:_:i, send:ii:i, sendFrom:iii:i, subtractCash:ii:i]
CASH = 0x559b098076d35ddc7f5057bf28eb20d9cf183a99

# mutex result non scalar not .5
# one winning outcome
def oneOutcome(market, winningOutcome):
    pricePerShare1 = 2^64

    # distribute cashcoin to the people who won money by holding winning shares
    i = 0
    particpantNumber = MARKETS.getCurrentParticipantNumber(market)
    while i < particpantNumber:
        sharesOwned = MARKETS.getParticipantSharesPurchased(market, i, winningOutcome)
        participant = MARKETS.getParticipantID(market, i)
        CASH.subtractCash(market, sharesOwned*pricePerShare1/2^64)
        CASH.addCash(participant, sharesOwned*pricePerShare1/2^64)
        i += 1
    return(1)