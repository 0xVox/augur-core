# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2015 Forecast Foundation 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you have questions, please contact Joey Krug (joey@augur.net) or
# Jack Peterson (jack@augur.net).

extern whitelist.se: [addAddress:ii:s, check:i:i, checkaddr:ii:i, replaceAddress:iii:s]
extern events.se: [getEventBranch:i:i, getEventInfo:i:a, getExpiration:i:i, getMaxValue:i:i, getMinValue:i:i, getNumOutcomes:i:i, getOutcome:i:i, initializeEvent:iiiiii:i, setOutcome:ii:i]
extern expiringEvents.se: [addEvent:iii:i, getAdjPrinComp:ii:a, getComponentsRemaining:iii:i, getCovarianceMatrixRow:ii:a, getDeflated:ii:a, getEvent:iii:i, getEvents:ii:a, getLatent:ii:i, getLoadingVector:ii:a, getNewOne:ii:a, getNewTwo:ii:a, getNumberEvents:ii:i, getOutcomesFinal:ii:a, getReport:iiii:i, getReportHash:iii:i, getReporterBallot:iii:a, getReportsFilled:ii:a, getReportsMask:ii:a, getScores:ii:a, getSetOne:ii:a, getSetTwo:ii:a, getSmoothRep:ii:a, getTotalRepReported:ii:i, getVSize:ii:i, getWeightedCenteredData:ii:a, makeBallot:ii:a, moveEventsToCurrentPeriod:iii:i, returnOld:ii:a, setAdjPrinComp:iia:i, setCovarianceMatrixRow:iia:i, setDeflated:iia:i, setLatent:iii:i, setLoadingVector:iia:i, setNewOne:iia:i, setNewTwo:iia:i, setOld:iia:i, setOutcomesFinal:iia:i, setReportHash:iiii:i, setReporterBallot:iiiai:i, setReportsFilled:iia:i, setReportsMask:iia:i, setScores:iia:i, setSetOne:iia:i, setSetTwo:iia:i, setSmoothRep:iia:i, setTotalRepReported:iii:i, setVSize:iii:i, setWeightedCenteredData:iia:i]
extern branches.se: [addMarket:ii:i, getBranch:i:i, getBranches:_:a, getMarkets:i:a, getMinTradingFee:i:i, getNumBranches:_:i, getNumMarkets:i:i, getPeriodLength:i:i, getStep:i:i, getSubstep:i:i, getVotePeriod:i:i, incrementPeriod:i:i, incrementStep:i:i, incrementSubstep:i:i, initializeBranch:iiii:i, setStep:ii:i, setSubstep:ii:i]
extern redeem_interpolate.se: [interpolate:iiiii:i]
extern redeem_center.se: [center:iiiii:i, covariance:iiiii:i]
extern redeem_score.se: [blank:iiiii:i, deflate:iiiii:i, latent:iiiii:i, loadings:iiiii:i, score:iiiii:i]
extern redeem_adjust.se: [reputation_delta:iiiii:i, select_scores:iiiii:i, weighted_delta:iiiii:i]
extern redeem_resolve.se: [resolve:iiiii:i, smooth:iiiii:i]
extern redeem_payout.se: [payout:iiiii:i]

# WHITELIST = 0xf1e4b1b0d357ded7a34c08dcac1a5d8d1eda795c
# EVENTS = 0xe34fd8a3840cba70fdd73a01c75302de959aa5a9
# EXPIRING = 0xb7b617b776e66cbae79606d2b6221501ad110090
# BRANCHES = 0x2440e4769deb9fd3fd528884b95dc76e4e3482cf
WHITELIST = create("../data and api files/whitelist.se")
EVENTS = create("../data and api files/events.se")
EXPIRING = create("../data and api files/expiringEvents.se")
BRANCHES = create("../data and api files/branches.se")

# replace these with contract addresses once loaded onto the chain!
REDEEM_INTERPOLATE = create("../consensus/redeem_interpolate.se")
REDEEM_CENTER = create("../consensus/redeem_center.se")
REDEEM_SCORE = create("../consensus/redeem_score.se")
REDEEM_ADJUST = create("../consensus/redeem_adjust.se")
REDEEM_RESOLVE = create("../consensus/redeem_resolve.se")
REDEEM_PAYOUT = create("../consensus/redeem_payout.se")

# - 50% of fees already distributed to market creators
#   all remaining fees go to reporters
# - what if not enough consensus or not enough events expiring upcoming
# @return next step or loop index (see below), for final call return new voting period
def dispatch(branchNumber):
    # if !WHITELIST.check(msg.sender):
    #     return(-1)
    with branch = BRANCHES.getBranch(branchNumber):
        with period = BRANCHES.getVotePeriod(branch):
            binary_mock(branch, period)
            with num_events = EXPIRING.getNumberEvents(branch, period):
                with flatsize = EXPIRING.getVSize(branch, period):
                    with num_reports = flatsize / num_events:
                        with step = BRANCHES.getStep(branch):
                            log(step)
                            if step == 9:
                                REDEEM_PAYOUT.payout(branch, period, num_events, num_reports, flatsize)
                                BRANCHES.setStep(branch, 0) # reset step
                                BRANCHES.incrementPeriod(branch)
                                return(period + 1)
                            elif step == 0:
                                REDEEM_INTERPOLATE.interpolate(branch, period, num_events, num_reports, flatsize)
                            elif step == 1:
                                REDEEM_CENTER.center(branch, period, num_events, num_reports, flatsize)
                                BRANCHES.incrementStep(branch)
                                return(2)
                            elif step == 2:
                                REDEEM_CENTER.covariance(branch, period, num_events, num_reports, flatsize)
                                BRANCHES.incrementStep(branch)
                                return(3)
                            #######################
                            # loop MAX_COMPONENTS #
                            #######################
                            elif step == 3:
                                with substep = BRANCHES.getSubstep(branch):
                                    if substep == 4:
                                        more = REDEEM_SCORE.score(branch, period, num_events, num_reports, flatsize)
                                        if more == 1:
                                            return(3) # step
                                        else:
                                            BRANCHES.setSubstep(branch, 0) # reset substep
                                            BRANCHES.incrementStep(branch) # next step
                                            return(4) # step
                                    elif substep == 0:
                                        REDEEM_SCORE.blank(branch, period, num_events, num_reports, flatsize)
                                    #######################
                                    # loop MAX_ITERATIONS #
                                    #######################
                                    elif substep == 1:
                                        more = REDEEM_SCORE.loadings(branch, period, num_events, num_reports, flatsize)
                                        if more == 1:
                                            return(1) # substep
                                    ############
                                    # end loop #
                                    ############
                                    elif substep == 2:
                                        REDEEM_SCORE.latent(branch, period, num_events, num_reports, flatsize)
                                    elif substep == 3:
                                        REDEEM_SCORE.deflate(branch, period, num_events, num_reports, flatsize)           
                                    BRANCHES.incrementSubstep(branch)
                                    return(substep + 1)
                            ############
                            # end loop #
                            ############
                            elif step == 4:
                                REDEEM_ADJUST.reputation_delta(branch, period, num_events, num_reports, flatsize)
                            elif step == 5:
                                REDEEM_ADJUST.weighted_delta(branch, period, num_events, num_reports, flatsize)
                            elif step == 6:
                                REDEEM_ADJUST.select_scores(branch, period, num_events, num_reports, flatsize)
                            elif step == 7:
                                REDEEM_RESOLVE.smooth(branch, period, num_events, num_reports, flatsize)
                            elif step == 8:
                                REDEEM_RESOLVE.resolve(branch, period, num_events, num_reports, flatsize)
                            BRANCHES.incrementStep(branch)
                            return(step + 1)

# inset('../macros/logging.se')
# inset('../macros/mock.se')
