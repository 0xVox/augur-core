# This software (Augur) allows buying and selling event options in ethereum
# Copyright (C)  2014 Chris Calderon, Joey Krug, Alan Lu, Jack Peterson
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joeykrug@gmail.com

BRANCH = 0
EVENT = 1
MARKET = 2

# Every entity in our contract has similar metadata.
# Instead of putting it in each entity, we put all the
# metadata here.
# Info's index is the hash of the item we're getting info on
data Info[](typecode, description[2048], descriptionLength, creator, creationFee)

# CurrentVotePeriod is the current index in eventsExpDates
# Branches' index is the hash of the branch (aka branchID)
# RepRequired is the amount of reputation required to reach quorem
# markets[] is a 0 index array of market hashes (a.k.a. marketID)
# currentVotePeriod is a nonce that tells us which bucket of events up to be
# voted on in the upcoming vote period
data Branches[](currentVotePeriod, markets[], marketCount, periodLength, repRequired)

# Events' index is the eventID
# a binary outcome state 1 is no, 2 is true, 0 if not determined
# a binary outcome has 0 for min and 1 for max value
# S&P 500 would be say 0 and 4700, respectively
data Events[](branch, expirationDate, outcome, minValue, maxValue, numOutcomes)

# Reporting index is the branchID
# Reporters index is the rep. address
# We 0 index reputation so can walk thru for consensus
# EventsExpDates index is the currentVotePeriod or in the future if an event expires in the future
# RepIDtoIndex returns a reporter's reporters[] index given their reputationID as the key
# Events is 0 indexed as well
data Reporting[](eventsExpDates[](numberEvents, events[], totalRepReported, reporters[][]), reputation[](repValue, reporterID), numberReporters, repIDtoIndex[])

# Markets' index is the marketID
# Events is a 0 indexed array of events in the market in the format of
    # [1, event, event, 2, event, 3, event, event, event]
    # 1 means dimension 1, 2 is events in dimension 2, 3 is the dimension 3 events
# Sharespurchased keeps track of the number of shares purchased for each outcome
    # sharesPurchased states starts at 1 - (same for participants[].shares[] array)
# Participants is a 0 indexed array of participants, their cashIDs, and the shares in each outcome they've purchased of an event
data Markets[](branch, events[], sharesPurchased[], participants[](participantID, shares[]), lenEvents, currentParticipant, winningOutcome, alpha, cumulativeScale, numOutcomes)

data p2pBets[](eventID, amtToBet, outcomeOneBettor, outcomeZeroBettor)

data cashcoin_balances[]

def init():
    # test initial funds
    self.cashcoin_balances[tx.origin] = 1000000*2^64
    self.Reporting[1010101].repIDtoIndex[tx.origin] = 0
    self.Reporting[1010101].reputation[0].repValue = 47
    self.Reporting[1010101].reputation[0].reporterID = tx.origin
    self.Reporting[1010101].numberReporters = 1
    self.Info[1010101].typecode = 0
    self.Info[1010101].description[] = "initial branch"
    self.Info[1010101].creator = 0xcd2a3d9f938e13cd947ec05abc7fe734df8dd826
    self.Info[1010101].creationFee = 10
    self.Branches[1010101].currentVotePeriod = block.number / 403200
    self.Branches[1010101].marketCount = 0
    self.Branches[1010101].periodLength = 403200
    self.Branches[1010101].repRequired = 14000000

# string chunks
macro chunks($l):
    $l + if(l%32 != 0, 1, 0)

def get_cash_balance(address):
    return(self.cashcoin_balances[address])

# should send values as fixed point in UI (1 is 2^64, 4 is 4*2^64, .5 is 2^63, etc.)
def send_cashcoin(recver, value):
    sender = tx.origin
    sender_balance = self.cashcoin_balances[sender]
    if(sender_balance >= value):
        self.cashcoin_balances[sender] -= value
        self.cashcoin_balances[recver] += value
        return(1)
    else:
        return(0)

def send_reputation(branch, recver, value):
    if(value<=0 or !self.send_cashcoin(branch, 5*2^64)):
        return(0)
    sender = tx.origin
    senderIndex = self.Reporting[branch].repIDtoIndex[sender]
    receiverIndex = self.Reporting[branch].repIDtoIndex[recver]
    # if the sender's rep. account doesn't exist, make one
    if(self.Reporting[branch].reputation[senderIndex].reporterID!=tx.origin):
        reporterIndex = self.Reporting[branch].numberReporters
        self.Reporting[branch].repIDtoIndex[tx.origin] = reporterIndex
        self.Reporting[branch].reputation[reporterIndex].repValue = 0
        self.Reporting[branch].reputation[reporterIndex].reporterID = tx.origin
        self.Reporting[branch].numberReporters += 1
        return(text("Your reputation account was just created, earn some rep. before you can send to others"): str)

    if(self.Reporting[branch].reputation[receiverIndex].reporterID!=recver):
        return(text("Receiving address doesn't exist"): str)
        
    sender_balance = self.Reporting[branch].reputation[senderIndex].repValue
    if(sender_balance >= value):
        self.Reporting[branch].reputation[senderIndex].repValue -= value
        self.Reporting[branch].reputation[receiverIndex].repValue += value
        return(1)
    else:
        return(0)
        
def get_rep_balance(branch, address):
    return(self.Reporting[branch].reputation[self.Reporting[branch].repIDtoIndex[address]].repValue)

# period length is given in blocks
# description format is branchName:description
# is there some way we can include the description bytes in the sha256 hash?
def make_subbranch(description:str, periodLength, parent, repRequired):
    if(periodLength<=0 or !self.Branches[parent].periodLength or !repRequired or description==0):
        return(0)
    branchinfo = string((items=7)+len(description))
    branchinfo[0] = BRANCH                                      #typecode
    branchinfo[1] = tx.origin                                   #creator address
    branchinfo[2] = 47*2^64                                     #creation fee
    branchinfo[3] = periodLength                                #length of voting cycle
    branchinfo[4] = block.number                                #current block number
    branchinfo[5] = parent                                      #branchID of parent branch
    branchinfo[6] = repRequired                                 #minimum rep required to vote
    mcopy(branchinfo+(items=7), description, len(description))
    # people can check that these characteristics hash to the ID if they want
    # people can hand a friend their new branch hash and characteristics and say, "don't trust me? check"
    branchID = sha256(branchinfo, len(branchinfo))

    if(!self.Branches[branchID].periodLength and !self.Info[branchID].creator and self.send_cashcoin(branchID, 47*2^64)):
        self.Info[branchID].typecode = BRANCH
        self.Info[branchID].creator = tx.origin
        self.Info[branchID].creationFee = 47*2^64
        self.Info[branchID].descriptionLength = len(description)
        save(self.Info[branchID].description[0], description, chars=len(description))
        self.Branches[branchID].periodLength = periodLength
        self.Branches[branchID].repRequired = repRequired
        self.Branches[branchID].currentVotePeriod = block.number / periodLength
        i = 0
        while i < self.Reporting[parent].numberReporters:
            self.Reporting[branchID].reputation[i].reporterID = self.Reporting[parent].reputation[i].reporterID
            self.Reporting[branchID].reputation[i].repValue = self.Reporting[parent].reputation[i].repValue
            i+=1
        self.Reporting[branchID].numberReporters = i
        return(branchID)
    else:
        return(0)

# numOutcomes is number of outcomes for this event, e.g. quarter mile times from 10.0
# to 11.0 would be 11 outcomes (if incremented by 0.1)
def create_event(branch, description:str, expDate, minValue, maxValue, numOutcomes):
    if(self.Branches[branch].periodLength and description!=0 and expDate>block.number):
        eventinfo = string((items=8)+len(description))
        eventinfo[0] = EVENT                                        #typecode
        eventinfo[1] = branch                                       #branchID
        eventinfo[2] = expDate                                      #expiration date
        eventinfo[3] = tx.origin                                    #creator address
        eventinfo[4] = 42*2^64                                      #creation fee
        eventinfo[5] = minValue                                     #minimum outcome value
        eventinfo[6] = maxValue                                     #maximum outcome value
        eventinfo[7] = numOutcomes                                  #number of outcomes
        mcopy(eventinfo+(items=8), description, len(description))
        eventID = sha256(eventinfo, chars=len(eventinfo))
    else:
        return(0)

    if (!self.Info[eventID].creator and !self.Events[eventID].branch and self.send_cashcoin(branch, 42*2^64)):
        self.Info[eventID].typecode = EVENT
        self.Info[eventID].creator = tx.origin
        self.Info[eventID].creationFee = 42*2^64
        self.Info[eventID].descriptionLength = len(description)
        save(self.Info[eventID].description[0], description, chars=len(description))
        self.Events[eventID].branch = branch
        self.Events[eventID].expirationDate = expDate
        self.Events[eventID].minValue = minValue
        self.Events[eventID].maxValue = maxValue
        self.Events[eventID].numOutcomes = numOutcomes
        # see which future period it expires in and put the event in that bin
        futurePeriod = expDate / self.Branches[branch].periodLength
        self.Reporting[branch].eventsExpDates[futurePeriod].events[self.Reporting[branch].eventsExpDates[futurePeriod].numberEvents] = eventID
        self.Reporting[branch].eventsExpDates[futurePeriod].numberEvents += 1
        return(eventID)
    else:
        return(0)

        data Markets[](branch, events[], sharesPurchased[], participants[](participantID, shares[]), lenEvents, currentParticipant, winningOutcome, alpha, cumulativeScale, numOutcomes)

# alpha is equal to v/(n*log(n)) where v is the max percent commission,
# and n is the number of outcomes people can trade. Alpha is set when
# a market is created.
macro ls_lmsr($marketID):
    with $Bq = 0:
        with $l = self.Markets[$marketID].numOutcomes:
            with $i = 1:
                while $i <= $l:
                    $Bq += self.Markets[$marketID].sharesPurchased[$i]
                    $i += 1
                $Bq *= self.Markets[$marketID].alpha
                $Bq *= self.Markets[$marketID].cumulativeScale
                $i = 1
                with $sum_exp = 0:
                    with $a = 0:
                            while $i <= $l:
                                $a = self.Markets[$marketID].sharesPurchased[$i]
                                $sum_exp += self.exp($a*2^64/$Bq)
                                $i += 1
                            $Bq*self.log($sum_exp)/2^64

# alpha is a fixedpoint number 
# initialLiquidity is initial number of shares of each outcome you want to buy/initialize/set
def create_market(branch, description:str, alpha, initialLiquidity, events:arr):
    if(len(events) > 203 or !self.Branches[branch].periodLength or description==0 or !initialLiquidity or !alpha):
        return(0)
	# check that events have same exp. dates and branch
	i = 0
    numOutcomes = 1
	eventsConcat = 0
	cumulativeScale = 0
    n = 1
    eventsArray = array(len(events))
    eventNum = 0
	while i < len(events):
        if(events[i]==n):
            i+=1
            currentDimenOutcomes = 0
            while(events[i]!=0 and events[i]!=(n+1)):
                event = events[i]
                eventsConcat += event
                if (self.Events[event].branch != branch or !self.Info[eventID].creator):
                    return(0)
                #provided not a binary outcome
                if(self.Events[event].maxValue!=1):
                    cumulativeScale += self.Events[event].maxValue - self.Events[event].minValue
                if(self.Events[event].numOutcomes==2):
                    currentDimenOutcomes += 1
                else:
                    currentDimenOutcomes += self.Events[event].numOutcomes
                eventsArray[eventNum] = event
                eventNum += 1
                i+=1
            currentDimenOutcomes += 1
            numOutcomes *= currentDimenOutcomes
            n += 1
        else:
            # 1 wasn't the first array item
            return(0)

	# formation of marketID (hash)
    marketinfo = string((items=9)+len(description))
    marketinfo[0] = MARKET
    marketinfo[1] = tx.origin
    marketinfo[2] = initialLiquidity
    marketinfo[3] = branch
    marketinfo[4] = eventsConcat
    marketinfo[5] = len(events)
    marketinfo[6] = cumulativeScale
    marketinfo[7] = alpha
    marketinfo[8] = numOutcomes
    mcopy(marketinfo+(items=9), description, chars=len(description))
    marketID = sha256(marketinfo, chars=len(marketinfo))

    # buy some of all outcomes
	# ls-lmsr needs at least a very small initial liquidity
    y = 1
    while y <= numOutcomes:
        self.Markets[marketID].sharesPurchased[y] += initialLiquidity
    cost = ls_lmsr(marketID)

	if(self.send_cashcoin(marketID, cost)):
		# add event list to the market
		z = 0
		while z<=eventNum:
			# initialize market events array with eventIDs from the eventList
			self.Markets[marketID].events[z] = eventsArray[eventNum]
			z+=1
			
 		self.Info[marketID].typecode = MARKET
        self.Info[marketID].creator = tx.origin
        self.Info[marketID].creationFee = initialLiquidity
        self.Info[marketID].descriptionLength = len(description)
        save(self.Info[marketID].description[0], description, chars=len(description))
        self.Markets[marketID].branch = branch
        self.Markets[marketID].alpha = alpha
        self.Markets[marketID].lenEvents = len(events)
        self.Markets[marketID].cumulativeScale = cumulativeScale
        self.Markets[marketID].numOutcomes = numOutcomes
        self.Markets[marketID].numberEvents = numEvents
        # add the market to the branch
        marketCount = self.Branches[branch].marketCount
        self.Branches[branch].markets[marketCount] = marketID
        self.Branches[branch].marketCount += 1
        return(marketID)
	else:
        # revert shares bought
        y = 1
        while y <= numOutcomes:
            self.Markets[marketID].sharesPurchased[y] -= initialLiquidity
		return(0)

# amount of shares should be an integer
def buy_shares(branch, market, outcome, amount):
    # need to check that event hasn't started to be in the new voting batch yet!!!!
    # can still trade if expired but before that ^
    if (self.Markets[market].branch!=branch or outcome==0):
        return(0)
    # lmsr cost calcs
    oldCost = ls_lmsr(market)
    self.Markets[market].sharesPurchased[outcome] += amount
    newCost = ls_lmsr(market)

    # these prices are in fixed point
    pricePerShare = newCost - oldCost
    participantNumber = self.Markets[market].currentParticipant
  
    # send shares of the event to user address
    # if user doesn't have enough money, revert
    if(self.cashcoin_balances[tx.origin]<amount*pricePerShare):
        self.Markets[market].sharesPurchased[outcome] -= amount
        return(0)
    else:
        # send money from user acc. to market address/account
        self.send_cashcoin(market, pricePerShare*amount)
        self.Markets[market].participants[participantNumber].participantID = tx.origin
        self.Markets[market].participants[participantNumber].shares[outcome] += amount
        self.Markets[market].currentParticipant += 1
        return(participantNumber)

# amount is amount of shares to buy
# instead of inputting particip. num could just loop through array if dont have it
def sell_shares(branch, market, outcome, amount, participantNumber):
    # When sell check that event hasn't expired
    if (self.Markets[market].participants[participantNumber].participantID != tx.origin or self.Markets[market].branch!=branch or outcome==0):
        return(0)
    # lmsr cost calcs
    oldCost = ls_lmsr(market)
    self.Markets[market].sharesPurchased[outcome] -= amount
    newCost = ls_lmsr(market)

    # these prices are in fixed point
    pricePerShare = oldCost - newCost
    participantNumber = self.Markets[market].currentParticipant

    # remove shares from the user's account
    # if user actually doesn't have the shares, revert
    if(self.Markets[market].participants[participantNumber].event[event].shares[outcome] < amount):
        self.Markets[market].sharesPurchased[outcome] += amount
        return(0)
    else:
        # send bitcoin from the market to the user acc.
        self.cashcoin_balances[market] -= priceToPayPerShare*amount
        self.cashcoin_balances[tx.origin] += priceToPayPerShare*amount
        self.Markets[market].participants[participantNumber].shares[outcome] -= amount
        return(1)

def queryShareCost():
    return(1)

#check if the eventID is in the currentvotingperiod pointed to by the branchID's currentVotePeriod 
def inPeriod(branchID, eventID):
    votePeriod = self.Branches[branchID].currentVotePeriod
    i = 0
    while i < self.Reporting[branchID].eventsExpDates[votePeriod].numberEvents:
        if(eventID==self.Reporting[branchID].eventsExpDates[votePeriod].events[i]):
            return(1)
        i += 1
    return(0)

# a no vote is -2^64, a yes vote is 2^64 and a can't determine vote is 2^63 (a empty ballot is 0)
# atm voters who do vote are req. to vote on all things in their respective ballots (even if just a 0 / no vote)
# ui should handle this ^
# ballot should be all votes for events in order of the events from self.Reporting[branch].eventsExpDates[futurePeriod].numberEvents
# and loop through the events[] array from 0 to numberEvents -1 for the votes list / order
# should make an API function for this (make ballot)!!!
# UI will need a function to get the items in that array above so it can make a report!
# check this fun.
# people could report something like 16027*2^64 for a scalar
def vote(branch, report:arr):
	# make sure the branch exists
	repIndex = self.Reporting[branch].repIDtoIndex[tx.origin]
	# need report length to be same as number of items in the current eventexpdates voting period events!
	if(len(report)!=self.Reporting[branch].eventsExpDates[self.Branches[branch].currentVotePeriod].numberEvents):
		return(0)

	# if current period is more than 2 periods past the vote period
	# then there can be no more voting for that voting period
	# (reasoning being: >1 period past means all the events in that period have expired)
	# (>2 periods past mean the events have exp. & people have had 1 full period to vote)
	# currently requires events to expire to vote
	currentPeriod = block.number / self.Branches[branch].periodLength
	if (self.Reporting[branch].reputation[repIndex].reporterID != tx.origin | currentPeriod > (self.Branches[branch].currentVotePeriod+2) | currentPeriod < (self.Branches[branch].currentVotePeriod+1)):
		return(0)

	reputation = self.Reporting[branch].reputation[repIndex].repValue

	if (report[i] != 2^64 | report[i] != -2^64 | report[i] != 0 | report[i] != 2^63):
		return(0) # make sure vote values are valid
	
	i = 0
	while i < len(report):
		if(!self.inPeriod(branch, report[i])):
			return(0)
		i += 1

	# need to update stuff for quorem
	# and store the report and the rep value
	while i < len(report):
		self.Reporting[branchID].eventsExpDates[self.Branches[branch].currentVotePeriod].reporters[tx.origin][i] = report[i]
		i+=1
	self.Reporting[branchID].eventsExpDates[self.Branches[branchID].currentVotePeriod].totalRepReported += reputation
	return(1)

# returns whether a quorem has a matured event and whether
# the number of required reports are met as a tuple (matured, met)
def check_quorum(branch):
    currentPeriod = block.number / self.Branches[branch].periodLength
    # provided the currentPeriod is >2 periods past the things we're going to rbcr on
    # we can then conclude it has matured and people have had time to vote
    if (currentPeriod > (self.Branches[branch].currentVotePeriod+2)):
        matured = true
    else:
        matured = false
    currentVotePeriod = self.Branches[branchID].currentVotePeriod
    # check that enough people actually did vote
    if (self.Reporting[branch].eventsExpDates[currentVotePeriod].totalRepReported >= self.Branches[branch].repRequired):
        met = true
    else:
        met = false
    if(met and matured):
        return(1)
    else:
        return(0)
        
# perhaps give the redeemer some fees to cover svd costs
# 25% of fees already distributed to market creatorswww
# so 2/3 of remaining fees to voters = 50%
# and 1/3 of remaining fees to event creators = 25%
# need to check >60% per event reported
# fix this
def redeem(branch):
	if(!self.check_quorum(branch)):
		return(text("quorem not satisfied yet"): str)
	currentVotePeriod = self.Branches[branchID].currentVotePeriod
	# loop through reputation and check if in reporters, if so use their report, if not use the fillin / not reported report
	# use this to make a giant array of votes to pass to self.consensus
	# want to pass votes for each 0 indexed event in order (so we get votes from an actual reporter)
	# (if they didn't vote we set their array for each event to 0,0,0,0,0,0, etc...)
	reputation = array(self.Reporting[branch].numberReporters)
	numberEvents = self.Reporting[branch].eventsExpDates[currentvotePeriod].numberEvents
	numReporters = self.Reporting[branch].numberReporters
	votes = array(numReporters * numberEvents)

	i = 0
	while i < numReporters:
		# checks to see if each reporter actually voted on any events
		reporterID = self.Reporting[branch].reputation[i].reporterID
		reputation[i] = self.Reporting[branch].reputation[i].repValue

		# if they didn't vote do nothing (these values will be 0 by default due to Serpent array styles)

		# else if the reporter did report on events (check if they voted on first event)
		if(self.Reporting[branch].eventsExpDates[currentVotePeriod].reporters[reporterID][0] != 0):
			x = 0
			while x < numberEvents:
				votes[x + i*numberEvents] = self.Reporting[branch].eventsExpDates[currentVotePeriod].reporters[reporterID][x]
				x += 1
		i += 1

	# populate returned arrays
	megaArray = self.consensus(votes, reputation)
	outcomes_final = array(numberEvents)
	event_bonus = array(numberEvents)
	voter_bonus = array(numReporters)
	a = 0
	while a < numberEvents:
		outcomes_final[a] = megaArray[a]
		a+=1
	b = numberEvents
	while b < (2*numberEvents):
		event_bonus[b] = megaArray[b]
		b+=1
	c = (2*numberEvents)
	while c < numReporters:
		voter_bonus[c] = megaArray[c]
		c+=1

	# get event ID for each event by taking the x index in the votes arrays - shoving it in reporting.events[]
	# and getting the cooresponding ID
	n = 0
	while n < numberEvents:
		eventID = self.Reporting[branch].eventsExpDates[currentVotePeriod].events[n]
		# then take outcomes_final and set each event outcome to -1 if false or 1 if true (if 0 it's undecided)
		# a scalar could have a number like say 47
		self.Events[eventID].outcome = outcomes_final[n]
		
		# need to loop through eventid holders and distribute 25% coins using the event_bonus to determine how much
		# of the 25% each get
		self.cashcoin_balances[self.Info[eventID].creator] += fixed_multiply(event_bonus[n], self.cashcoin_balances[branch]) / 3
		self.cashcoin_balances[branch] -= fixed_multiply(event_bonus[n], self.cashcoin_balances[branch]) / 3

	# need to loop through rep holders and distribute 50% of branch fees to voters' cashcoin addresses 
	# (use 2/3 because 25% was distributed in market creation)
	# also need to take voter_bonus and redistribute reputation in the Reporting structure accordingly
	z = 0
	while z < numReporters:
		self.Reporting[branch].reputation[z].repValue += (voter_bonus[z]*21000000)/2^64
		self.cashcoin_balances[self.Reporting[branch].reputation[z].reporterID] += 2*self.cashcoin_balances[branch]*voter_bonus[z] / (3*2^64*numReporters)
		self.cashcoin_balances[branch] -= 2*self.cashcoin_balances[branch]*voter_bonus[z] / (3*2^64*numReporters)
	self.Branches[branch].currentVotePeriod += 1
	return(self.Branches[branch].currentVotePeriod)


# loop through events in the market, get their outcomes and use those to determine the winning events!
# distribute coins among winning events
# only works for inTrade style 1 event in a market predictions at the moment
# this doesn't work due to winning events oddities if(1) thing
# fix this
# what happens if undecided event in a market?
# implement multidimensional scalar payouts and multidimensional payouts
# when multidimen fancy payouts we report on the events separately per usual, but combine them to determine winning state of a fancy market and then payout that state
# make so can't close until last exp event in market has expired
def close_market(branch, market):
	if(self.cashcoin_balances[market]<=0):
		return(0)
	currentPeriod = block.number / self.Branches[branch].periodLength
	numberEvents = self.Markets[market].numberEvents
	eventVotePeriod = self.Events[self.Markets[market].events[numberEvents-1]].expirationDate / self.Branches[branch].periodLength
	if(currentPeriod > (eventVotePeriod+2) && self.Reporting[branch].eventsExpDates[currentPeriod].totalRepReported >= self.Branches[branch].repRequired):
		# give back initial liquidity
		#self.cashcoin_balances[market] -= self.Info[market].creationFee
		#self.cashcoin_balances[self.Info[market].creator] += self.Info[market].creationFee
		# get # of shares of winning outcome``k-,ij9uh8

		# loop through events in the market, get their outcomes and use those to determine the winning events!
		n = 0
		e = 0
		while n < numberEvents:
			if(self.Events[self.Markets[market].events[n]].outcome & self.Events[self.Markets[market].events[n]].outcome!=0):
                # make this one winning outcome
				self.Markets[market].winningEvents[e] = self.Markets[market].events[n]
				e+=1
			n+=1

		winningShares = 0
		# number of winning events is equivalent to e
	 	#   a = 0
	 	#   while a < e:
	 	#   self.Markets[market].events[self.Markets[market].winningEvents[e]].shares
	 	# needs to be fixed for scalar payouts
		winningEvent = self.Markets[market].winningEvents[e-1]
		winningShares = 0
		winningOutcome = self.Events[winningEvent].outcome
		winningSharesIndex = 0
		if(winningOutcome==1):
			winningShares = self.Markets[market].sharesPurchased[(2*(n-1) + 1)]
			winningSharesIndex = 1
		elif(winningOutcome==-1):
			winningShares = self.Markets[market].sharesPurchased[2*(n-1)]
			winningSharesIndex = 0
		elif(winningOutcome==0):
			return(text("outcome hasn't been decided yet"): str)
        elif(winningOutcome==2^63):
            # return funds to people

		# distribute cashcoin to the people who won money by holding winning shares
		i = 0
		while i <= self.Markets[market].currentParticipant:
			sharesOwned = self.Markets[market].participants[i].event[winningEvent].shares[winningSharesIndex]
			participant = self.Markets[market].participants[i].participantID
			# winning price is $1 / share
			# pricePerShare = 2^64
			#moneyWon = sharesOwned*pricePerShare
			pricePerShare = (self.Events[winningEvent].outcome - self.Events[winningEvent].minValue)*2^64/(self.Events[winningEvent].maxValue - self.Events[winningEvent].minValue)
			self.cashcoin_balances[market] -= sharesOwned*pricePerShare
			self.cashcoin_balances[participant] += sharesOwned*pricePerShare

		# give back initial liquidity (or as much of it/profits are left)
		self.cashcoin_balances[self.Info[market].creator] += self.cashcoin_balances[market]
		self.cashcoin_balances[market] -= self.cashcoin_balances[market]
		return(text("Market closed"): str)

### P2P parimutuel betting
def makeBet(eventID, amtToBet):
    betData = array(2)
    betData[0] = eventID
    betData[1] = block.number
    betID = sha256(branchinfo, 2)
    self.p2pBets[betID].eventID = betData[0]
    self.p2pBets[betID].amtToBet = amtToBet

# should add a fee to market
# outcome is 0 or 1
def sendMoneytoBet(betID, outcome):
    if(self.cashcoin_balances[betID+outcome]==0):
        self.send_cashcoin(betID+outcome, self.p2pBets[betID].amtToBet)
    else:
        return(0)

    if(outcome):
        self.p2pBets[betID].outcomeOneBettor = tx.origin
    else:
        self.p2pBets[betID].outcomeZeroBettor = tx.origin

# add support for a .5 outcome
def closeBet(betID):
    # outcome not determined yet
    if(self.Events[self.p2pBets[betID].eventID].outcome == 0):
        return(0)
    # pay out depending on outcome
    if(self.cashcoin_balances[betID+0]==self.p2pBets[betID].amtToBet && self.cashcoin_balances[betID+1]==self.p2pBets[betID].amtToBet):
        self.cashcoin_balances[betID+0] -= self.cashcoin_balances[betID+0]
        self.cashcoin_balances[betID+1] -= self.cashcoin_balances[betID+1]
        if(self.Events[self.p2pBets[betID].eventID].outcome):
            self.cashcoin_balances[self.p2pBets[betID].outcomeOneBettor] += self.p2pBets[betID].amtToBet*2
        elif(self.Events[self.p2pBets[betID].eventID].outcome == -1):
            self.cashcoin_balances[self.p2pBets[betID].outcomeZeroBettor] += self.p2pBets[betID].amtToBet*2
    # someone didn't pay their side of the bet, refund funds
    else:
        self.cashcoin_balances[self.p2pBets[betID].outcomeZeroBettor] += self.cashcoin_balances[betID+0]
        self.cashcoin_balances[self.p2pBets[betID].outcomeOneBettor] += self.cashcoin_balances[betID+1]
        self.cashcoin_balances[betID+0] -= self.cashcoin_balances[betID+0]
        self.cashcoin_balances[betID+1] -= self.cashcoin_balances[betID+1]
    return(1) 
### API (for UI)

# atm voters who do vote are req. to vote on all things in their respective ballots (even if just a 0 / no vote)
# ui should handle this ^
# ballot should be all votes for events in order of the events from self.Reporting[branch].eventsExpDates[futurePeriod].numberEvents
# and loop through the events[] array from 0 to numberEvents -1 for the votes list / order
# should make an API function for this (make ballot)!!!
# UI will need a function to get the items in that array above so it can make a report!
# w/ this function you can get the eventIDs, look them up and report on outcomes (probably w/ another function to look them up) -- make sure in this function to check that the report value is not >maxvalue or <minvalue for the event
def makeBallot(branch):
    numEvents = self.Reporting[branch].eventsExpDates[self.Branches[branch].currentVotePeriod].numberEvents
    eventArray = array(numEvents)
    i = 0
    while i < numEvents:
        eventID = self.Reporting[branch].eventsExpDates[self.Branches[branch].currentVotePeriod].events[numEvents]
        eventArray[i] = eventID
    return(eventArray: arr)

# arrayIndex only matters if array
def api(dataStructure, itemNumber, arrayIndex, ID):
    if(dataStructure==0):
        if(itemNumber==0):
            return(self.Info[ID].typecode)
        #elif(itemNumber==1):
        #length=self.Info[ID].descriptionLength
        #return(load(self.Info[ID].description[0], chars=length):a)
        #length=self.Info[ID].descriptionLength
        #data = load(self.Info[ID].description[0], chars=length)
        #return(data, length/32 + if(length%32,1,0))
        #    return(self.Info[ID].description[])
        elif(itemNumber==2):
            return(self.Info[ID].descriptionLength)
        elif(itemNumber==3):
            return(self.Info[ID].creator)
        elif(itemNumber==4):
            return(self.Info[ID].creationFee)
    elif(dataStructure==1):
        if(itemNumber==0):
            return(self.Branches[ID].currentVotePeriod)
        elif(itemNumber==1):
            return(self.Branches[ID].markets[arrayIndex])
        elif(itemNumber==2):
            return(self.Branches[ID].marketCount)
        elif(itemNumber==3):
            return(self.Branches[ID].periodLength)
        elif(itemNumber==4):
            return(self.Branches[ID].repRequired)
    elif(dataStructure==2):
        if(itemNumber==0):
            return(self.Events[ID].branch)
        elif(itemNumber==1):
            return(self.Events[ID].expirationDate)
        elif(itemNumber==2):
            return(self.Events[ID].outcome)
        elif(itemNumber==3):
            return(self.Events[ID].minValue)
        elif(itemNumber==4):
            return(self.Events[ID].maxValue)
    elif(dataStructure==3):
        if(itemNumber==0):
            return(text("Please call the eventsExpApi function"): str)
        elif(itemNumber==1):
            return(text("Please call the reputation api function"): str)
        elif(itemNumber==2):
            return(self.Reporting[ID].numberReporters)
        elif(itemNumber==3):
            return(self.Reporting[ID].repIDtoIndex[arrayIndex])
    elif(dataStructure==4):
        if(itemNumber==0):
            return(self.Markets[ID].branch)
        elif(itemNumber==1):
            return(self.Markets[ID].events[arrayIndex])
        elif(itemNumber==2):
            return(self.Markets[ID].sharesPurchased[arrayIndex])
        elif(itemNumber==3):
            return(text("Please call the participants api function"): str)
        elif(itemNumber==4):
            return(self.Markets[ID].lossLimit)
        elif(itemNumber==5):
            return(self.Markets[ID].tradingFee)
        elif(itemNumber==6):
            return(self.Markets[ID].numberEvents)
        elif(itemNumber==7):
            return(self.Markets[ID].currentParticipant)
        #remove this
        elif(itemNumber==8):
            return(self.Markets[ID].winningOutcome)
        elif(itemNumber==9):
            return(self.Markets[ID].alpha)
        elif(itemNumber==10):
            return(self.Markets[ID].probabilities[arrayIndex])
        elif(itemNumber==11):
            return(self.Markets[ID].cumulativeScale)
    elif(dataStructure==5):
        if(itemNumber==0):
            return(self.p2pBets[ID].eventID)
        elif(itemNumber==1):
            return(self.p2pBets[ID].amtToBet)
        elif(itemNumber==2):
            return(self.p2pBets[ID].outcomeOneBettor)
        elif(itemNumber==3):
            return(self.p2pBets[ID].outcomeZeroBettor)

def eventsExpApi(expDateIndex, itemNumber, arrayIndexOne, arrayIndexTwo, ID):
    if(itemNumber==0):
        return(self.Reporting[ID].eventsExpDates[expDateIndex].numberEvents)
    elif(itemNumber==1):
        return(self.Reporting[ID].eventsExpDates[expDateIndex].events[arrayIndexOne])
    elif(itemNumber==2):
        return(self.Reporting[ID].eventsExpDates[expDateIndex].totalRepReported)
    elif(itemNumber==3):
        return(self.Reporting[ID].eventsExpDates[expDateIndex].reporters[arrayIndexOne][ArrayIndexTwo])

def reputationApi(reputationIndex, itemNumber, branchID):
    if(itemNumber==0):
        return(self.Reporting[branchID].reputation[reputationIndex].repValue)
    elif(itemNumber==1):
        return(self.Reporting[branchID].reputation[reputationIndex].reporterID)

# eventID and outcomeNumber only needed if itemNumber is 1
# remove this
def marketParticipantsApi(participantIndex, itemNumber, eventID, outcomeNumber, marketID):
    if(itemNumber==0):
        return(self.Markets[marketID].participants[participantIndex].participantID)
    elif(itemNumber==1):
        return(self.Markets[marketID].participants[participantIndex].event[eventID].shares[outcomeNumber])



# includes
# extern fp:[new, mul, div, intpart, fracpart, log, exp, pow, sqrt]
# FixedPoint = create('fixedpoint.se')
# inset('fixedpoint.se')
# inset('consensus.se')