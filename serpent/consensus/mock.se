extern events.se: [getEventBranch:i:i, getEventInfo:i:a, getExpiration:i:i, getMaxValue:i:i, getMinValue:i:i, getNumOutcomes:i:i, getOutcome:i:i, initializeEvent:iiiiii:i, setOutcome:ii:i]
extern expiringEvents.se: [addEvent:iii:i, getAdjPrinComp:ii:a, getComponentsRemaining:iii:i, getCovarianceMatrixRow:ii:a, getDeflated:ii:a, getEvent:iii:i, getEvents:ii:a, getLatent:ii:i, getLoadingVector:ii:a, getNewOne:ii:a, getNewTwo:ii:a, getNumberEvents:ii:i, getOutcomesFinal:ii:a, getReport:iiii:i, getReportHash:iii:i, getReporterBallot:iii:a, getReportsFilled:ii:a, getReportsMask:ii:a, getScores:ii:a, getSetOne:ii:a, getSetTwo:ii:a, getSmoothRep:ii:a, getTotalRepReported:ii:i, getVSize:ii:i, getWeightedCenteredData:ii:a, makeBallot:ii:a, moveEventsToCurrentPeriod:iii:i, returnOld:ii:a, setAdjPrinComp:iia:i, setCovarianceMatrixRow:iia:i, setDeflated:iia:i, setLatent:iii:i, setLoadingVector:iia:i, setNewOne:iia:i, setNewTwo:iia:i, setOld:iia:i, setOutcomesFinal:iia:i, setReportHash:iiii:i, setReporterBallot:iiiai:i, setReportsFilled:iia:i, setReportsMask:iia:i, setScores:iia:i, setSetOne:iia:i, setSetTwo:iia:i, setSmoothRep:iia:i, setTotalRepReported:iii:i, setVSize:iii:i, setWeightedCenteredData:iia:i]
extern reporting.se: [addRep:iii:i, addReporter:ii:i, faucet:_:_, getNumberReporters:i:i, getRepBalance:ii:i, getRepByIndex:ii:i, getReporterID:ii:i, getReputation:i:a, hashReport:ai:i, repIDToIndex:ii:i, setInitialReporters:ii:i, setRep:iii:i, subtractRep:iii:i]
extern branches.se: [addMarket:ii:i, getBranch:i:i, getBranches:_:a, getMarkets:i:a, getMinTradingFee:i:i, getNumBranches:_:i, getNumMarkets:i:i, getPeriodLength:i:i, getStep:i:i, getSubstep:i:i, getVotePeriod:i:i, incrementPeriod:i:i, incrementStep:i:i, incrementSubstep:i:i, initializeBranch:iiii:i, setStep:ii:i, setSubstep:ii:i]

EVENTS = create("../data and api files/events.se")
EXPIRING = create("../data and api files/expiringEvents.se")
REPORTING = create("../data and api files/reporting.se")
BRANCHES = create("../data and api files/branches.se")

def mock(branch, period):
    with reporters = [0x00e3f8de3ed9d428dc235ce0c25bc1136073be8b, 0x63524e3fe4791aefce1e932bbfb3fdf375bfad89, 0xb76a02724d44c89c20e41882f729a092f14d3eaf, 0xc76a02724d44c89c20e41882f729a092f14d3eaf, 0xd76a02724d44c89c20e41882f729a092f14d3eaf, 0xe76a02724d44c89c20e41882f729a092f14d3eaf]:
        with reputation = [2, 10, 4, 2, 7, 1]:
            with num_reports = len(reporters):
                with reports = array(num_reports):
                    reports[0] = [2, 2, 1, 2]
                    reports[1] = [2, 1, 1, 1]
                    reports[2] = [2, 2, 1, 1]
                    reports[3] = [2, 2, 2, 1]
                    reports[4] = [2, 1, 2, 2]
                    reports[5] = [1, 1, 2, 2]
                    with num_events = len(reports[0]):
                        BRANCHES.initializeBranch(branch, period, 3, 1)
                        with j = 0:
                            while j < num_events:
                                with i = 0:
                                    while i < num_reports:
                                        reports[i][j] = fix(reports[i][j])
                                        i += 1
                                EVENTS.initializeEvent(j, branch, period, 1, 2, 2)
                                EXPIRING.addEvent(branch, period, j)
                                j += 1
                        with i = 0:
                            while i < num_reports:
                                REPORTING.addReporter(branch, reporters[i])
                                REPORTING.setRep(branch, i, fix(reputation[i]))
                                EXPIRING.setReporterBallot(branch, period, i, reports[i], reputation[i])
                                i += 1
                        with i = 0:
                            while i < num_reports:
                                with ballot = EXPIRING.getReporterBallot(branch, period, i, outsz=4):
                                    with j = 0:
                                        while j < num_events:
                                            if reports[i][j] != ballot[j]:
                                                return(-1)
                                            j += 1
                                    i += 1
                            return(1)

inset('constants.se')
