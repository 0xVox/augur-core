# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2014 Chris Calderon, Joey Krug, Alan Lu, Jack Peterson
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Questions?  Please contact jack@tinybike.net or joeykrug@gmail.com.

macro ONE: 2^64

macro YES: 2^65
macro NO: 2^64
macro BAD: 3 * 2^63

macro CATCH_TOLERANCE: 2^64 / 10

# Sum elements of array
macro sum($a):
    with $len = len($a):
        with $total = 0:
            with $i = 0:
                while $i < $len:
                    $total += $a[$i]
                    $i += 1
                $total

# Arithmetic mean
macro mean($a):
    sum($a) / len($a)

# Absolute value
macro abs($n):
    if($n<0, -$n, $n)

# Proportional distance from zero, inputs are fixed point
macro get_weight($a):
    with $len = len($a):
        with $total = 0:
            with $i = 0:
                while $i < $len:
                    $a[$i] = abs($a[$i])
                    $total += $a[$i]
                    $i += 1
                with $wt = array($len):
                    with $i = 0:
                        while $i < $len:
                            $wt[$i] = $a[$i] * ONE / $total
                            $i += 1
                        $wt

# Bins values to 1, 1.5, 2
macro catch($x):
    if($x < (BAD - CATCH_TOLERANCE), NO, if($x > BAD + CATCH_TOLERANCE, YES, BAD))
    # if $x < BAD - CATCH_TOLERANCE:
    #     c = NO
    # elif $x > BAD + CATCH_TOLERANCE:
    #     c = YES
    # else:
    #     c = BAD
    # c

# Absolute value of all array elements
macro array_abs($a):
    with $len = len($a):
        with $absval = array($len):
            with $i = 0:
                while $i < $len:
                    $absval[$i] = abs($a[$i])
                    $i += 1
                $absval

# Minimum value of array
macro minimum($a):
    with $min = $a[0]:
        with $i = 1:
            with $len = len($a):
                while $i < $len:
                    if $a[$i] < $min:
                        $min = $a[$i]
                    $i += 1
                $min

# Maximum value of array
macro maximum($a):
    with $max = $a[0]:
        with $i = 1:
            with $len = len($a):
                while $i < $len:
                    if $a[$i] > $max:
                        $max = $a[$i]
                    $i += 1
                $max

# Find index corresponding to the maximum value of an array
macro findmax($a):
    with $len = len($a):
        with $max = $a[0]:
            with $maxidx = 0:
                with $i = 1:
                    while $i < $len:
                        if $a[$i] > $max:
                            $maxval = $a[$i]
                            $maxidx = $i
                        $i += 1
                    $maxidx        

# Fixed-point multiplication
macro fixed_multiply($x, $y):
    $x * $y / ONE

# Fixed-point division
macro fixed_divide($x, $y):
    $x * ONE / $y

macro concat($a, $b):
    with $c = array(len($a)+len($b)):
        mcopy($c, $a, items=len($a))
        mcopy($c+(items=len($a)), $b, items=len($b))
        $c

macro swap($a, $i, $j):
    with $t = $a[$i]:
        $a[$i] = $a[$j]
        $a[$j] = $t

macro paired_qsort($a, $b):
    with $len = len($a):
        with $c = concat($a, $b):
            with $stack = array($len):
                with $top = 0:
                    with $h = 0:
                        with $l = 0:
                            with $x = 0:
                                with $i = 0:
                                    with $j = 0:
                                        $stack[0] = 0
                                        $stack[1] = $len - 1
                                        $top = 1
                                        while $top >= 0:
                                            $h = $stack[$top]
                                            $l = $stack[$top - 1]
                                            $top -= 2
                                            $x = $c[$h]
                                            $i = $l - 1
                                            $j = $l
                                            
                                            while $j <= $h - 1:
                                                if $c[$j] <= $x:
                                                    $i += 1
                                                    swap($c, $i, $j)
                                                    swap($c, $i + $len, $j + $len)
                                                $j += 1
                                            
                                            swap($c, $i+1, $h)
                                            swap($c, $i + $len + 1, $h + $len)
                                            if $i > $l:
                                                $stack[$top + 1] = $l
                                                $stack[$top + 2] = $i
                                                $top += 2
                                            if $i + 2 < $h:
                                                $stack[$top + 1] = $i + 2
                                                $stack[$top + 2] = $h
                                                $top += 2
                                        $c

# Weighted median of an array
macro weighted_median($data, $weights):
    with n = len($data):
        with done = 0:
            with midpoint = sum($weights) / 2:
                with j = 0:
                    while j < num_present[i]:
                        if $weights[j] > midpoint:
                            with maxidx = findmax($weights):
                                wmedian = $data[maxidx]
                            done = 1
                        j += 1
                if done == 0:
                    with sorted = paired_qsort($data, $weights):
                        with sorted_data = array(n):
                            with sorted_weights = array(n):
                                with j = 0:
                                    while j < n:
                                        sorted_data[j] = sorted[j]
                                        sorted_weights[j] = sorted[j + n]
                                        j += 1
                                with cumulative_weight = 0:
                                    with idx = 0:
                                        while cumulative_weight <= midpoint:
                                            idx += 1
                                            cumulative_weight += sorted_weights[idx-1]
                                        cumulative_weight -= sorted_weights[idx-1]
                                        # conservative machine epsilon: 
                                        # 0x1197998 = 18446744 = ONE / 10^12
                                        if abs(cumulative_weight - midpoint) < 0x1197998:
                                            wmedian = (sorted_data[idx-2] + sorted_data[idx-1]) / 2
                                        else:
                                            wmedian = sorted_data[idx-1]
                wmedian

# Outer product of vectors
macro outer_product($u, $v):
    with $usz = len($u):
        with $p = array($usz^2):
            with $i = 0:
                while $i < $usz:
                    with $j = 0:
                        while $j < $usz:
                            $p[$i*$usz + $j] += $u[$i] * $v[$j] / ONE
                            $j += 1
                    $i += 1
                $p

# Flattened fixed-point matrix multiplication
macro matrix_multiply($a, $arows, $acols, $b, $brows, $bcols):
    with $c = array($arows*$bcols):
        with $i = 0:
            while $i < $arows:
                with $j = 0:
                    while $j < $bcols:
                        with $k = 0:
                            while $k < $acols:
                                $c[$i*$bcols + $j] += $a[$i*$acols + $k] * $b[$k*$bcols + $j] / ONE
                                $k += 1
                        $j += 1
                $i += 1
            $c

# Prints an array.  Logs either contain a single entry (for integer values)
# or two entries (for fixed point numbers, the first entry is the integer
# and the second is the decimal).
macro log_array($a):
    with $n = len($a):
        with $i = 0:
            while $i < $n:
                # print 8 decimal points (adjustable)
                with $decimal = ($a[$i] & (ONE - 1)) * 10^8 / ONE:
                    if $decimal > 0:
                        log($a[$i] / ONE, $decimal)
                    else:
                        log($a[$i] / ONE)
                    $i += 1

# Works with modified serpent/pyethereum
macro print_array($x):
    with $n = len($x):
        with $i = 0:
            while $i < $n:
                print($x[$i] / ONE)
                $i += 1

def interpolate(reports:arr, reputation:arr, scaled:arr, scaled_max:arr, scaled_min:arr):
    # returns:
    #   reports_filled: [0, flatsize - 1]
    #   reports_mask: [flatsize, 2*flatsize - 1]
    #
    # normalize reputation vector
    reputation = get_weight(reputation)
    with num_reports = len(reputation):
        with flatsize = len(reports):
            with two_flatsize = 2*flatsize:
                with num_events = flatsize / num_reports:
                    with scaled_reports = array(flatsize):
                        with i = 0:
                            while i < num_events:
                                with j = 0:
                                    while j < num_reports:
                                        with idx = i + j*num_events:
                                            if reports[idx] == NA:
                                                scaled_reports[idx] = NA
                                            else:
                                                if scaled[i] == 1:
                                                    scaled_reports[idx] = fixed_divide(reports[idx] - scaled_min[i], scaled_max[i] - scaled_min[i])
                                                else:
                                                    scaled_reports[idx] = reports[idx]
                                        j += 1
                                i += 1
                        # use existing data and reputations to fill missing observations
                        # (weighted average or median over all non-missing data)
                        with reports_interp = array(two_flatsize):
                            with missing_values = 0:
                                with i = 0:
                                    while i < flatsize:
                                        if reports[i] == NA:
                                            reports_interp[i + flatsize] = ONE # reports_mask
                                            missing_values += 1
                                        else:
                                            reports_interp[i] = scaled_reports[i]
                                        i += 1
                                if missing_values:
                                    with num_present = array(num_events):
                                        with i = 0:
                                            while i < num_events:
                                                with j = 0:
                                                    while j < num_reports:
                                                        if reports[i + j*num_reports] != NA:
                                                            num_present[i] += 1
                                                        j += 1
                                                i += 1
                                        with i = 0:
                                            while i < num_events:
                                                if num_present[i] < num_reports:
                                                    with total_active_reputation = 0:
                                                        with active_reputation = array(num_present[i]):
                                                            with active_reports = array(num_present[i]):
                                                                with nan_indices = array(num_reports - num_present[i]):
                                                                    with nan_index = 0:
                                                                        with active_index = 0:
                                                                            with j = 0:
                                                                                while j < num_reports:
                                                                                    with idx = i + j*num_reports:
                                                                                        if scaled_reports[idx] == NA:
                                                                                            nan_indices[nan_index] = idx
                                                                                            nan_index += 1
                                                                                        else:
                                                                                            total_active_reputation += reputation[j]
                                                                                            active_reputation[active_index] = reputation[j]
                                                                                            active_reports[active_index] = scaled_reports[idx]
                                                                                            active_index += 1
                                                                                    j += 1
                                                                    with guess = 0:
                                                                        if scaled[i] == 0:
                                                                            with j = 0:
                                                                                while j < num_present[i]:
                                                                                    active_reputation[j] = fixed_divide(active_reputation[j], total_active_reputation)
                                                                                    guess += fixed_multiply(active_reputation[j], active_reports[j])
                                                                                    j += 1
                                                                            guess = catch(guess)
                                                                        else:
                                                                            with j = 0:
                                                                                while j < num_present[i]:
                                                                                    active_reputation[j] = fixed_divide(active_reputation[j], total_active_reputation)
                                                                                    j += 1
                                                                            guess = weighted_median(active_reports, active_reputation)
                                                                        with j = 0:
                                                                            while j < num_reports - num_present[i]:
                                                                                reports_interp[nan_indices[j]] = guess
                                                                                j += 1
                                                i += 1
                                else:
                                    with i = 0:
                                        while i < flatsize:
                                            reports_interp[i] = scaled_reports[i]
                                            i += 1
                                return(reports_interp, items=two_flatsize)

def center(reports_filled:arr, reputation:arr, scaled:arr, scaled_max:arr, scaled_min:arr, max_iterations):
    with num_reports = len(reputation):
        with flatsize = len(reports_filled):
            with num_events = flatsize / num_reports:
                # calculate weighted centered data matrix
                with weighted_means = array(num_events):
                    with total_weight = 0:
                        with i = 0:
                            while i < num_reports:
                                with j = 0:
                                    while j < num_events:
                                        weighted_means[j] += reputation[i] * reports_filled[i * num_events + j]
                                        j += 1
                                total_weight += reputation[i]
                                i += 1
                            with j = 0:
                                while j < num_events:
                                    weighted_means[j] /= total_weight
                                    j += 1
                            # weighted_centered_data: [0, flatsize-1]
                            # loading_vector [1 0 0 . . . 0]: [flatsize, flatsize + num_events]
                            with lflatsize = flatsize + len(scaled) + 1:
                                with weighted_centered_data = array(lflatsize):
                                    with i = 0:
                                        while i < flatsize:
                                            weighted_centered_data[i] = reports_filled[i] - weighted_means[i % num_events]
                                            i += 1
                                        weighted_centered_data[i] = ONE
                                        weighted_centered_data[lflatsize - 1] = max_iterations
                                        return(weighted_centered_data, items=lflatsize)

def total_variance(wcd:arr, num_reports, num_events):
    with variance = 0:
        with i = 0:
            while i < num_events:
                with avg = 0:
                    with var = 0:
                        with j = 0:
                            while j < num_reports:
                                avg += wcd[j*num_events + i]
                                j += 1
                        avg /= num_reports
                        with j = 0:
                            while j < num_reports:
                                var += (wcd[j*num_events + i] - avg)^2
                                j += 1
                        variance += var / ONE / num_reports
                i += 1
            return(variance)

def rayleigh(v:arr, X:arr, num_reports, num_events):
    # v^T X^T X v
    # -----------
    #    v^T v
    with Xv = array(num_reports):
        with num = 0:
            with i = 0:
                while i < num_reports:
                    with j = 0:
                        while j < num_events:
                            Xv[i] += fixed_multiply(X[i], v[j])
                            j += 1
                        num += Xv[i]^2
                        i += 1
                    with den = 0:
                        with j = 0:
                            while j < num_events:
                                den += v[j]^2
                                j += 1
                        return(fixed_divide(num, den))

def pca_loadings(iv:arr, X:arr, reputation:arr, num_reports, num_events):
    with lflatsize = len(iv):
        with lv = array(lflatsize):
            with j = 0:
                while j < num_reports:
                    with d_dot_lv = 0:
                        with k = 0:
                            while k < num_events:
                                d_dot_lv += X[j*num_events + k] * iv[k]
                                k += 1
                        d_dot_lv /= ONE
                        with k = 0:
                            while k < num_events:
                                lv[k] -= d_dot_lv * X[j*num_events + k] * reputation[j] / ONE^2
                                k += 1
                    j += 1

            with s_dot_s = 0:
                with j = 0:
                    while j < num_events:
                        s_dot_s += lv[j] * lv[j]
                        j += 1
                s_dot_s /= ONE
                with norm_s = s_dot_s / 2:
                    with j = 0:
                        while j < 11:
                            norm_s = (norm_s + s_dot_s*ONE/norm_s) / 2
                            j += 1
                    with j = 0:
                        while j < num_events:
                            lv[j] = lv[j]*ONE/norm_s
                            j += 1
            lv[num_events] = iv[num_events] - 1
            return(lv, items=lflatsize)

def deflate(ev:arr, wcd:arr, num_reports, num_events):
    with dsz = len(wcd):
        with evop = outer_product(ev, ev):
            with ddata = array(dsz):
                with data_x_evop = matrix_multiply(wcd, num_reports, num_events, evop, num_events, num_events):
                    with i = 0:
                        while i < dsz:
                            ddata[i] = wcd[i] - data_x_evop[i]
                            i += 1
                    return(ddata, items=dsz)

def pca_scores(lv:arr, wcd:arr, num_reports, num_events):
    with scores = array(num_reports):
        with i = 0:
            while i < num_reports:
                with k = 0:
                    while k < num_events:
                        scores[i] += fixed_multiply(wcd[i*num_events + k], lv[k])
                        k += 1
                i += 1
            return(scores, items=num_reports)

def calibrate_sets(scores:arr, num_reports, num_events):
    # Which of the two possible 'new' reputation vectors had more in common
    # with the original 'old' reputation?
    # set1: [0, num_reports - 1]
    # set2: [num_reports, 2*num_reports - 1]
    with two_num_reports = 2*num_reports:
        with sets = array(two_num_reports):
            with set1_compare = abs(minimum(scores)):
                with set2_compare = maximum(scores):
                    with i = 0:
                        while i < num_reports:
                            sets[i] = scores[i] + set1_compare
                            i += 1
                        while i < two_num_reports:
                            sets[i] = scores[i - num_reports] - set2_compare
                            i += 1
                        return(sets, items=two_num_reports)

def calibrate_wsets(set1:arr, set2:arr, reputation:arr, reports:arr, num_reports, num_events):
    reputation = get_weight(reputation)
    with three_num_events = 3*num_events:
        with wsets = array(three_num_events):
            with wset1 = get_weight(set1):
                with wset2 = get_weight(set2):
                    with i = 0:
                        with two_num_events = 2*num_events:
                            while i < num_events:
                                with k = 0:
                                    while k < num_reports:
                                        with pos = k*num_events + i:
                                            wsets[i] += fixed_multiply(reputation[k], reports[pos])
                                            wsets[i + num_events] += fixed_multiply(wset1[k], reports[pos])
                                            wsets[i + two_num_events] += fixed_multiply(wset2[k], reports[pos])
                                        k += 1
                                i += 1
                            return(wsets, items=three_num_events)

def pca_adjust(old:arr, new1:arr, new2:arr, set1:arr, set2:arr, scores:arr, num_reports, num_events):
    # Difference in sum of squared errors. If > 0, then new1 had higher
    # errors (use new2); conversely if < 0, then use new1.
    with sse1 = 0:
        with sse2 = 0:
            with i = 0:
                while i < num_events:
                    sse1 += fixed_multiply(new1[i] - old[i], new1[i] - old[i])
                    sse2 += fixed_multiply(new2[i] - old[i], new2[i] - old[i])
                    i += 1
            with ref_ind = sse1 - sse2:
                with adjusted_scores = array(num_reports):
                    if ref_ind <= 0:
                        adjusted_scores = set1
                    else:
                        adjusted_scores = set2
                    return(adjusted_scores, items=num_reports)

def smooth(adjusted_scores:arr, reputation:arr, num_reports, num_events):
    # Weighted sum of old and new reputation vectors.
    # New: row_reward_weighted
    # Old: reputation
    reputation = get_weight(reputation)
    with row_reward_weighted = array(num_reports):
        with i = 0:
            while i < num_reports:
                row_reward_weighted[i] = reputation[i]
                i += 1

        # Overwrite the inital declaration IFF there wasn't perfect consensus.
        if maximum(array_abs(adjusted_scores)) != 0:
            with mean_weight = mean(row_reward_weighted):
                with i = 0:
                    while i < num_reports:
                        row_reward_weighted[i] = adjusted_scores[i] * row_reward_weighted[i] / mean_weight
                        i += 1
            row_reward_weighted = get_weight(row_reward_weighted)
        # Freshly-calculated reward (in reputation) using exponential smoothing
        # (0.1 is the adjustable parameter "alpha", hard-coding it for now)
        with smooth_rep = array(num_reports):
            with i = 0:
                while i < num_reports:
                    smooth_rep[i] = row_reward_weighted[i]/10 + reputation[i]*9/10
                    i += 1
            return(smooth_rep, items=num_reports)

def consensus(smooth_rep:arr, reports:arr, scaled:arr, scaled_max:arr, scaled_min:arr, num_reports, num_events):
    with two_num_events = 2*num_events:
        with outcomes_final = array(num_events):
            # discriminate based on contract type
            with outcomes_raw = array(num_events):
                with i = 0:
                    while i < num_events:
                        if scaled[i] == 1:
                            with active_reports = array(num_reports):
                                with j = 0:
                                    while j < num_reports:
                                        active_reports[j] = reports[i + j*num_events]
                                        j += 1
                                outcomes_raw[i] = weighted_median(active_reports, smooth_rep)
                        else:
                            with j = 0:
                                while j < num_reports:
                                    outcomes_raw[i] += fixed_multiply(smooth_rep[j], reports[j*num_events + i])
                                    j += 1
                        i += 1
                with outcomes_adj = array(num_events):
                    with i = 0:
                        while i < num_events:
                            if scaled[i] == 1:
                                outcomes_adj[i] = outcomes_raw[i]
                            else:
                                outcomes_adj[i] = catch(outcomes_raw[i])
                            i += 1
                    with i = 0:
                        while i < num_events:
                            if scaled[i] == 1:
                                outcomes_final[i] = fixed_multiply(outcomes_adj[i], scaled_max[i] - scaled_min[i]) + scaled_min[i]
                            else:
                                outcomes_final[i] = outcomes_adj[i]
                            i += 1

                    with certainty = array(num_events):
                        with i = 0:
                            while i < num_events:
                                with j = 0:
                                    while j < num_reports:
                                        if abs(reports[i + j*num_events] - outcomes_adj[i]) < 0x1197998:
                                            certainty[i] += smooth_rep[j]
                                        j += 1
                                i += 1
                        with total = 0:
                            with i = 0:
                                while i < num_events:
                                    certainty[i] = abs(certainty[i])
                                    total += certainty[i]
                                    i += 1
                            return(outcomes_final, items=num_events)

def participation(outcomes_final:arr, smooth_rep:arr, reports_mask:arr, num_reports, num_events):
        # Event participation (within columns):
        # proportion of reputation that answered each event
        with participation_events = array(num_events):
            with i = 0:
                while i < num_events:
                    with k = 0:
                        while k < num_reports:
                            participation_events[i] += fixed_multiply(smooth_rep[k], reports_mask[k*num_events + i])
                            k += 1
                    participation_events[i] = ONE - participation_events[i]
                    i += 1
            # Voter participation (within rows): all events treated equally
            with participation_reports = array(num_reports):
                with i = 0:
                    while i < num_reports:
                        with total = 0:
                            with j = 0:
                                while j < num_events:
                                    total += [i*num_events + j]
                                    j += 1
                                participation_reports[i] = ONE - total / num_events
                        i += 1
                    # General participation
                    with total = 0:
                        with i = 0:
                            while i < num_events:
                                total += participation_events[i]
                                i += 1
                        with participation = ONE - total / num_events:
                            # Bringing it all together!
                            with reporter_bonus = array(num_reports):
                                with na_bonus_reports = get_weight(participation_reports):
                                    # log_array(na_bonus_reports)
                                    with i = 0:
                                        while i < num_reports:
                                            reporter_bonus[i] = fixed_multiply(na_bonus_reports[i], participation) + fixed_multiply(smooth_rep[i], ONE - participation)
                                            i += 1
                                    return(reporter_bonus, items=num_reports)
