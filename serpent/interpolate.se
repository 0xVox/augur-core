macro sum($a:$asz):
    with total = 0:
        with i = 0:
            while i < $asz:
                total += $a[i]
                i += 1
        total

macro any($a:$asz):
    with result = 0:
        with i = 0: 
            while i < $asz:
                if $a[i] != 0:
                    result = 1
                    break
                i += 1
            result

# Missing entries marked with -1
macro isnan($a:$asz):
    with amask = array($asz):
        with i = 0:
            while i < $asz:
                if $a[i] == -1:
                    amask[i] = 1
                else:
                    amask[i] = 0
                i += 1
            amask

macro mask($a:$asz, $target):
    with amask = array($asz):
        with i = 0:
            while i < $asz:
                if $a[i] == $target:
                    amask[i] = 1
                else:
                    amask[i] = 0
                i += 1
            amask

# Normalize array (elements sum to 1)
macro normalize($a:$asz):
    with anorm = array($asz):
        with total = 0:
            with i = 0:
                while i < $asz:
                    if $a[i] != None:
                        total += $a[i]
                    i += 1
            with i = 0:
                while i < $asz:
                    if $a[i] != None:
                        anorm[i] = $a[i] * 0x10000000000000000 / total
                    i += 1
            anorm

macro interpolate($votes_flat:$v_size, $num_voters, $num_events, $reputation):
    votes = array($num_voters)
    with i = 0:
        while i < $num_voters:
            votes[i] = array($num_events)
            with j = 0:
                while j < $num_events:
                    votes[i][j] = $votes_flat[j + i*$num_events]
                    j += 1
            i += 1
    event_outcomes_raw = array($num_events)
    i = 0
    while j < $num_events:

        # reputation of the users who voted, rescaled to sum to 1
        active_players_rep = array($num_voters)
        total_active_rep = 0
        i = 0
        while i < $num_voters:
            if votes[i][j] != -1:
                total_active_rep += $reputation[i]
            i += 1
        i = 0

        # normalize
        while i < $num_voters:
            if votes[i][j] != -1:
                active_players_rep[i] = $reputation[i] * 0x10000000000000000 / total_active_rep
            else:
                # set missing values to 0
                active_players_rep[i] = 0
            i += 1
        j += 1

        # current event with missing entries removed
        # active_events = votes[-mask(votes[:,i]), i]
        active_events = array($num_voters)
        i = 0
        while i < $num_voters:
            if votes[i][j] != -1:
                active_events[i] = votes[i][j]
            else:
                active_events[i] = 0
            i += 1

        # current best-guess for this event's outcome is a weighted sum
        # (votes weighted by reputation)
        i = 0
        event_outcomes_raw[j] = 0
        while i < $num_voters:
            event_outcomes_raw[j] += active_players_rep[i] * active_voters[i]
            i += 1
        j += 1

    event_outcomes_raw

def test_interpolate(row):
    num_voters = 6
    num_events = 4
    votes = [[1, 1, 0, -1], [1, 0, 0, 0], [1, 1, 0, 0], [1, 1, 1, 0], [-1, 0, 1, 1], [0, 0, 1, 1]]
    reputation = [2, 10, 4, 2, 7, 1]
    total_rep = sum(reputation:num_voters)
    v_size = num_voters * num_events
    votes_flat = array(v_size)
    i = 0
    while i < num_voters:
        j = 0
        while j < num_events:
            votes_flat[j + i*num_events] = votes[i][j]
            j += 1
        i += 1
    votes_mask = isnan(votes_flat:v_size)
    missing_entries = any(votes_mask:v_size)
    if missing_entries:
        event_outcomes_raw = interpolate(votes:v_size, num_voters, num_events, reputation)
        return(event_outcomes_raw[row], num_events)
    else:
        return(votes_mask, v_size)
