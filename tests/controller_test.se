# controller_test.se
#
# Intended to implement functions what will help test the functionality
# of controller.se
#
# Tests are in controller_tests.py file which tests the controller by calling
# various controller.se and controller_test.se functions --- current testing
# contract examples also available in the tests folder.
#
# self.controller = 0x0 [this is the controller contract's address, you
# have a few ways in getting it here, one is to get the address of the
# controller contract once you've uploaded it in the pyethereum tester,
# another is to just upload the contract here using create]

extern controller.se: [addToWhitelist:[int256]:int256, assertIsWhitelisted:[int256]:int256, assertOnlySpecifiedCaller:[int256,int256]:int256, emergencyStop:[]:int256, getOwner:[]:int256, lookup:[int256]:int256, onlyInEmergency:[]:_, release:[]:int256, removeFromWhitelist:[int256]:int256, setValue:[int256,int256]:int256, stopInEmergency:[]:_, suicide:[int256,int256]:int256, switchModeSoOnlyEmergencyStopsAndEscapeHatchesCanBeUsed:[]:int256, transferOwnership:[int256]:int256, updateController:[int256,int256]:int256]

data controller

def init():
	self.controller = msg.sender

def setController(newController: address):
	if(msg.sender != self.controller):
		~invalid()
	self.controller = newController
	return(1)

def suicideFunds(to: address):
	if(msg.sender != self.controller):
		~invalid()
	suicide(to)

def getController():
	return(self.controller)

def canOnlyBeCalledInEmergency():
	self.controller.onlyInEmergency()
	return(1)

def canBeCalledAnytimeExceptEmergency():
	self.controller.stopInEmergency()
	return(1)
