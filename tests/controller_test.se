
# Make a file controller_test.se which implements functions that use all
# the functionality of controller.se
# 
# Write a controller_tests.py file which tests the controller by calling
# various controller.se and controller_test.se functions --- current testing
# contract examples available in the tests folder.

# self.controller = 0x0 [this is the controller contract's address, you
# have a few ways in getting it here, one is to get the address of the
# controller contract once you've uploaded it in the pyethereum tester,
# another is to just upload the contract here using create]. from binascii
# import hexlify hexlify(c.address) in python and the Serpent wiki above
# should let you figure out all the options here

extern controller: [addToWhitelist:[int256]:int256, assertIsWhitelisted:[int256]:int256, assertOnlySpecifiedCaller:[int256,int256]:_, changeMode:[int256]:int256, emergencyStop:[]:int256, getMode:[]:int256, getOwner:[]:int256, lookup:[int256]:int256, onlyInEmergency:[]:_, release:[]:int256, removeFromWhitelist:[int256,int256]:int256, setValue:[int256,int256]:int256, stopInEmergency:[]:_, suicide:[int256,int256,int256]:int256, switchModeSoOnlyEmergencyStopsAndEscapeHatchesCanBeUsed:[]:_, transferOwnership:[int256,int256,int256,int256]:int256, updateController:[int256,int256]:int256]

inset('../src/functions/controller.se')

data controller

def init():
	#self.controller = 0x0   # will cause setController to fail
	self.controller = msg.sender
	self.owner = msg.sender

def setController(newController: address):
	if(msg.sender != self.controller):   # self.controller is gonna be zero here, of course won't be equal, and it'll fail.
		~invalid()
	self.controller = newController
	return(1)

def suicideFunds(to: address):
	if(msg.sender != self.controller):
		~invalid()
	suicide(to)

