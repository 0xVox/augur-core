inset('../src/macros/float.sem')

def add(x, y):
    z = safeAdd(x, y)
    return(z)

def subtract(x, y):
    z = safeSub(x, y)
    return(z)

def multiply(x, y):
    z = safeMul(x, y)
    return(z)

def fxpMultiply(x, y):
    z = safeFxpMul(x, y)
    return(z)

def divide(x, y):
    z = safeDiv(x, y)
    return(z)

def fxpDivide(x, y):
    z = safeFxpDiv(x, y)
    return(z)

def fix(x):
    return(fix(x))

def unfix(x):
    return(unfix(x))

macro safeAdd($x, $y):
    if(!safeToAdd($x, $y)):
        ~invalid()
    $x + $y

macro safeSub($x, $y):
    if(!safeToSubtract($x, $y)):
        ~invalid()
    $x - $y

macro safeMul($x, $y):
    if(!safeToMultiply($x, $y)):
        ~invalid()
    $x * $y

macro safeFxpMul($x, $y):
    if(!safeToMultiply($x, $y)):
        ~invalid()
    $x * $y / 10 ** 18

macro safeDiv($x, $y):
    if($y == 0):
        ~invalid()
    $x / $y

macro safeFxpDiv($x, $y):
    if($y == 0):
        ~invalid()
    $x * 10 ** 18 / $y

macro unfix($x):
    $x / 10 ** 18

macro fix($x):
    $x * 10 ** 18

macro safeToAdd($a, $b):
    $c = $a + $b
    ($c >= $a && $c >= $b)

macro safeToSubtract($a, $b):
    ($b <= $a && (($a - $b) <= $a))

macro safeToMultiply($a, $b):
    $c = $a * $b
    ($a == 0 || ($c / $a) == $b)
