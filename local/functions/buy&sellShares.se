# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

extern branches: [addMarketToBranch:[int256,int256]:int256, getBaseReporters:[int256]:int256, getBranchByNum:[int256]:int256, getBranches:[]:int256[], getCreationDate:[int256]:int256, getEventForkedOver:[int256]:int256, getForkPeriod:[int256]:int256, getInitialBalance:[int256,int256]:int256, getMarketsInBranch:[int256]:int256[], getMinTradingFee:[int256]:int256, getNumBranches:[]:int256, getNumMarketsBranch:[int256]:int256, getOracleOnly:[int256]:int256, getParent:[int256]:int256, getParentPeriod:[int256]:int256, getPeriodLength:[int256]:int256, getSomeMarketsInBranch:[int256,int256,int256]:int256[], getVotePeriod:[int256]:int256, incrementPeriod:[int256]:int256, initDefaultBranch:[]:int256, initializeBranch:[int256,int256,int256,int256,int256,int256,int256]:int256, setBaseReporters:[int256,int256]:int256, setEventForkedOver:[int256,int256]:int256, setForkPeriod:[int256]:int256, setInitialBalance:[int256,int256,int256]:int256, test_callstack:[]:int256]
BRANCHES = create('../data_api/branches.se')
extern refund.se: [addCash:[int256,int256]:int256, balance:[int256]:int256, depositEther:[]:int256, initiateOwner:[int256]:int256, send:[int256,int256]:int256, sendFrom:[int256,int256,int256]:int256, setCash:[int256,int256]:int256, subtractCash:[int256,int256]:int256, test_callstack:[]:int256, withdrawEther:[int256,int256]:int256]
CASH = create('../data_api/cash.se')
extern refund.se: [addFees:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, addTrade:[int256,int256,int256]:int256, getBondsMan:[int256]:int256, getBranchID:[int256]:int256, getCreationTime:[int256]:int256, getCumScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getLastExpDate:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getLastTrade:[int256]:int256, getMakerFees:[int256]:int256, getMarketEvent:[int256,int256]:int256, getMarketEvents:[int256]:int256[], getMarketNumOutcomes:[int256]:int256, getMarketsHash:[int256]:int256, getNumEvents:[int256]:int256, getOneWinningOutcome:[int256,int256]:int256, getOriginalTradingPeriod:[int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPushedForward:[int256]:int256, getSender:[]:int256, getSharesPurchased:[int256,int256]:int256, getSharesValue:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, getVolume:[int256]:int256, getWinningOutcomes:[int256]:int256[], get_total_trades:[int256]:int256, get_trade_ids:[int256]:int256[], getgasSubsidy:[int256]:int256, initializeMarket:[int256,int256[],int256,int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256]:int256, modifyParticipantShares:[int256,int256,int256,int256,int256]:int256, modifyShares:[int256,int256,int256]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, remove_trade_from_market:[int256,int256]:int256, returnTags:[int256]:int256[], setMakerFees:[int256,int256]:int256, setPrice:[int256,int256,int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, setWinningOutcomes:[int256,int256[]]:int256, test_callstack:[]:int256]
MARKETS = create('../data_api/markets.se')
extern refund.se: [checkHash:[int256,int256]:int256, commitTrade:[int256]:int256, fill_trade:[int256,int256]:int256, getID:[int256]:int256, get_amount:[int256]:int256, get_price:[int256]:int256, get_trade:[int256]:int256[], makeTradeHash:[int256,int256,int256[]]:int256, remove_trade:[int256]:int256, saveTrade:[int256,int256,int256,int256,int256,int256,int256]:int256, test_callstack:[]:int256, update_trade:[int256,int256]:_, zeroHash:[]:int256]
TRADES = create('../data_api/trades.se')
inset('refund.se')

event log_add_tx(market:indexed, sender:indexed, type, price, amount, outcome, tradeid)
event log_cancel(market:indexed, sender:indexed, price, amount, tradeid, outcome, type)

event buyAndSellSharesReturnValue(returnValue)

macro logReturn($returnValue):
    log(type=buyAndSellSharesReturnValue, $returnValue)
    return($returnValue)

# Trade types
macro BID: 1
macro ASK: 2
# Field counts
macro TRADE_FIELDS: 8
# Boolean success/failure
macro SUCCESS: 1
macro FAILURE: 0
# Error codes
macro INSUFFICIENT_BALANCE: 10
macro TRADE_ALREADY_EXISTS: 21
macro TRADE_SAME_BLOCK_PROHIBITED: 22

macro fee_percent($market_fee, $price, $cumScale):
    4 * $market_fee * $price * (ONE-$price*ONE/$cumScale) / ($cumScale*ONE)

macro save_trade($type, $amount, $price, $market, $outcome, $branch, $fee, $sender):
    trade = [$type, $market, $amount, $price, $sender, block.number, $outcome]
    trade_id = sha3(trade, items=7)
    cumScale = MARKETS.getCumScale($market)

    # Save trade
    if !TRADES.getID(trade_id):
        TRADES.saveTrade(trade_id, $type, $market, $amount, $price, $sender, $outcome)
        # Update market
        last_id = MARKETS.getLastTrade($market)
        MARKETS.addTrade($market, trade_id, last_id)
        # Update available and trading amounts for asks
        if $type == ASK:
            MARKETS.modifyParticipantShares($market, msg.sender, $outcome, -$amount, 0)
            if($fee):
                CASH.sendFrom($market, ($amount * $price / ONE * $fee / ONE), $sender)
        # Send / escrow cash for bids
        if $type == BID:
            CASH.sendFrom($market, $amount * $price / ONE, $sender)
            if($fee):
                CASH.sendFrom($market, ($amount * $price / ONE * $fee / ONE), $sender)
    else:
        logReturn(TRADE_ALREADY_EXISTS)
    log(type=log_add_tx, $market, $sender, $type, $price, $amount, $outcome, trade_id)
    logReturn(trade_id)

#
# Cancellation: cancels a trade, if a bid refunds money, if an ask returns shares
# @returns 1 if success, 0 if failure
#
# 200k gas
def cancel(trade_id):
    refund()
    # user can cancel anytime
    # Get trade
    trade = array(TRADE_FIELDS)
    trade = TRADES.get_trade(trade_id, outitems=TRADE_FIELDS)
    if !trade:
        logReturn(0)
    type = trade[1]
    market = trade[2]
    amount = trade[3]
    price = trade[4]
    owner = trade[5]
    outcome = trade[7]
    branch = MARKETS.getBranchID(market)
    trading_fee = MARKETS.getTradingFee(market)
    cumScale = MARKETS.getCumScale(market)
    fee = fee_percent(trading_fee, price, cumScale) * MARKETS.getMakerFees(market) / ONE
    # Check the owner
    if msg.sender == owner:
        # Clear the trade first
        remove_trade(trade_id, market)
        # Issue refunds
        if type == BID:
            # cash refund
            amt = amount * price / ONE * (fee + ONE) / ONE
            CASH.subtractCash(market, amt)
            CASH.addCash(msg.sender, amt)
        elif type == ASK:
            # shares refund
            MARKETS.modifyParticipantShares(market, msg.sender, outcome, amount, 1)
            CASH.subtractCash(market, (amount * price / ONE * fee / ONE))
            CASH.addCash(msg.sender, (amount * price / ONE * fee / ONE))
        # Log cancellation
        log(type=log_cancel, market, msg.sender, price, amount, trade_id, outcome, type)
        logReturn(SUCCESS)
    logReturn(FAILURE)

macro remove_trade($trade_id, $market):
    TRADES.remove_trade($trade_id)
    MARKETS.remove_trade_from_market($market, $trade_id)

#
# Buy / Sell actions: puts orders on the book
# Errors:
    #  0: market doesn't exist
    # -1: amount/price bad
    # -2: oracle only branch
    # -3: trader doesn't exist in market
    # -4: not enough money or shares
#
# costs 532k gas
# smallest trade value is 0.00000001
def buy(amount, price, market, outcome):
    refund()
    trading_fee = MARKETS.getTradingFee(market)
    cumScale = MARKETS.getCumScale(market)
    fee = fee_percent(trading_fee, price, cumScale) * MARKETS.getMakerFees(market) / ONE
    branch = MARKETS.getBranchID(market)
    if(!MARKETS.getCreationTime(market)):
        logReturn(0)
    # price cannot be greater than max share value, value traded can't be <.00000001, and value can't be > 2**126 in unfixed point so we don't get overflow issues
    if(price>cumScale or amount*price < 3402823669209384705829531287552 or amount*price >= 2**190):
        logReturn(-1)
    if(BRANCHES.getOracleOnly(branch)):
        logReturn(-2)
    if(CASH.balance(msg.sender) < (amount * price / ONE * (fee + ONE) / ONE)):
        logReturn(-4)
    save_trade(BID, amount, price, market, outcome, branch, fee, msg.sender)
    logReturn(FAILURE)

# costs 532k gas
# smallest trade value is 0.00000001
def sell(amount, price, market, outcome):
    refund()
    branch = MARKETS.getBranchID(market)
    trading_fee = MARKETS.getTradingFee(market)
    cumScale = MARKETS.getCumScale(market)
    fee = fee_percent(trading_fee, price, cumScale) * MARKETS.getMakerFees(market) / ONE
    # price cannot be greater than max share value, value traded can't be <.00000001, and value can't be > 2**126 in unfixed point so we don't get overflow issues
    if(price>cumScale or amount*price < 3402823669209384705829531287552 or amount*price >= 2**190):
        logReturn(-1)
    if(BRANCHES.getOracleOnly(branch)):
        logReturn(-2)
    if(MARKETS.getParticipantSharesPurchased(market, msg.sender, outcome) < amount):
        logReturn(-4)
    # check for enough money for fees
    if(CASH.balance(msg.sender) < (amount * price / ONE * fee / ONE)):
        logReturn(-4)
    save_trade(ASK, amount, price, market, outcome, branch, fee, msg.sender)
    logReturn(FAILURE)