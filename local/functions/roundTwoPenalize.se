extern reporting: [addDormantRep:[int256,int256,int256]:int256, addRep:[int256,int256,int256]:int256, addReporter:[int256,int256,int256,int256,int256]:int256, adjustActiveRep:[int256,int256]:int256, balanceOf:[int256,int256]:int256, checkContractWhitelist:[int256,int256]:int256, checkWhitelist:[int256]:int256, getActiveRep:[int256]:int256, getDormantRepByIndex:[int256,int256]:int256, getFork:[int256]:int256, getNumberReporters:[int256]:int256, getRepBalance:[int256,int256]:int256, getRepByIndex:[int256,int256]:int256, getReporterID:[int256,int256]:int256, getReputation:[int256]:int256[], getTotalRep:[int256]:int256, repIDToIndex:[int256,int256]:int256, setFork:[int256]:int256, setInitialReporters:[int256,int256]:int256, setRep:[int256,int256,int256]:int256, setSaleDistribution:[int256[],int256[],int256]:int256, setWhitelist:[int256,int256[]]:bytes, subtractDormantRep:[int256,int256,int256]:int256, subtractRep:[int256,int256,int256]:int256, totalSupply:[int256]:int256]
REPORTING = create('../data_api/reporting.se')
extern branches: [addMarketToBranch:[int256,int256]:int256, getBaseReporters:[int256]:int256, getBranchByNum:[int256]:int256, getBranches:[]:int256[], getCreationDate:[int256]:int256, getEventForkedOver:[int256]:int256, getForkPeriod:[int256]:int256, getInitialBalance:[int256,int256]:int256, getMarketsInBranch:[int256]:int256[], getMinTradingFee:[int256]:int256, getNumBranches:[]:int256, getNumMarketsBranch:[int256]:int256, getOracleOnly:[int256]:int256, getParent:[int256]:int256, getParentPeriod:[int256]:int256, getPeriodLength:[int256]:int256, getSomeMarketsInBranch:[int256,int256,int256]:int256[], getVotePeriod:[int256]:int256, incrementPeriod:[int256]:int256, initDefaultBranch:[]:int256, initializeBranch:[int256,int256,int256,int256,int256,int256,int256]:int256, setBaseReporters:[int256,int256]:int256, setEventForkedOver:[int256,int256]:int256, setForkPeriod:[int256]:int256, setInitialBalance:[int256,int256,int256]:int256]
BRANCHES = create('../data_api/branches.se')
extern expiringEvents: [addEvent:[int256,int256,int256,int256]:int256, addRepEvent:[int256,int256,int256,int256]:int256, addReportToEvent:[int256,int256,int256,int256]:int256, addReportersPaidSoFar:[int256,int256]:int256, addRoundTwo:[int256,int256]:int256, addToWeightOfReport:[int256,int256,int256,int256]:int256, adjustPeriodShareValueOutstanding:[int256,int256,int256]:int256, deleteEvent:[int256,int256,int256]:int256, getAfterRep:[int256,int256,int256]:int256, getBeforeRep:[int256,int256,int256]:int256, getCurrentMode:[int256,int256]:int256, getCurrentModeItems:[int256,int256]:int256, getEncryptedReport:[int256,int256,int256,int256]:int256[], getEthicReport:[int256,int256,int256,int256]:int256, getEvent:[int256,int256,int256]:int256, getEventIndex:[int256,int256]:int256, getEvents:[int256,int256]:int256[], getEventsRange:[int256,int256,int256,int256]:int256[], getLesserReportNum:[int256,int256,int256]:int256, getNumEventsToReportOn:[int256,int256]:int256, getNumRemoved:[int256,int256]:int256, getNumReportsActual:[int256,int256,int256]:int256, getNumReportsEvent:[int256,int256,int256]:int256, getNumRequired:[int256,int256]:int256, getNumRoundTwo:[int256,int256]:int256, getNumberEvents:[int256,int256]:int256, getPeriodDormantRep:[int256,int256,int256]:int256, getPeriodRepConstant:[int256,int256,int256]:int256, getRepEvent:[int256,int256,int256]:int256, getReport:[int256,int256,int256,int256]:int256, getReportHash:[int256,int256,int256,int256]:int256, getReportersPaidSoFar:[int256,int256]:int256, getRequired:[int256]:int256, getShareValue:[int256,int256]:int256, getSubsidy:[int256,int256,int256]:int256, getWeightOfReport:[int256,int256,int256]:int256, moveEvent:[int256,int256]:int256, refundCost:[int256,int256]:int256, removeEvent:[int256,int256]:int256, setAfterRep:[int256,int256,int256,int256]:int256, setBeforeRep:[int256,int256,int256,int256]:int256, setCurrentMode:[int256,int256,int256]:int256, setCurrentModeItems:[int256,int256,int256]:int256, setEncryptedReport:[int256,int256,int256,int256,int256,int256]:int256, setEthicReport:[int256,int256,int256,int256,int256]:int256, setEventRequired:[int256,int256,int256]:int256, setLesserReportNum:[int256,int256,int256,int256]:int256, setNumEventsToReportOn:[int256]:int256, setNumReportsEvent:[int256,int256,int256,int256]:int256, setPeriodDormantRep:[int256,int256,int256,int256]:int256, setPeriodRepConstant:[int256,int256,int256,int256]:int256, setReport:[int256,int256,int256,int256,int256]:int256, setReportHash:[int256,int256,int256,int256,int256]:int256]
EXPEVENTS = create('../data_api/expiringEvents.se')
extern refund.se: [addMarket:[int256,int256]:int256, addPast24:[int256]:int256, getBond:[int256]:int256, getBranch:[int256]:int256, getEthical:[int256]:int256, getEthics:[int256]:int256, getEventBranch:[int256]:int256, getEventInfo:[int256]:int256[], getEventPushedUp:[int256]:int256, getExpiration:[int256]:int256, getForkEthicality:[int256]:int256, getForkOutcome:[int256]:int256, getForked:[int256]:int256, getForkedDone:[int256]:int256, getMarket:[int256,int256]:int256, getMarkets:[int256]:int256[], getMaxValue:[int256]:int256, getMinValue:[int256]:int256, getNumMarkets:[int256]:int256, getNumOutcomes:[int256]:int256, getOriginalExpiration:[int256]:int256, getOutcome:[int256]:int256, getPast24:[int256]:int256, getRejected:[int256]:int256, getRejectedPeriod:[int256]:int256, getReportingThreshold:[int256]:int256, getResolution:[int256]:bytes, getResolutionLength:[int256]:int256, getUncaughtOutcome:[int256]:int256, getmode:[int256]:int256, initializeEvent:[int256,int256,int256,int256,int256,int256,bytes]:int256, setBond:[int256,int256]:int256, setBranch:[int256,int256]:int256, setEthics:[int256,int256]:int256, setEventPushedUp:[int256,int256]:int256, setExpiration:[int256,int256]:int256, setForkDone:[int256]:int256, setForkEthicality:[int256,int256]:int256, setForkOutcome:[int256,int256]:int256, setForked:[int256]:int256, setOriginalExpiration:[int256,int256]:int256, setOutcome:[int256,int256]:int256, setRejected:[int256,int256]:int256, setThreshold:[int256,int256]:int256, setUncaughtOutcome:[int256,int256]:int256, setmode:[int256,int256]:int256]
EVENTS = create('../data_api/events.se')
extern proportionCorrect: [proportionCorrect:[int256]:int256]
PROPORTION = create('../functions/proportionCorrect.se')
extern refund.se: [addFees:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, addTrade:[int256,int256,int256]:int256, getBondsMan:[int256]:int256, getBranchID:[int256]:int256, getCreationTime:[int256]:int256, getCumScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getLastExpDate:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getLastTrade:[int256]:int256, getMakerFees:[int256]:int256, getMarketEvent:[int256,int256]:int256, getMarketEvents:[int256]:int256[], getMarketNumOutcomes:[int256]:int256, getMarketsHash:[int256]:int256, getNumEvents:[int256]:int256, getOneWinningOutcome:[int256,int256]:int256, getOriginalTradingPeriod:[int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPushedForward:[int256]:int256, getSender:[]:int256, getSharesPurchased:[int256,int256]:int256, getSharesValue:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, getVolume:[int256]:int256, getWinningOutcomes:[int256]:int256[], get_total_trades:[int256]:int256, get_trade_ids:[int256]:int256[], getgasSubsidy:[int256]:int256, initializeMarket:[int256,int256[],int256,int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256]:int256, modifyParticipantShares:[int256,int256,int256,int256,int256]:int256, modifyShares:[int256,int256,int256]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, remove_trade_from_market:[int256,int256]:int256, returnTags:[int256]:int256[], setMakerFees:[int256,int256]:int256, setPrice:[int256,int256,int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, setWinningOutcomes:[int256,int256[]]:int256]
MARKETS = create('../data_api/markets.se')
extern refund.se: [adjForkBondPaid:[int256,int256]:int256, doRoundTwoRefund:[int256,int256]:int256, getBondAmount:[int256]:int256, getBondPaid:[int256]:int256, getBondPoster:[int256]:int256, getBondReturned:[int256]:int256, getFinal:[int256]:int256, getForkBondPaid:[int256]:int256, getForkBondPoster:[int256]:int256, getForkedOverEthicality:[int256]:int256, getMoved:[int256]:int256, getOriginalBranch:[int256]:int256, getOriginalEthicality:[int256]:int256, getOriginalOutcome:[int256]:int256, getOriginalVotePeriod:[int256]:int256, getResolved:[int256,int256]:int256, getRoundTwo:[int256]:int256, increaseBondPaid:[int256,int256]:int256, setBondAmount:[int256,int256]:int256, setBondPoster:[int256,int256]:int256, setBondReturned:[int256]:int256, setFinal:[int256]:int256, setForkBondPoster:[int256,int256]:int256, setForkedOverEthicality:[int256]:int256, setMoved:[int256]:int256, setOriginalBranch:[int256,int256]:int256, setOriginalEthicality:[int256,int256]:int256, setOriginalOutcome:[int256,int256]:int256, setOriginalVotePeriod:[int256,int256]:int256, setResolved:[int256,int256,int256]:int256, setRoundTwo:[int256,int256]:int256, setRoundTwoRefund:[int256,int256]:int256]
BACKSTOPS = create('../data_api/backstops.se')
extern consensusData: [doRefund:[int256,int256]:int256, getBaseReportersLastPeriod:[int256]:int256, getDenominator:[int256,int256]:int256, getFeeFirst:[int256,int256]:int256, getFeesCollected:[int256,int256,int256]:int256, getNotEnoughPenalized:[int256,int256,int256]:int256, getPenalized:[int256,int256,int256,int256]:int256, getPenalizedNum:[int256,int256,int256]:int256, getPenalizedUpTo:[int256,int256]:int256, getPeriodBalance:[int256,int256]:int256, getRepRedistributionDone:[int256,int256]:int256, getSlashed:[int256,int256,int256]:int256, increaseDenominator:[int256,int256,int256]:int256, increasePenalizedNum:[int256,int256,int256,int256]:int256, setBaseReportersLastPeriod:[int256,int256]:int256, setFeeFirst:[int256,int256,int256]:int256, setFeesCollected:[int256,int256,int256]:int256, setNotEnoughPenalized:[int256,int256,int256]:int256, setPenalized:[int256,int256,int256,int256]:int256, setPenalizedUpTo:[int256,int256,int256]:int256, setPeriodBalance:[int256,int256,int256]:_, setRefund:[int256,int256]:int256, setSlashed:[int256,int256,int256]:int256]
CONSENSUS = create('../data_api/consensusData.se')
extern roundTwo: [resolve:[int256,int256]:int256, roundTwoPostBond:[int256,int256,int256,int256]:int256, roundTwoResolve:[int256,int256,int256,int256]:int256]
ROUNDTWO = create('../functions/roundTwo.se')

inset('refund.se')

#event penalize(user:indexed, outcome, oldrep, repchange, newafterrep, p, reportValue)

macro POINTZEROONE: 10000000000000000
macro POINTEIGHT: 800000000000000000
macro POINTTWO: 200000000000000000
macro POINTFOUR: 400000000000000000
macro MINBOND: 200*ONE

# Penalizes a reporter for reporting wrongly on a round 2 reporting / backstop 1 event
# So we want to do the rep redistribution for both period 1 and period 2 at this time
# essentially penalizeWrong for backstop 1 [where everyone reports on a given event]
# in a fork this is called on the original branch and event is reported on again on new branch
# Errors:
    #  0: event isn't eligible/up for round two penalization
    # -2: already past first half of new period and needed to penalize before then
    # -3: round two resolve wasn't successful
    # -4: in fork period only thing that rep redistribution is done on is the round 2 event in the original branch via round 2 penalize
    # -5: already done for all events in this period
    # -6: needed to collect fees last period which sets the before/after rep
# force event to be resolved first if it can be
# roundTwoResolve needs to be called for any event here before can be penalized if it's a backstop 1 event, a la close market for other events before being penalized
# todo go over penalty amounts like .2 for ethicality seems too high
def penalizeRoundTwoWrong(branch, event):
    refund()
    roundTwo = BACKSTOPS.getRoundTwo(event)
    repBalance = REPORTING.getRepBalance(branch, msg.sender)
    lastPeriod = BRANCHES.getVotePeriod(branch)-1
    forkPeriod = BRANCHES.getForkPeriod(branch)
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    newRep = 0
    newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender)
    oldRep = EXPEVENTS.getBeforeRep(branch, lastPeriod, msg.sender)
    if(CONSENSUS.getPenalizedUpTo(branch, msg.sender)==lastPeriod):
        return(-5)
    if(!CONSENSUS.getFeesCollected(branch, msg.sender, lastPeriod)):
        return(-6)
    elif(BRANCHES.getForkPeriod(branch) == lastPeriod && event!=forkEvent):
        return(-4)
    # if no outcome / event not resolved yet, resolve it [as long as it wasn't an event that was pushed fwd and got rejected and thus hasn't actually resolved yet]
    uncaught = EVENTS.getUncaughtOutcome(event)
    if(!uncaught):
        if(ROUNDTWO.roundTwoResolve(branch, event, EXPEVENTS.getEventIndex(votePeriod, event), msg.sender)==0):
            return(-3)
    outcome = catch(uncaught)
    if(scalar(event) or categorical(event)):
        outcome = uncaught
    forkEvent = BRANCHES.getEventForkedOver(branch)
    p = PROPORTION.proportionCorrect(event)
    reportValue = EXPEVENTS.getReport(branch, lastPeriod, event, msg.sender)
    lastPenalizationPeriod = lastPeriod - 1
    oldReport = EXPEVENTS.getReport(branch,lastPenalizationPeriod,event,msg.sender)
    ethics = EXPEVENTS.getEthicReport(branch, lastPeriod, event, msg.sender)
    oldEthics = EXPEVENTS.getEthicReport(branch, lastPenalizationPeriod, event, msg.sender)
    avgAdjCost = BRANCHES.getInitialBalance(branch, votePeriod)/EXPIRING.getNumberEvents(branch, votePeriod)
    bond = avgAdjCost + MARKETS.getSharesValue(market)*(POINTZEROONE + MARKETS.getTradingFee(market)/2) / ONE
    bond = min(bond, MINBOND)
    # makes sure we're actually still able to report on the last vote period and that we're in 1st half of current period
    elif(residual > periodLength/2 or (block.timestamp / periodLength - 2)!=lastPeriod):
        return(-2)
    # if overruled / different outcome after reporting on again
    overruled = 0
    if(scalar(event) or categorical(event)):
        if((BACKSTOPS.getOriginalOutcome(event) != EVENTS.getUncaughtOutcome(event) or BACKSTOPS.getOriginalEthicality(event)!=ethic_catch(EVENTS.getEthical(event)))):
            overruled = 1
    elif((BACKSTOPS.getOriginalOutcome(event) != catch(EVENTS.getUncaughtOutcome(event)) or BACKSTOPS.getOriginalEthicality(event)!=ethic_catch(EVENTS.getEthical(event)))):
        overruled = 1

    numReportedOn = EXPEVENTS.getNumReportsActual(branch, lastPeriod, msg.sender)

    # penalization on a round 2 event if not already penalized, it has outcome, and user reported on it
    # if it's penalizing in the period it was pushed back to we can do the penalization, should do it for both the first and second period
    if(BACKSTOPS.getRoundTwo(event) && (BACKSTOPS.getFinal(event) or event==forkEvent) && !CONSENSUS.getPenalized(branch, lastPeriod, msg.sender, event) && (reportValue or oldReport)):
        newAfterRep = 0
        smoothedRep = 0
        # Do the first rep redistribution based on first report and final outcome if reported first time
        if(oldReport && outcome!=0):
            # wrong
            #184467440737095520 == 0.01 in fxp
            if(oldReport > outcome+POINTZEROONE or oldReport < outcome-POINTZEROONE):
                if(scalar(event) or categorical(event) or outcome==3*ONEHALF):
                    diff = oldReport - outcome
                    p = -(abs(diff)/2) + ONE
                newRep = oldRep*(2*p - ONE)/ONE
            # right
            else:
                if(scalar(event) or categorical(event) or outcome==3*ONEHALF):
                    diff = oldReport - outcome
                    p = -(abs(diff)/2) + ONE
                newRep = oldRep*(2*(ONE-p)**2 / p + ONE)/ONE
            # (1-k) * old rep + k * new rep where k = 0.4 / (number of events you reported on last period) for penalization and pen. rate for backstop 1
            # use .04 as a max penalty per event for round 2 liars who lied on first report --- todo should do .02 in the not-overruled case
            if(numReportedOn<10):
                repChange = oldRep * (ONE - POINTFOUR/10)/ONE + newRep*(POINTFOUR/10)/ONE - oldRep
            else:
                repChange = oldRep * (ONE - POINTFOUR/numReportedOn)/ONE + newRep*(POINTFOUR/numReportedOn)/ONE - oldRep
            newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender) + repChange
            EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
            # for ethicality if diff. appeal then pay back the appeal bond from people who reported the wrong ethicality, but don't take rep beyond that and max at 20% of their rep respectively
            if(oldEthics != ethic_catch(EVENTS.getEthical(event)) && repChange >=0):
                repChange = -POINTTWO*repBalance / ONE
            if(repBalance + repChange <= 0):
                repChange = -1*repBalance
            # if overruled: reward the bonded challenger with whatever rep would normally be taken from the liars up to 2x the bond, rest goes to branch as usual later in the process
            if(overruled && BACKSTOPS.getBondPaid(event) < 2*bond && repChange < 0 && event!=forkEvent):
                # done instead of sending to redistrib. pool
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), repChange)
                # sends that rep to the bonded challenger
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getBondPoster(event)), -repChange)
                BACKSTOPS.increaseBondPaid(event, (-1*repChange))
        # Do the second (for each user) based on second report and final outcome
        if(reportValue && outcome!=0):
            # wrong
            #184467440737095520 == 0.01 in fxp
            if(reportValue > outcome+POINTZEROONE or reportValue < outcome-POINTZEROONE):
                if(scalar(event) or categorical(event) or outcome==3*ONEHALF):
                    diff = reportValue - outcome
                    p = -(abs(diff)/2) + ONE
                newRep = oldRep*(2*p - ONE)/ONE
            # right
            else:
                if(scalar(event) or categorical(event) or outcome==3*ONEHALF):
                    diff = reportValue - outcome
                    p = -(abs(diff)/2) + ONE
                newRep = oldRep*(2*(ONE-p)**2 / p + ONE)/ONE
            # (1-k) * old rep + k * new rep where k = 0.2 / (number of events you reported on last period) for penalization and pen. rate for backstop 1
            # use .02 as a max penalty per event for round 2 on second report
            if(numReportedOn<10):
                repChange = oldRep * (ONE - POINTTWO/10)/ONE + newRep*(POINTTWO/10)/ONE - oldRep
            else:
                repChange = oldRep * (ONE - POINTTWO/numReportedOn)/ONE + newRep*(POINTTWO/numReportedOn)/ONE - oldRep
            newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender) + repChange
            EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
            # for ethicality if diff. appeal then pay back the appeal bond from people who reported the wrong ethicality, but don't take rep beyond that and max at 20% of their rep respectively - or should this only be done for last period?
            if(ethics != ethic_catch(EVENTS.getEthical(event)) && repChange >=0):
                repChange = -POINTTWO*repBalance / ONE
            if(repBalance + repChange <= 0):
                repChange = -1*repBalance
            if(overruled && BACKSTOPS.getBondPaid(event) < 2*bond && repChange < 0 && event!=forkEvent):
                # done instead of sending to redistrib. pool
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), repChange)
                # sends that rep to the bonded challenger
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getBondPoster(event)), -repChange)
                BACKSTOPS.increaseBondPaid(event, (-1*repChange))
        CONSENSUS.setPenalized(branch, lastPeriod, msg.sender, event)
        CONSENSUS.increasePenalizedNum(branch, lastPeriod, msg.sender, 1)
    else:
        return(0)
    # if a fork event in original branch, only event needed to report on in this period is that one [b/c the original branch resolves it as a regular round 2 event, fork reports again]
    if(event==forkEvent):
        CONSENSUS.increasePenalizedNum(branch, lastPeriod, msg.sender, (numReportedOn - 1))
    # penalization on a regular event if not already penalized, it has outcome, and user reported on it
    if(numReportedOn==CONSENSUS.getPenalizedNum(branch, lastPeriod, msg.sender)):
        if(newAfterRep <= 0):
            newAfterRep = 0
            EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
        CONSENSUS.setPenalizedUpTo(branch, msg.sender, lastPeriod)
        CONSENSUS.increaseDenominator(branch, lastPeriod, newAfterRep)
        totalRepDifference = newAfterRep - oldRep
        if(repBalance + totalRepDifference <= 0):
            totalRepDifference = -1*repBalance
        if(totalRepDifference<0):
            # removes rep from reporter who lost it [those who gained rep will get it in the claim rep phase]
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), totalRepDifference)
            # sends that rep to the branch
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), -totalRepDifference)
    return(1)


### Helper functions:
macro YES: TWO
macro NO: ONE
macro BAD: 3 * ONEHALF
macro CATCH_TOLERANCE: ONE / 10

# Bins values to 1, 1.5, 2
macro catch($x):
    if($x < (BAD - CATCH_TOLERANCE)):
        NO
    elif($x > (BAD + CATCH_TOLERANCE)):
        YES
    else:
        BAD

macro ethic_catch($x):
    if($x < ONEHALF):
        0
    else:
        ONE

macro scalar($event):
    ((EVENTS.getMaxValue($event)!=TWO || EVENTS.getMinValue($event)!=ONE) && EVENTS.getNumOutcomes($event)==2)

macro categorical($event):
    (EVENTS.getNumOutcomes($event)>2)

macro abs($a):
    if($a<0):
        $a = -$a
    $a

macro ethic_catch($x):
    if($x < ONEHALF):
        0
    else:
        ONE