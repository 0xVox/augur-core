# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

# Reporting index is the branchID
# Reporters index is the rep. address
# We 0 index reputation so can walk thru for consensus
# EventsExpDates index is the currentVotePeriod or in the future if an event expires in the future
# RepIDtoIndex returns a reporter's reporters[] index given their reputationID as the key
# Events is 0 indexed as well
data Reporting[](reputation[](repValue, reporterID), numberReporters, repIDtoIndex[], totalRep)

#accessibles[address]
#stores the contracts which address can access
#i.e., for every contract in accessibles[address].contracts,
#whitelists[contract][address] == 1
data accessibles[](contracts[], len_contracts, index[])
#whitelists[contract][address]
#if `address` is in `contract`'s whitelist, then
#self.whitelists[contract][address] == 1
#Every contract's whitelist contains it's own address.
#This is just to keep track of whether or not a contract's
#whitelist exists.
data whitelists[][]
#votes[period]
#each period has a ballot, a list of hashes of ballot items.
#votes are allowed for each item, and rep totals for each
#item are kept in a mapping from ballot_item_hash -> rep totals.
data votes[](ballot[], ballot_len, index[],voters[][], rep_totals[])

#the index for each ot the folowing four data structures
#is the hash of the type, voteperiod, and contract in question.
#the types map keeps track of which kind of change the ballot item
#proposes.
data types[]
data replacements[](from_addr, to_addr)
data additions[](address, contracts[], len_contracts)
data deletions[]

macro REPLACEMENT: 1
macro ADDITION: 2
macro DELETION: 4
macro VOTEPERIOD: block.number / 1800
macro votes($period): self.votes[$period]
macro current_vote: votes(VOTEPERIOD)

def init():
    self.Reporting[1010101].repIDtoIndex[tx.origin] = 0
    self.Reporting[1010101].reputation[0].repValue = 47*2^64
    self.Reporting[1010101].reputation[0].reporterID = tx.origin
    self.Reporting[1010101].numberReporters = 1
    self.Reporting[1010101].totalRep += 47*2^64

def checkWhitelist(address):
    return(self.whitelists[msg.sender].addresses[address])

def checkContractWhitelist(contract, address):
    return(self.whitelists[contract].addresses[address])

def setWhitelist(contract, addresses:arr):
    if self.whitelists[contract][contract]:
        return(text("ERROR: you have to vote to change a whitelist"):str)
    else:
        self.whitelists[contract][contract] = 1
        self.accessibles[contract]
        i = 0
        l = len(addresses)
        while i <l:
            address = addresses[i]
            self.whitelists[contract].addresses[addresses] = 1
            self.accessibles[address].
            i += 1
        return(text("SUCCESS"):str)

macro add_to_current_ballot($hash):
    current_vote.len_ballot += 1
    current_vote.ballot[current_vote.len_ballot] = $hash
    current_vote.index[$hash] = current_vote.len_ballot

def propose_replacement(from_addr,to_addr):
    info = array(4)
    info[0] = REPLACEMENT
    info[1] = VOTEPERIOD
    info[2] = from_addr
    info[3] = to_addr
    hash = sha256(info, items=4)

    if current_vote.index[hash]:
        return(text("ERROR: replacement already in ballot!"):str)

    self.types[hash] = REPLACEMENT
    self.replacements[from_addr] = to_addr
    add_to_current_ballot(hash)
    return(hash)

def propose_addition(address, contracts:arr):
    info = array(3 + len(contracts))
    info[0] = ADDITION
    info[1] = VOTEPERIOD
    info[2] = address
    mcopy(info+(items=3), contracts, items=len(contracts))
    hash = sha256(info, items=len(info))

    if current_vote.index[hash]:
        return(text("ERROR: addition already in ballot!"):str)

    self.types[hash] = ADDITION
    self.additions[hash].address = address
    self.additions[hash].len_contracts = len(contracts)
    save(self.additions[hash].contracts[0], contracts, items=len(contracts))
    add_to_current_ballot(hash)
    return(hash)

def propose_deletion(address):
    info = array(3)
    info[0] = DELETION
    info[1] = VOTEPERIOD
    info[2] = address
    hash = sha256(info, item=3)
    
    if current_vote.index[hash]:
        return(text("ERROR: deletion already in ballot!"):str)

    self.types[hash] = DELETION
    self.deletions[hash] = address
    add_to_current_ballot(hash)
    return(hash)

# @return reputation value
def getRepByIndex(branch, repIndex):
    return(self.Reporting[branch].reputation[repIndex].repValue)

# @return reputation value
def getRepBalance(branch, address):
    repIndex = self.Reporting[branch].repIDtoIndex[address]
    if(repIndex==0 && self.Reporting[branch].reputation[repIndex].reporterID!=address):
        return(0)
    return(self.Reporting[branch].reputation[repIndex].repValue)

def getReporterID(branch, index):
    return(self.Reporting[branch].reputation[index].reporterID)

def getTotalRep(branch):
    return(self.Reporting[branch].totalRep)

def getNumberReporters(branch):
    return(self.Reporting[branch].numberReporters)

def repIDToIndex(branch, repID):
    return(self.Reporting[branch].repIDtoIndex[repID])

def hashReport(report: arr, salt):
    hashInfo = array(len(report) + 2)
    hashInfo[0] = tx.origin
    hashInfo[1] = salt
    i = 2
    while i < (len(report) + 2):
        hashInfo[i] = report[i-2]
        i += 1
    reportHash = sha256(hashInfo, chars=32*len(hashInfo))
    return(reportHash)

# check that msg.sender is one of our function contracts
def setInitialReporters(parent, branchID):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    # first vote period won't be until after the current (in this case first) basket of things has expired
        # if floor(blockNum / periodLength) is say 5 and eventsExpDates[5]
        # the current vote period should be on things from eventsExpDates 4 (when making a new branch this vote period will just fail quorem, and current vote period will be incrememented)
        # then once blockNum / periodLength is say 6 and eventsExpDates[6]
        # votePeriod 4 should close and the currentVotePeriod should be from
        # eventsExpDates 5 (anyone can call the consensus function for voteperiod 4 at this point)
    i = 0
    while i < self.Reporting[parent].numberReporters:
        reporterID = self.Reporting[parent].reputation[i].reporterID
        self.Reporting[branchID].reputation[i].reporterID = reporterID
        self.Reporting[branchID].reputation[i].repValue = self.Reporting[parent].reputation[i].repValue
        self.Reporting[branchID].repIDtoIndex[reporterID] = i
        i+=1
    self.Reporting[branchID].numberReporters = i
    return(1)

def addReporter(branch, sender):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    reporterIndex = self.Reporting[branch].numberReporters
    self.Reporting[branch].repIDtoIndex[sender] = reporterIndex
    self.Reporting[branch].reputation[reporterIndex].repValue = 0
    self.Reporting[branch].reputation[reporterIndex].reporterID = sender
    self.Reporting[branch].numberReporters += 1
    return(1)

def addRep(branch, index, value):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    self.Reporting[branch].reputation[index].repValue += value
    return(1)

def subtractRep(branch, index, value):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    self.Reporting[branch].reputation[index].repValue -= value
    return(1)

def setRep(branch, index, newRep):
    #if !self.whitelist.check(msg.sender):
    #    return(-1)
    oldRep = self.Reporting[branch].reputation[index].repValue
    self.Reporting[branch].reputation[index].repValue = newRep
    self.Reporting[branch].totalRep += newRep - oldRep
    return(1)
