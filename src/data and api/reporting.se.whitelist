# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

# Reporting index is the branchID
# Reporters index is the rep. address
# We 0 index reputation so can walk thru for consensus
# EventsExpDates index is the currentVotePeriod or in the future if an event expires in the future
# RepIDtoIndex returns a reporter's reporters[] index given their reputationID as the key
# Events is 0 indexed as well
# The root branch, 1010101, is used for votes to change the whitelists.
data Reporting[](reputation[](repValue, reporterID), numberReporters, repIDtoIndex[], totalRep)

# self.accessibles[address]
# stores the contracts which address can access
# i.e., for every contract in accessibles[address].contracts,
# whitelists[contract][address] == 1
#
# self.whitelists[contract][address]
# if `address` is in `contract`'s whitelist, then
# self.whitelists[contract][address] == 1
# Every contract's whitelist contains it's own address.
# This is just to keep track of whether or not a contract's
# whitelist exists.
#
# self.votes[period]
# each period has a ballot, a list of hashes of ballot items.
# each item in the ballot list is a hash of info on the vote.
# voters for each ballot item are kept track of in a map from
# ballot_item -> voter_address -> {0, 1}
# Rep totals for each ballot_item are kept in a mapping from
# ballot_item_hash -> rep totals.
# The status of the voting round is kept as a value called completed.
# It is set to true when all of the proposed changes have either been
# accepted or rejected
#
# self.EPOCH is the block this contract was created in
#
# self.types[ballot_item]
# keeps track of which type of whitelist change is being voted on.
#
# self.replacements[ballot_item]
# replace all occurences of of from_addr to to_addr in every whitelist.
#
# self.additions[ballot_item]
# add an address to the whitelists of one or more contracts
#
# self.deletions[ballot_item]
# an address to remove from all whitelists.
data accessibles[](contracts[], length)
data whitelists[][]
data votes[](ballot[], ballot_len, voters[][], rep_totals[], completed)
data types[]
#data replacements[](from_addr, to_addr)
data replacements[][]
data additions[](address, contracts[], len_contracts)
data deletions[]
data EPOCH

macro REPLACE: 1
macro ADD: 2
macro DELETE: 4
macro PERIOD: 1800

macro REPORTING: 0
macro ACCESSIBLES: 1
macro WHITELISTS: 2
macro VOTES: 3
macro TYPES: 4
macro REPLACEMENTS: 5
macro ADDITIONS: 6
macro DELETIONS: 7

def init():
    self.Reporting[1010101].repIDtoIndex[tx.origin] = 0
    self.Reporting[1010101].reputation[0].repValue = 47*2^64
    self.Reporting[1010101].reputation[0].reporterID = tx.origin
    self.Reporting[1010101].numberReporters = 1
    self.Reporting[1010101].totalRep += 47*2^64
    self.EPOCH = block.number

def shared():
    # don't check for votes during the 0th period,
    # and only check for votes in the first block of a new period.
    if((block.number - self.EPOCH)/PERIOD && (not (block.number - self.EPOCH)%PERIOD)):
        #allocate memory for storage key generation
        with temp = alloc(160):
            temp[0] = REPORTING
            temp[1] = 1010101 # root branch
            temp[2] = 3 # total rep, 4th member of self.Reporting
            # need more than half the rep for branch 1010101
            with required_rep = sload(sha3(temp, items=3))/2:
                temp[0] = VOTES
                temp[1] = (block.number - self.EPOCH - 1) / PERIOD:
                temp[2] = 0 #ballot is the 1st member in votes
                #temp[3] = 0 #start of the ballot list
                #data is automatically zero-ed out by alloc
                #so i can save a few opcodes here! :)
                with ballot_key = sha3(temp, items=4):
                    temp[2] = 1 #ballot_len in self.votes
                    with ballot_len = sload(sha3(temp, items=3)):
                        with i = 0:
                            while(i < ballot_len):
                                temp[0] = VOTES
                                temp[1] = (block.number - self.EPOCH - 1) / PERIOD:
                                temp[2] = 3 # rep_totals, 4th member of self.votes
                                temp[3] = sload(ballot_key + i) #ith ballot item
                                with rep_total = sload(sha3(temp, items=4)):
                                    if rep_total > required_rep: #majority vote
                                        temp[0] = TYPES
                                        temp[1] = sload(ballot_key + i)
                                        with ballot_type = sload(sha3(temp, items=2)):
                                            if ballot_type == REPLACE: #data replacements[][2]
                                                temp[0] = REPLACEMENTS
                                                #temp[1] = sload(ballot_key + i) #the ith ballot hash
                                                temp[2] = 0
                                                with repl_key = sha3(temp, items=3):
                                                    temp[0] = ACCESSIBLES
                                                    temp[1] = sload(repl_key) #from_addr
                                                    temp[2] = 0 #contracts, 1st member of self.accessibles
                                                    temp[3] = 0
                                                    with old_contracts = sha3(temp, items=4):
                                                        temp[2] = 1 #len_contracts, 2nd member of self.accessibles
                                                        with old_len_key = sha3(temp, items=3):
                                                            with len_contracts = sload(old_len_key):
                                                                temp[1] = sload(repl_key + 1) #to_addr
                                                                temp[2] = 0 #contracts
                                                                temp[3] = 0
                                                                with new_contracts = sha3(temp, items=4):
                                                                    with j = 0:
                                                                        temp[0] = WHITELISTS
                                                                        while j < len_contracts:
                                                                            # copy the jth accessible contract to the new address's list
                                                                            sstore(new_contracts + j, sload(old_contracts + j))
                                                                            # delete the old contract's spot in storage
                                                                            sstore(old_contracts + j, 0)
                                                                            # delete from_addr in the jth contract's whitelist 
                                                                            temp[1] = sload(new_contracts + j) #contract
                                                                            temp[2] = sload(repl_key) #from_addr
                                                                            sstore(sha3(temp, items=3), 0) # set it to 0
                                                                            # add to_add to the jth contract's whitelist
                                                                            temp[2] = sload(repl_key + 1) #to_addr
                                                                            sstore(sha3(temp, items=3), 1) #set it to 1
                                                                            j += 1
                                                                        temp[0] = ACCESSIBLES
                                                                        temp[1] = sload(repl_key + 1)
                                                                        temp[2] = 1
                                                                        sstore(old_len_key, 0) #delete the old address's len_contracts
                                                                        sstore(sha3(temp, items=3), len_contracts) #and store the new one!
                                            elif ballot_type == DELETE:
                                                temp[0] = DELETIONS
                                                temp[1] = sload(ballot_key + i)
                                                with address_to_remove = sload(sha3(temp, items=2)):
                                                    
                                                    
                                                                        
                                                                                    


def checkWhitelist(address):
    return(self.whitelists[msg.sender].addresses[address])

def checkContractWhitelist(contract, address):
    return(self.whitelists[contract].addresses[address])

def setWhitelist(contract, addresses:arr):
    if self.whitelists[contract][contract]:
        return(text("ERROR: you have to vote to change a whitelist"):str)
    else:
        add_to_whitelist(contract, contract)
        i = 0
        l = len(addresses)
        while(i < l):
            address = addresses[i]
            add_to_whitelist(contract, address)
            i += 1
        return(text("SUCCESS"):str)

def hasVoted(address):
    with i = 0:
        with result = 0:
            while(i < current_vote.len_ballot):
                result |= current_vote.votes[current_vote.ballot[i]][tx.origin]
            return(result)

def whitelistVote(hash):
    if current_vote.voters[hash][tx.origin]:
        return(text("ERROR: You already voted for that!"):str)
    elif not current_vote.index[hash]:
        return(text("ERROR: That hash is not on the ballot!"):str)
    else:
        current_vote.voters[hash][tx.origin] = 1
        current_vote.rep_totals[hash] += this_rep #this_rep is a macro!

macro add_to_current_ballot($hash):
    current_vote.len_ballot += 1
    current_vote.ballot[current_vote.len_ballot] = $hash
    current_vote.index[$hash] = current_vote.len_ballot

def propose_replacement(from_addr,to_addr):
    info = array(4)
    info[0] = REPLACEMENT
    info[1] = VOTEPERIOD
    info[2] = from_addr
    info[3] = to_addr
    hash = sha256(info, items=4)

    if current_vote.index[hash]:
        return(text("ERROR: replacement already in ballot!"):str)

    self.types[hash] = REPLACEMENT
    self.replacements[from_addr] = to_addr
    add_to_current_ballot(hash)
    return(hash)

def propose_addition(address, contracts:arr):
    info = array(3 + len(contracts))
    info[0] = ADDITION
    info[1] = VOTEPERIOD
    info[2] = address
    mcopy(info+(items=3), contracts, items=len(contracts))
    hash = sha256(info, items=len(info))

    if current_vote.index[hash]:
        return(text("ERROR: addition already in ballot!"):str)

    self.types[hash] = ADDITION
    self.additions[hash].address = address
    self.additions[hash].len_contracts = len(contracts)
    save(self.additions[hash].contracts[0], contracts, items=len(contracts))
    add_to_current_ballot(hash)
    return(hash)

def propose_deletion(address):
    info = array(3)
    info[0] = DELETION
    info[1] = VOTEPERIOD
    info[2] = address
    hash = sha256(info, item=3)
    
    if current_vote.index[hash]:
        return(text("ERROR: deletion already in ballot!"):str)

    self.types[hash] = DELETION
    self.deletions[hash] = address
    add_to_current_ballot(hash)
    return(hash)

# @return reputation value
def getRepByIndex(branch, repIndex):
    return(self.Reporting[branch].reputation[repIndex].repValue)

# @return reputation value
def getRepBalance(branch, address):
    repIndex = self.Reporting[branch].repIDtoIndex[address]
    if(repIndex==0 && self.Reporting[branch].reputation[repIndex].reporterID!=address):
        return(0)
    return(self.Reporting[branch].reputation[repIndex].repValue)

def getReporterID(branch, index):
    return(self.Reporting[branch].reputation[index].reporterID)

def getTotalRep(branch):
    return(self.Reporting[branch].totalRep)

def getNumberReporters(branch):
    return(self.Reporting[branch].numberReporters)

def repIDToIndex(branch, repID):
    return(self.Reporting[branch].repIDtoIndex[repID])

def hashReport(report: arr, salt):
    hashInfo = array(len(report) + 2)
    hashInfo[0] = tx.origin
    hashInfo[1] = salt
    i = 2
    while i < (len(report) + 2):
        hashInfo[i] = report[i-2]
        i += 1
    reportHash = sha256(hashInfo, chars=32*len(hashInfo))
    return(reportHash)

# check that msg.sender is one of our function contracts
def setInitialReporters(parent, branchID):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    # first vote period won't be until after the current (in this case first) basket of things has expired
        # if floor(blockNum / periodLength) is say 5 and eventsExpDates[5]
        # the current vote period should be on things from eventsExpDates 4 (when making a new branch this vote period will just fail quorem, and current vote period will be incrememented)
        # then once blockNum / periodLength is say 6 and eventsExpDates[6]
        # votePeriod 4 should close and the currentVotePeriod should be from
        # eventsExpDates 5 (anyone can call the consensus function for voteperiod 4 at this point)
    i = 0
    while i < self.Reporting[parent].numberReporters:
        reporterID = self.Reporting[parent].reputation[i].reporterID
        self.Reporting[branchID].reputation[i].reporterID = reporterID
        self.Reporting[branchID].reputation[i].repValue = self.Reporting[parent].reputation[i].repValue
        self.Reporting[branchID].repIDtoIndex[reporterID] = i
        i+=1
    self.Reporting[branchID].numberReporters = i
    return(1)

def addReporter(branch, sender):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    reporterIndex = self.Reporting[branch].numberReporters
    self.Reporting[branch].repIDtoIndex[sender] = reporterIndex
    self.Reporting[branch].reputation[reporterIndex].repValue = 0
    self.Reporting[branch].reputation[reporterIndex].reporterID = sender
    self.Reporting[branch].numberReporters += 1
    return(1)

def addRep(branch, index, value):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    self.Reporting[branch].reputation[index].repValue += value
    return(1)

def subtractRep(branch, index, value):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    self.Reporting[branch].reputation[index].repValue -= value
    return(1)

def setRep(branch, index, newRep):
    #if !self.whitelist.check(msg.sender):
    #    return(-1)
    oldRep = self.Reporting[branch].reputation[index].repValue
    self.Reporting[branch].reputation[index].repValue = newRep
    self.Reporting[branch].totalRep += newRep - oldRep
    return(1)
