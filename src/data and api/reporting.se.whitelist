# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

# Reporting index is the branchID
# Reporters index is the rep. address
# We 0 index reputation so can walk thru for consensus
# EventsExpDates index is the currentVotePeriod or in the future if an event expires in the future
# RepIDtoIndex returns a reporter's reporters[] index given their reputationID as the key
# Events is 0 indexed as well
# The root branch, 1010101, is used for votes to change the whitelists.
data Reporting[](reputation[](repValue, reporterID), numberReporters, repIDtoIndex[], totalRep)
macro rep($branch): self.Reporting[$branch].reputation[self.Reporting[$branch].repIDtoIndex[tx.origin]].repValue
# self.accessibles[address][]
# stores the contracts' with `address` in their whitelists.
# contracts are stored like an array, where self.accessibles[address][0]
# is the length, and then incrementing the ref gets you the contracts that
# have `address` in their whitelists.
#
# self.whitelists[contract][]
# a list similar to self.accessibles: self.whitelists[contract][0]
# is the length of the whitelist, and addresses in these lists are
# allowed to call protected functions in the contracts.
#
# self.votes[period]
# each period has a ballot, a list of hashes of ballot items.
# each item in the ballot list is a hash of info on the vote.
# voters for each ballot item are kept track of in a map from
# ballot_item -> voter_address -> {0, 1}
# Rep totals for each ballot_item are kept in a mapping from
# ballot_item_hash -> rep totals.
# The status of the voting round is kept as a value called completed.
# It is set to true when all of the proposed changes have either been
# accepted or rejected
#
# self.EPOCH is the block this contract was created in
#
# self.types[ballot_item]
# keeps track of which type of whitelist change is being voted on.
#
# self.replacements[ballot_item]
# replace all occurences of of from_addr to to_addr in every whitelist.
#
# self.additions[ballot_item]
# add an address to the whitelists of one or more contracts
#
# self.deletions[ballot_item]
# an address to remove from all whitelists.
data accessibles[][]
data whitelists[][]
data votes[](completed, ballot[], voters[][], repTotals[])
data types[]
data replacements[](from_addr, to_addr)
data additions[](address, contracts[])
data deletions[]
data EPOCH

macro REPLACEMENT: 1
macro ADDITION: 2
macro DELETION: 4

macro PERIOD: 1800
macro CURRENT_PERIOD: ((block.number - self.EPOCH)/PERIOD)
macro LAST_PERIOD: ((block.number - self.EPOCH - 1)/PERIOD)
macro IS_FIRST_BLOCK: (not (block.number - self.EPOCH)%PERIOD)
macro current_vote: self.votes[CURRENT_PERIOD]

def init():
    self.Reporting[1010101].repIDtoIndex[tx.origin] = 0
    self.Reporting[1010101].reputation[0].repValue = 47*2^64
    self.Reporting[1010101].reputation[0].reporterID = tx.origin
    self.Reporting[1010101].numberReporters = 1
    self.Reporting[1010101].totalRep += 47*2^64
    self.EPOCH = block.number

# arrays are stored with sstore, starting from the
# the ref of their 0 index, and incrementing.
# The length of an array is stored at the start.
# the functions sstore and sload are used instead
# of the usual self.myStuff[key].myArray[i] syntax,
# because that syntax requires allocating memory
# and doing a sha3 each time you use it. It is
# equivalent to something like:
#
# with temp = alloc(128):
#     temp[0] = 0 # this means the first data structure defined
#     temp[2] = key
#     temp[3] = 0 # the first member of the array
#     temp[4] = i
#     sload(sha3(temp, items=4))
#
# So instead of doing that every single time something
# is accessed or changed, I try to do it as few times
# as possible.

# When a contract address changes,
# you have to first go through the list
# of contracts that use it and change
# their whitelists. Then you must go through
# the address's own whitelist, and change
# the 'accessibles' list of each contract
# there. Both cases use an identitcal loop
# structure, and this macro is used for both.
macro replace($outer, $inner, $from, $to):
    with $outer_start = ref($outer[$from][0]):
        with $outer_len = sload($outer_start):
            if($outer_len):
                sstore($outer_start, 0)
                with $new_outer_start = ref($outer[$to][0]):
                    sstore($new_outer_start, $outer_len)
                    with $i = 1:
                        while($i <= $outer_len):
                            with $datum = sload($outer_start + $i):
                                sstore($outer_start + $i, 0)
                                sstore($new_outer_start + $i, $datum)
                                with $j = 1:
                                    with $inner_start = ref($inner[sload($new_outer_start + $i)][0]):
                                        while(sload($inner_start + $j) != $from):
                                            $j += 1
                                        sstore($inner_start + $j, $to)
                                        $i += 1

# The story for this macro is similar to
# that for the replace macro. In order to
# remove an address from each whitelist it
# is in, you must first go through the list
# of contracts that use it and remove the
# address from their whitelists, then you
# must go through the address's whitelist
# and remove it from the 'accessibles' list
# of each contract there. Again, the loop
# structure is identical in both cases.
macro delete($outer, $inner, $addr):
    with $outer_start = ref($outer[$from][0]):
        with $outer_len = sload($outer_start):
            if($outer_len):
                sstore($outer_start, 0) #delete the length
                with $i = 1:
                    while($i <= $outer_len):
                        #for address in outer list
                        #find $addr in that address's list, and delete it
                        with $j = 1:
                            with $inner_start = ref($inner[sload($outer_start + $i)][0]):
                                while(sload($inner_start + $j) != $addr):
                                    $j += 1
                                sstore($inner_start + $j, 0) #delete from inner list
                                sstore($outer_start + $i, 0) #delete entry in outer list        
                                $i += 1

# For each contract in a list of contracts,
# this macro adds an address to their
# whitelists. It also adds the contract to
# the address's list of accessible contracts.
# Unlike the other cases, this macro is used
# once because setting a new whitelist in the
# contract doesn't affect existing whitelists,
# and therefore does not require a vote.
macro add_address($ballot_item):
    with $address = self.additions[$ballot_item].address:
        with $contracts_start = ref(self.additions[$ballot_item].contracts[0]):
            with $contracts_len = sload($contracts_start):
                with $accessibles_start = ref(self.accessibles[$address][0]):
                    sstore($accessibles_start, $contracts_len)
                    with $i = 1:
                        while($i <= $contracts_len):
                            # store each contract in $address's "accessibles"
                            sstore($accessibles_start + $i, sload($contracts_start + $i))
                            with $j = 1:
                                with $whitelist_start = ref(self.whitelists[$contract][0]):
                                    # then add $address to the contracts' whitelists
                                    # in the first open spot, increasing the length if necessary.
                                    while(sload($whitelist_start + $j) != 0):
                                        $j += 1
                                    sstore($whitelist_start + $j, $address)
                                    if(sload($whitelist_start) < $j):
                                        sstore($whitelist_start, $j)

def shared():
    if(CURRENT_PERIOD && IS_FIRST_BLOCK && not self.votes[LAST_PERIOD].completed):
        self.votes[LAST_PERIOD].completed = 1
        with i = 1:
            with ballot_start = ref(self.votes[LAST_PERIOD].ballot[0]):
                with ballotLen = sload(ballot_start):
                    while i <= ballotLen:
                        with ballot_item = sload(ballot_start + i):
                            with ballot_item_type = self.types[ballot_item]:
                                if(ballot_item_type == REPLACEMENT):
                                    with from_addr = self.replacements[ballot_item].from_addr:
                                        with to_addr = self.replacements[ballot_item].to_addr:
                                            self.whitelists[from_addr][from_addr] = 0
                                            self.whitelists[to_addr][to_addr] = 1
                                            replace(self.accessibles, self.whitelists, from_addr, to_addr)
                                            replace(self.whitelists, self.accessibles, from_addr, to_addr)
                                elif ballot_item_type == DELETION:
                                    with addr = self.deletions[ballot_item]:
                                        self.whitelists[addr][addr] = 0
                                        delete(self.accessibles, self.whitelists, addr)
                                        delete(self.whitelists, self.accessibles, addr)
                                elif ballot_item_type == ADDITION:
                                    add_address(ballot_item)

# checks the caller's whitelist for addr.
def checkWhitelist(addr):
    with whitelist_start = ref(self.whitelists[msg.sender][0]):
        with length = sload(whitelist_start):
            with i = 1:
                while(i <= length):
                    if(sload(whitelist_start + i) == addr):
                        return(1)
                    i += 1
                return(0)

# checks the given contract's whitelist for addr.
def checkContractWhitelist(contract, address):
    with whitelist_start = ref(self.whitelists[contract][0]):
        with length = sload(whitelist_start):
            with i = 1:
                while(i <= length):
                    if(sload(whitelist_start + i) == addr):
                        return(1)
                    i += 1
                return(0)

# sets the given contract's whitelist to the
# given list of addresses. Returns -1 if the
# contract already has a whitelist, and 1 if
# successful.
def setWhitelist(contract, addresses:arr):
    with whitelist_start = ref(self.whitelists[contract][0]):
        if sload(whitelist_start):
            return(-1)
        else:
            sstore(whitelist_start, len(addresses))
            whitelist_start += 1
            with i = 0:
                while i < len(addresses):
                    with addr = addresses[i]:
                        # add addr to contract whitelist
                        sstore(whitelist_start + i, addr)
                        with j = 1:
                            with access_start = ref(self.accessibles[addr][0]):
                                while(sload(access_start + j) != 0):
                                    j += 1
                                sstore(access_start + j, contract)
                                if(j > sload(access_start)):
                                   sstore(acces_start, j)
                                i += 1
                return(1)

# returns the whitelist for the given contract
def getWhitelist(contract):
    with whiteslist_start = ref(self.whitelists[contract][0]):
        with length = sload(whitelist_start):
            whitelist_start += 1
            with result = array(length):
                with i = 0:
                    while i < length:
                        result[i] = sload(whiteslist_start + i)
                        i += 1
                    return(result:arr)

# returns the list of contracts with whitelists
# that contain address
def getAccessibles(address):
    with accessibles_start = ref(self.accessibles[address][0]):
        with length = sload(accessibles_start):
            with result = array(length):
                with i = 0:
                    accessibles_start += 1
                    while i < length:
                        result[i] = sload(accessibles_start + i)
                        i += 1
                    return(result:arr)

# returns the ballot for the given period
# (a list of the period's ballotItems)
def getBallot(period):
    with ballot_start = ref(self.votes[period].ballot[0]):
        with length = sload(ballot_start):
            with resullt = array(length):
                with i = 0:
                    ballot_start += 1
                    while i < length:
                        result[i] = sload(ballot_start + i)
                        i += 1
                    return(result)

# returns the type of a given ballotItem
def getBallotItemType(ballotItem):
    type = self.types[ballotItem]
    if type == REPLACEMENT:
        return(text("REPLACEMENT"):str)
    elif type == ADDITION:
        return(text("ADDITION"):str)
    elif type == DELETION:
        return(text("DELETION"):str)
    else:
        return(text(""):str) # consistent return type!

# returns 1 if address has voted at all this vote period
# use this to stop people from sending rep after voting
def hasVoted(address):
    with ballot_start = ref(current_vote.ballot[0]):
        with ballot_len = sload(ballot_start):
            with i = 1:
                while(i <= ballot_len):
                    if(current_vote.voters[sload(ballot_start + i)][tx.origin]):
                        return(1)
                    i += 1
                return(0)

# returns a list of ballotItems (a.k.a. hashes)
# that address voted for in the given period.
def getVotes(address, period):
    with ballot_start = ref(self.votes[period].ballot[0]):
        with length = sload(ballot_start):
            with i = 0:
                with j = 0:
                    with result = array(length):
                        ballot_start += 1
                        while i < length:
                            if self.votes[period].voters[sload(ballot_start + i)][address] == address:
                                result[j] = sload(ballot_start + i)
                                j += 1
                            i += 1
                        return(result, items=j)

# returns the replacement info for ballotItem as an array.
# first item is the from_addr, second item is to_addr.
def getReplacement(ballotItem):
    with from_addr = self.replacements[ballotItem].from_addr:
        with to_addr = self.replacements[ballotItem].to_addr:
            return([from_addr, to_addr]:arr)

# returns the address that the ballotItem proposes to delete.
def getDeletion(ballotItem):
    return(self.deletions[ballotItem])

# returns an array containing the addition type ballotItem's
# info. The first element is the address being added, the
# rest are the contracts it is being added to.
def getAddition(ballotItem):
    with address = self.additions[ballotItem].address:
        with contracts_start = ref(self.additions[ballotItem].contracts[0]):
            with length = sload(contracts_start):
                with result = array(length + 1):
                    with i = 1:
                        result[0] = address
                        while i <= length:
                            result[i] = sload(contracts_start + i)
                            i += 1
                        return(result:arr)

# returns the current vote period
def getCurrentVotePeriod():
    return(CURRENT_PERIOD)

# returns the block number of this contract's creation
def getEpoch():
    return(self.EPOCH)

# tallies your vote
def whitelistVote(hash):
    with ballot_start = ref(current_vote.ballot[0]):
        with ballot_len = sload(ballot_start):
            with i = 1:
                while((i <= ballot_len) && (sload(ballot_start + i)!=hash)):
                    i += 1
                if(i <= ballot_len):
                    current_vote.voters[hash][tx.origin] = 1
                    current_vote.repTotals[hash] += rep(1010101)
                    return(1)
                else:
                    return(0)

macro add_to_current_ballot($hash):
    with $ballot_start = ref(current_vote.ballot[0]):
        with $len_ballot = sload($ballot_start):
            with $i = 1:
                while(($i <= $len_ballot) && (sload($ballot_start + $i) != $hash)):
                    $i += 1
                if($i > $len_ballot):
                    sstore($ballot_start + $i, $hash)
                    sstore($ballot_start, $i)
                else: # the hash was already in the ballot
                    return(0)

def propose_replacement(from_addr,to_addr):
    info = array(4)
    info[0] = REPLACEMENT
    info[1] = CURRENT_PERIOD
    info[2] = from_addr
    info[3] = to_addr
    hash = sha3(info, items=4)

    add_to_current_ballot(hash)
    self.types[hash] = REPLACEMENT
    self.replacements[hash].from_addr = from_addr
    self.replacements[hash].to_addr = to_addr
    return(hash)

def propose_addition(address, contracts:arr):
    info = array(3 + len(contracts))
    info[0] = ADDITION
    info[1] = CURRENT_PERIOD
    info[2] = address
    mcopy(info+(items=3), contracts, items=len(contracts))
    hash = sha3(info, items=len(info))

    add_to_current_ballot(hash)
    self.types[hash] = ADDITION
    self.additions[hash].address = address
    with addition_start = ref(self.additions[hash].contracts[0]):
        sstore(addition_start, len(contracts))
        addition_start += 1
        with i = 0:
            while(i < len(contracts)):
                sstore(addition_start + i, contracts[i])
                i += 1
    return(hash)

def propose_deletion(address):
    info = array(3)
    info[0] = DELETION
    info[1] = CURRENT_PERIOD
    info[2] = address
    hash = sha3(info, items=3)

    add_to_current_ballot(hash)
    self.types[hash] = DELETE
    self.deletions[hash] = address
    return(hash)

# @return reputation value
def getRepByIndex(branch, repIndex):
    return(self.Reporting[branch].reputation[repIndex].repValue)

# @return reputation value
def getRepBalance(branch, address):
    repIndex = self.Reporting[branch].repIDtoIndex[address]
    if(repIndex==0 && self.Reporting[branch].reputation[repIndex].reporterID!=address):
        return(0)
    return(self.Reporting[branch].reputation[repIndex].repValue)

def getReporterID(branch, index):
    return(self.Reporting[branch].reputation[index].reporterID)

def getTotalRep(branch):
    return(self.Reporting[branch].totalRep)

def getNumberReporters(branch):
    return(self.Reporting[branch].numberReporters)

def repIDToIndex(branch, repID):
    return(self.Reporting[branch].repIDtoIndex[repID])

def hashReport(report: arr, salt):
    hashInfo = array(len(report) + 2)
    hashInfo[0] = tx.origin
    hashInfo[1] = salt
    i = 2
    while i < (len(report) + 2):
        hashInfo[i] = report[i-2]
        i += 1
    reportHash = sha256(hashInfo, chars=32*len(hashInfo))
    return(reportHash)

# check that msg.sender is one of our function contracts
def setInitialReporters(parent, branchID):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    # first vote period won't be until after the current (in this case first) basket of things has expired
        # if floor(blockNum / periodLength) is say 5 and eventsExpDates[5]
        # the current vote period should be on things from eventsExpDates 4 (when making a new branch this vote period will just fail quorem, and current vote period will be incrememented)
        # then once blockNum / periodLength is say 6 and eventsExpDates[6]
        # votePeriod 4 should close and the currentVotePeriod should be from
        # eventsExpDates 5 (anyone can call the consensus function for voteperiod 4 at this point)
    i = 0
    while i < self.Reporting[parent].numberReporters:
        reporterID = self.Reporting[parent].reputation[i].reporterID
        self.Reporting[branchID].reputation[i].reporterID = reporterID
        self.Reporting[branchID].reputation[i].repValue = self.Reporting[parent].reputation[i].repValue
        self.Reporting[branchID].repIDtoIndex[reporterID] = i
        i+=1
    self.Reporting[branchID].numberReporters = i
    return(1)

def addReporter(branch, sender):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    reporterIndex = self.Reporting[branch].numberReporters
    self.Reporting[branch].repIDtoIndex[sender] = reporterIndex
    self.Reporting[branch].reputation[reporterIndex].repValue = 0
    self.Reporting[branch].reputation[reporterIndex].reporterID = sender
    self.Reporting[branch].numberReporters += 1
    return(1)

def addRep(branch, index, value):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    self.Reporting[branch].reputation[index].repValue += value
    return(1)

def subtractRep(branch, index, value):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    self.Reporting[branch].reputation[index].repValue -= value
    return(1)

def setRep(branch, index, newRep):
    #if !self.whitelist.check(msg.sender):
    #    return(-1)
    oldRep = self.Reporting[branch].reputation[index].repValue
    self.Reporting[branch].reputation[index].repValue = newRep
    self.Reporting[branch].totalRep += newRep - oldRep
    return(1)
