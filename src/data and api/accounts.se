# accounts indexed with sha3(handle)
data accounts[](privateKey, iv, salt, mac, uuid)

# Register a new account.
# @param {int} handle sha3 digest of the user's handle/username
# @param {int} privateKey Encrypted private key (256-bit)
# @param {int} iv AES initialization vector (128-bit)
# @param {int} salt Key derivation salt (256-bit)
# @param {int} mac Message authentication code (256-bit)
# @param {int} uuid Hex-encoded v4 UUID bytearray (128-bit)
# @return int 0 if failed, 1 if successful
def register(handle, privateKey, iv, salt, mac, uuid):
    if self.accounts[handle].privateKey != 0:
        return(0)
    self.accounts[handle].privateKey = privateKey
    self.accounts[handle].iv = iv
    self.accounts[handle].salt = salt
    self.accounts[handle].mac = mac
    self.accounts[handle].uuid = uuid
    return(1)

# Retrieve an existing account.
# @param {int} handle sha3 digest of the user's handle/username
# @return array(5) [privateKey, iv, salt, mac, uuid] (0s if account not found)
def getAccount(handle):
    privateKey = self.accounts[handle].privateKey
    iv = self.accounts[handle].iv
    salt = self.accounts[handle].salt
    mac = self.accounts[handle].mac
    uuid = self.accounts[handle].uuid
    if privateKey == 0 or iv == 0 or salt == 0 or mac == 0 or uuid == 0:
        return([0, 0, 0, 0, 0]: arr)
    return([privateKey, iv, salt, mac, uuid]: arr)
