# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import fxpFunctions as FXP
import info as INFO
import events as EVENTS
import branches as BRANCHES

# Uncomment this event for debugging logs
# event stdout(data)

# Markets' index is the marketID
# Events is a 0 indexed array of events in the market in the format of
    # [1, event, event, 2, event, 3, event, event, event]
    # 1 means dimension 1, 2 is events in dimension 2, 3 is the dimension 3 events
# Sharespurchased keeps track of the number of shares purchased for each outcome
    # sharesPurchased states starts at 1 - (same for participants[].shares[] array)
# Participants is a 0 indexed array of participants, their cashIDs, && the shares in each outcome they've purchased of an event
# a binary outcome state 1 is no, 2 is true, 0 if not determined
# tradingFee is a percent in fixedPoint
# tradingPeriod is which eventexpperiod market expires in
data Markets[](events[], sharesPurchased[], addr2participant[], participants[](participantID, shares[]), lenEvents, currentParticipant, winningOutcomes[], alpha, cumulativeScale, numOutcomes, tradingPeriod, tradingFee, branch)

macro TRADER_FIELDS: 3
macro EVENTS_FIELDS: 6
macro OUTCOMES_FIELDS: 11
macro WINNING_OUTCOMES_FIELDS: 8
macro FIELDS: 12

# Gets all non-string information about all markets on the specified branch and
# returns it as a giant array.  getMarketsInfo requires a great deal of gas.
# Invoke using eth_call with gas=9999999999999 (or other very large number).
# @param {int} branch Branch ID that we're retrieving markets on.
# @param {int} offset Starting market index (0=full load).
# @param {int} numMarketsToLoad How many markets to load (0=all markets).
# @return array Array containing all (non-string) data for all markets:
#            [N, length_1, length_2, ..., length_N, info_1, info_2, ..., info_N]
#           where length_j is the number of elements stored for market j,
#           info_j is the information array for market j, and N is the total
#           number of markets in this branch.
def getMarketsInfo(branch, offset, numMarketsToLoad):
    numMarkets = BRANCHES.getNumMarkets(branch)
    if numMarketsToLoad > 0 and numMarketsToLoad < numMarkets:
        numMarkets = numMarketsToLoad
    marketIDs = BRANCHES.getMarkets(branch, outitems=numMarkets)
    marketsMatrix = array(numMarkets)
    marketArrayLength = array(numMarkets)
    m = offset
    while m < numMarkets + offset:
        onset = m - offset
        marketID = marketIDs[m]
        participantNumber = self.Markets[marketID].addr2participant[tx.origin]
        index = FIELDS

        marketsMatrix[onset] = array(FIELDS + self.Markets[marketID].currentParticipant*TRADER_FIELDS + self.Markets[marketID].lenEvents*EVENTS_FIELDS + self.Markets[marketID].numOutcomes*OUTCOMES_FIELDS)
        marketsMatrix[onset][0] = marketID
        marketsMatrix[onset][1] = self.Markets[marketID].currentParticipant
        marketsMatrix[onset][2] = self.Markets[marketID].alpha
        marketsMatrix[onset][3] = participantNumber
        marketsMatrix[onset][4] = self.Markets[marketID].numOutcomes
        marketsMatrix[onset][5] = self.Markets[marketID].tradingPeriod
        marketsMatrix[onset][6] = self.Markets[marketID].tradingFee
        marketsMatrix[onset][7] = self.Markets[marketID].branch
        marketsMatrix[onset][8] = self.Markets[marketID].lenEvents
        marketsMatrix[onset][9] = self.Markets[marketID].cumulativeScale
        marketsMatrix[onset][10] = INFO.getCreationFee(marketID)
        marketsMatrix[onset][11] = INFO.getCreator(marketID)

        # gather trader(s) info: [trader ID, yes shares, no shares]
        t = 0
        while t < self.Markets[marketID].currentParticipant*TRADER_FIELDS:
            marketsMatrix[onset][index + t] = self.Markets[marketID].participants[t].participantID
            marketsMatrix[onset][index + t + 1] = self.Markets[marketID].participants[t].shares[0]
            marketsMatrix[onset][index + t + 2] = self.Markets[marketID].participants[t].shares[1]
            t += TRADER_FIELDS
        index += t

        # gather event(s) info:
        # [eventID, expirationDate, outcome, minValue, maxValue, numOutcomes]
        i = 0
        while i < self.Markets[marketID].lenEvents*EVENTS_FIELDS:
            event = self.Markets[marketID].events[i]
            eventInfo = EVENTS.getEventInfo(event, outitems=EVENTS_FIELDS)
            marketsMatrix[onset][index + i] = event
            j = 1
            while j < EVENTS_FIELDS:
                marketsMatrix[onset][index + i + j] = eventInfo[j]
                j += 1
            i += EVENTS_FIELDS
        index += i

        # gather outcomes info:
        # [sharesPurchased, shares, price, participantNumber, winningOutcomes...]
        k = 0
        while k < self.Markets[marketID].numOutcomes*OUTCOMES_FIELDS:
            index += k
            outcome = k + 1
            marketsMatrix[onset][index] = self.Markets[marketID].sharesPurchased[outcome]
            marketsMatrix[onset][index + 1] = self.Markets[marketID].participants[participantNumber].shares[outcome]
            marketsMatrix[onset][index + 2] = self.price(market, outcome)
            w = 0
            while w < WINNING_OUTCOMES_FIELDS:
                marketsMatrix[onset][index + w + 2] = self.Markets[marketID].winningOutcomes[w]
                w += 1
            k += OUTCOMES_FIELDS

        marketArrayLength[onset] = index + self.Markets[marketID].numOutcomes*OUTCOMES_FIELDS
        m += 1

    # flatten the markets info matrix so it can be returned
    # (data offset by 1+numMarkets so length data can be prepended)
    totalFlatLength = 1 + numMarkets
    m = 0
    while m < numMarkets:
        totalFlatLength += marketArrayLength[m]
        m += 1
    flattened = array(totalFlatLength)
    flattened[0] = numMarkets
    m = 0
    while m < numMarkets:
        flattened[m + 1] = marketArrayLength[m]
        m += 1
    currentFlatLength = 1 + numMarkets
    row = 0
    while row < numMarkets:
        col = 0
        while col < marketArrayLength[row]:
            flattened[currentFlatLength + col] = marketsMatrix[row][col]
            col += 1
        currentFlatLength += col
        row += 1

    return(flattened: arr)

# @return cost - how much it costs you to buy
#         price - current share price of that outcome after buy
def getSimulatedBuy(market, outcome, amount):
    # lmsr cost calcs
    oldCost = lsLmsr(market)
    sharesPurchased(market)[outcome] += amount
    newCost = lsLmsr(market)
    if newCost <= oldCost:
        sharesPurchased(market)[outcome] -= amount
        return(-2)
    cost = (newCost - oldCost)
    price = self.price(market, outcome)
    sharesPurchased(market)[outcome] -= amount
    return([cost, price], chars=64)

# @return cost - how much you get paid to sell
#         price - current share price of that outcome after sell
def getSimulatedSell(market, outcome, amount):
    # lmsr cost calcs
    oldCost = lsLmsr(market)
    sharesPurchased(market)[outcome] -= amount
    newCost = lsLmsr(market)
    if oldCost <= newCost:
        sharesPurchased(market)[outcome] += amount
        return(-2)
    # these prices are in fixed point
    cost = oldCost - newCost
    price = self.price(market, outcome)
    sharesPurchased(market)[outcome] += amount
    return([cost, price], chars=64)

def getMarketEvents(market):
    i = 0
    lenEvents = self.Markets[market].lenEvents
    events = array(lenEvents)
    while i < lenEvents:
        events[i] = self.Markets[market].events[i]
        i += 1
    return(events: arr)

def getSharesPurchased(market, outcome):
    return(self.Markets[market].sharesPurchased[outcome])

def getParticipantNumber(market, address):
    participantNumber = self.Markets[market].addr2participant[address]
    if(self.Markets[market].participants[participantNumber].participantID != tx.origin):
        return(-1)
    else:
        return(participantNumber)

def getParticipantID(market, participantNumber):
    return(self.Markets[market].participants[participantNumber].participantID)

def getParticipantSharesPurchased(market, participantNumber, outcome):
    return(self.Markets[market].participants[participantNumber].shares[outcome])

def getNumEvents(market):
    return(self.Markets[market].lenEvents)

def getCurrentParticipantNumber(market):
    return(self.Markets[market].currentParticipant)

def getAlpha(market):
    return(self.Markets[market].alpha)

def getCumScale(market):
    return(self.Markets[market].cumulativeScale)

def getMarketNumOutcomes(market):
    return(self.Markets[market].numOutcomes)

def getTradingPeriod(market):
    return(self.Markets[market].tradingPeriod)

def getTradingFee(market):
    return(self.Markets[market].tradingFee)

def getBranchID(market):
    return(self.Markets[market].branch)

# alpha is equal to v/(n*log(n)) where v is the max percent commission
# && n is the number of outcomes people can trade. Alpha is set when
# a market is created.
macro lsLmsr($marketID):
    with $bq = Bq($marketID):
        with $i = 1:
            with $sumExp = 0:
                while $i <= numOutcomes($marketID):
                    $sumExp += FXP.fx_exp(sharesPurchased($marketID)[$i] * 2**64 / $bq)
                    $i += 1
                $bq*FXP.fx_log($sumExp)/2**64

macro sumList($q, $a, $b):
    $i = $a + 1
    $result = $q[$a]
    while $i <= $b:
        $result += $q[$i]
        $i += 1
    $result

macro market($marketID):
    self.Markets[$marketID]

macro alpha($marketID):
    market($marketID).alpha

macro cumScale($marketID):
    market($marketID).cumulativeScale

macro numOutcomes($marketID):
    market($marketID).numOutcomes

macro sharesPurchased($marketID):
    market($marketID).sharesPurchased

macro particpant($marketID, $addr):
    market($marketID).participants[$addr]

macro Bq($marketID):
   alpha($marketID) * cumScale($marketID) * sumList(sharesPurchased($marketID), 1, numOutcomes($marketID)) / 2**64

def lsLmsr(marketID):
    return(lsLmsr(marketID))

def price(market, outcome):
    a = lsLmsr(market)
    sharesPurchased(market)[outcome] += 2**60
    b = lsLmsr(market)
    sharesPurchased(market)[outcome] -= 2**60
    return(((b - a) * 2**64)/2**60)

# check that msg.sender is one of our function contracts
def initializeMarket(marketID, events: arr, tradingPeriod, tradingFee, branch):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    # add event list to the market
    save(self.Markets[marketID].events[0], events, chars=32*len(events))
    self.Markets[marketID].lenEvents = len(events)
    self.Markets[marketID].tradingPeriod = tradingPeriod
    self.Markets[marketID].tradingFee = tradingFee
    self.Markets[marketID].branch = branch
    return(1)

def addParticipant(market, address):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    participantNumber = self.Markets[market].currentParticipant
    self.Markets[market].participants[participantNumber].participantID = address
    self.Markets[market].addr2participant[address] = participantNumber
    self.Markets[market].currentParticipant += 1
    return(participantNumber)

def modifyShares(marketID, outcome, amount):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    sharesPurchased(marketID)[outcome] += amount
    return(1)

def modifyParticipantShares(marketID, participantNumber, outcome, amount):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    self.Markets[marketID].participants[participantNumber].shares[outcome] += amount
    return(1)

def setWinningOutcomes(market, outcomes: arr):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    # largest # of winning outcomes is 8
    i = 0
    while outcomes[i] != 0:
        self.Markets[market].winningOutcomes[i] = outcomes[i]
        i += 1
    return(1)
    
def getWinningOutcomes(market):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    # largest # of winning outcomes is 8
    return(load(self.Markets[market].winningOutcomes[0], chars=32*8): arr)

def initialLiquiditySetup(marketID, alpha, cumScale, numOutcomes):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    self.Markets[marketID].alpha = alpha
    self.Markets[marketID].cumulativeScale = cumScale
    self.Markets[marketID].numOutcomes = numOutcomes
    return(1)

def getMarketOutcomeInfo(market, outcome):
    info = array(13)
    participantNumber = self.Markets[market].addr2participant[tx.origin]
    info[0] = self.getSharesPurchased(market, outcome)
    info[1] = self.getParticipantSharesPurchased(market, participantNumber, outcome)
    info[2] = self.price(market, outcome)
    info[3] = participantNumber
    info[4] = self.getCurrentParticipantNumber(market)
    info[5] = self.Markets[market].winningOutcomes[0]
    info[6] = self.Markets[market].winningOutcomes[1]
    info[7] = self.Markets[market].winningOutcomes[2]
    info[8] = self.Markets[market].winningOutcomes[3]
    info[9] = self.Markets[market].winningOutcomes[4]
    info[10] = self.Markets[market].winningOutcomes[5]
    info[11] = self.Markets[market].winningOutcomes[6]
    info[12] = self.Markets[market].winningOutcomes[7]
    return(info: arr)

# inset("../../macros/logging.sm")
