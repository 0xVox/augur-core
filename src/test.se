# data controller

# extern controller: [addToWhitelist:[int256]:int256, assertIsWhitelisted:[int256]:int256, assertOnlySpecifiedCaller:[int256,int256]:_, changeMode:[int256]:int256, emergencyStop:[]:int256, getMode:[]:int256, getOwner:[]:int256, lookup:[int256]:int256, onlyInEmergency:[]:_, release:[]:int256, removeFromWhitelist:[int256,int256]:int256, setValue:[int256,int256]:int256, stopInEmergency:[]:_, suicide:[int256,int256,int256]:int256, switchModeSoOnlyEmergencyStopsAndEscapeHatchesCanBeUsed:[]:_, transferOwnership:[int256,int256,int256,int256]:int256, updateController:[int256,int256]:int256]

# def init():
#     self.controller = 0x0

# def any():
#     ~calldatacopy(0, 0, ~calldatasize())
#     ~delegatecall(msg.gas - 10000, self.controller.lookup("branches"), 0, ~calldatasize(), ~calldatasize(), 32)
#     ~return(~calldatasize(), 32)

from string import Template
from binascii import hexlify
from ethereum import tester
from ethereum.tester import ABIContract

libraryCode = """
data number

def init():
    self.number = 5

def initialize(apple, banana, cherry, durian, eggplant, fruit):
    self.number = banana

def getNumber():
    return(self.number)
"""

instantiationCode = """
macro CONTROLLER: 0x$controllerAddress
def any():
    if(1):
        ~calldatacopy(0, 0, ~calldatasize())
        ~delegatecall(msg.gas - 10000, CONTROLLER, 0, ~calldatasize(), 0, 32)
        ~return(0, 32)
"""

state = tester.state()
state.state.block_number += 2000000
library = state.abi_contract(libraryCode)

instantiationCode = Template(instantiationCode).substitute(dict(controllerAddress = hexlify(library.address)))
instantiation = ABIContract(state, library.translator, state.abi_contract(instantiationCode).address)

print(instantiation.getNumber())
instantiation.initialize(11, 12, 7, 15, 17, 7)
print(instantiation.getNumber())