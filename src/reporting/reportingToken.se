# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

##### must be first data members to match Delegator.sol
data controller
data controllerLookupName
#####

inset('../macros/require.sem')
inset('../macros/externs.sem')
inset('../macros/assertNoValue.sem')
inset('../macros/assertPrivateCall.sem')
inset('../macros/safeMath.sem')

data initialized
data market
data payoutNumerators[]
data tokens[2**160]
data spenders[2**160][2**160]
data supply

def any():
    assertNoValue()

def initialize(market: address, payoutNumerators: arr):
    require(not self.initialized)
    self.initialized = 1
    self.market = market
    require(market.getNumberOfOutcomes() == len(payoutNumerators))
    save(self.payoutNumerators[0], payoutNumerators, items = len(payoutNumerators))
    # TODO: call a function on `self.getBranch()` that logs the creation of this token with an index for the market, function needs to verify that caller is `branch.isContainerForReportingToken(thisToken)`
    return 1

def buy(attotokens: int256):
    require(attotokens >= 1)
    require(attotokens <= 2**254)
    reporter = msg.sender
    require(self.market.canBeReportedOn())
    require(self.getRegistrationToken().balanceOf(reporter) >= 1)
    require(self.market.isContainerForReportingToken(self))
    self.getReputationToken().trustedTransfer(reporter, self, attotokens)
    self.tokens[reporter] = safeAdd(self.tokens[reporter], attotokens)
    self.supply = safeAdd(self.supply, attotokens)
    self.market.updateTentativeWinningPayoutDistributionHash(self.getPayoutDistributionHash())
    self.getReportingWindow().noteReport(self.market, reporter, self.getPayoutDistributionHash())
    log(type=Transfer, 0, reporter, attotokens)
    return 1

def redeemDisavowedTokens(reporter: address):
    require(not self.market.isContainerForReportingToken(self))
    reputationSupply = self.getReputationToken().balanceOf(self)
    attotokens = self.tokens[reporter]
    reporterReputationShare = reputationSupply * attotokens / self.supply
    self.supply -= attotokens
    self.tokens[reporter] = 0
    self.getReputationToken().transfer(reporter, reporterReputationShare)
    log(type=Transfer, reporter, 0, attotokens)
    return 1

# NOTE: UI should warn users about calling this before first calling `migrateLosingTokens` on all losing tokens with non-dust contents
def redeemForkedTokens(reporter: address):
    require(msg.sender == reporter)
    # FIXME: this doesn't need to wait for finalization, instead as soon as the fork occurs anyone can redeem on the branch they reported on (but no other)
    require(self.market.isFinalized())
    require(self.market.isContainerForReportingToken(self))
    require(self.getBranch().getForkingMarket() == self.market)
    reputationSupply = self.getReputationToken().balanceOf(self)
    attotokens = self.tokens[reporter]
    reporterReputationShare = reputationSupply * attotokens / self.supply
    self.supply -= attotokens
    self.tokens[reporter] = 0
    destinationReputationToken = self.getBranch().getChildBranch(self.getPayoutDistributionHash()).getReputationToken()
    self.getReputationToken().migrateOut(destinationReputationToken, self, reporterReputationShare)
    destinationReputationToken.transfer(reporter, reporterReputationShare)
    log(type=Transfer, reporter, 0, attotokens)
    return 1

def migrateLosingTokens():
    require(self.market.isFinalized())
    require(self.market.isContainerForReportingToken(self))
    require(self.getBranch().getForkingMarket() != self.market)
    require(self.market.getFinalWinningReportingToken() != self)
    self.supply = 0
    # Send losing reporting token REP to correct dispute bonds until bond holders are paid out (either all REP are sent or they hit 2x limit)
    # Pay out to earlier disputers as much as possible before paying out to later disputers
    reputationToken = self.getReputationToken()
    automatedReporterDisputeBondToken = self.market.getAutomatedReporterDisputeBondToken()
    limitedReportersDisputeBondToken = self.market.getLimitedReportersDisputeBondToken()
    allReportersDisputeBondToken = self.market.getAllReportersDisputeBondToken()
    if (automatedReporterDisputeBondToken and automatedReporterDisputeBondToken.getDisputedPayoutDistributionHash() != self.market.getFinalPayoutDistributionHash()):
        amountNeeded = automatedReporterDisputeBondToken.getBondRemainingToBePaidOut() - reputationToken.balanceOf(automatedReporterDisputeBondToken)
        amountToTransfer = min(amountNeeded, reputationToken.balanceOf(self))
        if (amountToTransfer > 0):
            reputationToken.transfer(automatedReporterDisputeBondToken, amountToTransfer)
    if (limitedReportersDisputeBondToken and limitedReportersDisputeBondToken.getDisputedPayoutDistributionHash() != self.market.getFinalPayoutDistributionHash()):
        amountNeeded = limitedReportersDisputeBondToken.getBondRemainingToBePaidOut() - reputationToken.balanceOf(limitedReportersDisputeBondToken)
        amountToTransfer = min(amountNeeded, reputationToken.balanceOf(self))
        if (amountToTransfer > 0):
            reputationToken.transfer(limitedReportersDisputeBondToken, amountToTransfer)
    selfBalance = reputationToken.balanceOf(self)
    if (selfBalance > 0):
        reputationToken.transfer(self.market.getFinalWinningReportingToken(), selfBalance)
    return 1

# NOTE: UI should warn users about calling this before first calling `migrateLosingTokens` on all losing tokens with non-dust contents
def redeemWinningTokens(reporter: address):
    require(msg.sender == reporter)
    require(self.market.isFinalized())
    require(self.market.isContainerForReportingToken(self))
    require(self.getBranch().getForkingMarket() != self.market)
    require(self.market.getFinalWinningReportingToken() == self)
    self.extractBondHolderPayments()
    reputationSupply = self.getReputationToken().balanceOf(self)
    attotokens = self.tokens[reporter]
    reporterReputationShare = reputationSupply * attotokens / self.supply
    self.supply -= attotokens
    self.tokens[reporter] = 0
    if (reporterReputationShare > 0):
        self.getReputationToken().transfer(reporter, reporterReputationShare)
        log(type=Transfer, reporter, 0, attotokens)
    return 1

# FIXME: Do we still need this function? I believe now the mechanic is to extract
# REP from losing tokens during the losing token migration process, rather than
# at redeemWinningToken time so attempting to extract them again here is wasteful
# since it will never do anything.
# This would explain why the getDesiredDisputeRewardPot function is not causing
# test failures despite the undefined constants.
def extractBondHolderPayments():
    require(self.market.isFinalized())
    marketReputationBalance = self.getReputationToken().balanceOf(self.market)
    desiredBondPot = self.getDesiredDisputeRewardPot()
    bondPotIncrease = desiredBondPot - marketReputationBalance
    if (bondPotIncrease <= 0):
        return(1)
    excessAttorepAvailable = self.getReputationToken().balanceOf(self) - self.supply
    amountToSend = min(bondPotIncrease, excessAttorepAvailable)
    if (amountToSend):
        self.getReputationToken().transfer(self.market, amountToSend)
    return 1

# FIXME: It feels like this method should be on market rather than on the
# reporting token. I don't see any variables being accessed from this contract,
# they are all off of market. Also, aren't those constants only defined over in
# market.se meaning this currently doesn't do the right thing?
def getDesiredDisputeRewardPot():
    assertNoValue()
    require(self.market.isFinalized())
    desiredBondPot = 0
    if (self.market.getAutomatedReporterDisputeBondToken() and self.market.getAutomatedReporterDisputeBondToken().getDisputedPayoutDistributionHash() != self.market.getFinalPayoutDistributionHash()):
        desiredBondPot += AUTOMATED_REPORTER_DISPUTE_BOND_AMOUNT * 2
    if (self.market.getLimitedReportersDisputeBondToken() and self.market.getLimitedReportersDisputeBondToken().getDisputedPayoutDistributionHash() != self.market.getFinalPayoutDistributionHash()):
        desiredBondPot += LIMITED_REPORTERS_DISPUTE_BOND_AMOUNT * 2
    if (self.market.getAllReportersDisputeBondToken() and self.market.getAllReportersDisputeBondToken().getDisputedPayoutDistributionHash() != self.market.getFinalPayoutDistributionHash()):
        desiredBondPot += ALL_REPORTERS_DISPUTE_BOND_AMOUNT * 2
    return(desiredBondPot)


####
#### Getters
####

def getMarket():
    return(self.market)

def getReportingWindow():
    return(self.market.getReportingWindow())

def getBranch():
    return(self.market.getBranch())

def getReputationToken():
    return(self.market.getReputationToken())

def getRegistrationToken():
    return(self.market.getRegistrationToken())

def getPayoutDistributionHash():
    payoutNumerators = load(self.payoutNumerators[0], items = self.market.getNumberOfOutcomes())
    return(self.market.derivePayoutDistributionHash(payoutNumerators))

def getPayoutNumerator(index: int256):
    require(0 <= index and index < self.market.getNumberOfOutcomes())
    return(load(self.payoutNumerators[0], items = self.market.getNumberOfOutcomes())[index])


####
#### ERC20 Implementation
####

event Transfer(from:address:indexed, to:address:indexed, attotokens:int256)
event Approval(owner:address:indexed, spender:address:indexed, attotokens:int256)

def totalSupply():
    return(self.supply)

def balanceOf(address: address):
    return(self.tokens[address])

def transfer(destinationAddress: address, attotokens: uint256):
    require(1 <= attotokens and attotokens <= 2**254)
    self.tokens[msg.sender] = safeSub(self.tokens[msg.sender], attotokens)
    self.tokens[destinationAddress] = safeAdd(self.tokens[destinationAddress], attotokens)
    log(type = Transfer, msg.sender, destinationAddress, attotokens)
    return(1)

def transferFrom(sourceAddress: address, destinationAddress: address, attotokens: uint256):
    require(1 <= attotokens and attotokens <= 2**254)
    require(self.spenders[sourceAddress][msg.sender] >= attotokens)
    self.spenders[sourceAddress][msg.sender] = safeSub(self.spenders[sourceAddress][msg.sender], attotokens)
    self.tokens[sourceAddress] = safeSub(self.tokens[sourceAddress], attotokens)
    self.tokens[destinationAddress] = safeAdd(self.tokens[destinationAddress], attotokens)
    log(type = Transfer, sourceAddress, destinationAddress, attotokens)
    return(1)

def approve(spenderAddress: address, attotokens: uint256):
    require(1 <= attotokens and attotokens <= 2**254)
    self.spenders[msg.sender][spenderAddress] = attotokens
    log(type = Approval, msg.sender, spenderAddress, attotokens)
    return(1)

def allowance(ownerAddress: address, spenderAddress: address):
    return(self.spenders[ownerAddress][spenderAddress])
