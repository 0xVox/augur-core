# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2015 Forecast Foundation 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you have questions, please contact Joey Krug (joey@augur.net) or
# Jack Peterson (jack@augur.net).

import expiringEvents as EXPIRING
import reporting as REPORTING
import branches as BRANCHES
import score as SCORE

def blank(branch, period, num_events, num_reports, flatsize):
    # if !WHITELIST.check(msg.sender):
    #     return(-1)
    # blank
    # loading vector (eigenvector) has num_events + 2 elements:
    #   - second-to-last element: number of iterations remaining
    #   - last element: number of components (eigenvectors) remaining
    with ne_plus_2 = num_events + 2:
        # - if element ne_plus_2 is zero, we're on the first component, so set the last
        #   element equal to MAX_COMPONENTS
        # - otherwise, decrement the last element
        with loading_vector = EXPIRING.getLoadingVector(branch, period, outsz=num_events+2):
            if loading_vector[num_events+1] == 0:
                EXPIRING.setLoadingVector(branch, period, SCORE.blank(MAX_COMPONENTS, MAX_ITERATIONS, num_events, outsz=ne_plus_2))
            else:
                EXPIRING.setLoadingVector(branch, period, SCORE.blank(loading_vector[num_events+1]-1, MAX_ITERATIONS, num_events, outsz=ne_plus_2))
            return(1)

def loadings(branch, period, num_events, num_reports, flatsize):
    # if !WHITELIST.check(msg.sender):
    #     return(-1)
    with ne_plus_2 = num_events + 2:
        with loading_vector = EXPIRING.getLoadingVector(branch, period, outsz=ne_plus_2):
            with deflated =  EXPIRING.getDeflated(branch, period, outsz=flatsize):
                with reputation = array(num_reports):
                    with i = 0:
                        while i < num_reports:
                            reputation[i] = REPORTING.getRepByIndex(branch, i)
                            i += 1
                    # Iteratively diagonalize the weighted centered data matrix,
                    # deflating (subtracting out the eigenvectors) the matrix after each
                    # eigenvector is found
                    loading_vector = SCORE.loadings(loading_vector, deflated, reputation, num_reports, num_events, outsz=ne_plus_2)
                    EXPIRING.setLoadingVector(branch, period, loading_vector)
                    if loading_vector[num_events] == 0:
                        return(0)
                    else:
                        return(1)

def latent(branch, period, num_events, num_reports, flatsize):
    # if !WHITELIST.check(msg.sender):
    #     return(-1)
    with loading_vector = EXPIRING.getLoadingVector(branch, period, outsz=num_events+2):
        with covrow = EXPIRING.getCovarianceMatrixRow(branch, period, outsz=num_events):
            EXPIRING.setLatent(branch, period, SCORE.latent(covrow, loading_vector, num_events))
            EXPIRING.setCovarianceMatrixRow(branch, period, covrow)
            return(1)

def deflate(branch, period, num_events, num_reports, flatsize):
    # if !WHITELIST.check(msg.sender):
    #     return(-1)
    with loading_vector = EXPIRING.getLoadingVector(branch, period, outsz=num_events+2):
        with deflated = EXPIRING.getDeflated(branch, period, outsz=flatsize):
            deflated = SCORE.deflate(loading_vector, deflated, num_reports, num_events, outsz=flatsize)
            EXPIRING.setDeflated(branch, period, deflated)
            return(1)

def score(branch, period, num_events, num_reports, flatsize):
    # if !WHITELIST.check(msg.sender):
    #     return(-1)
    with loading_vector = EXPIRING.getLoadingVector(branch, period, outsz=num_events+2):
        with wcd =  EXPIRING.getWeightedCenteredData(branch, period, outsz=flatsize):
            with latent = EXPIRING.getLatent(branch, period):
                with scores = EXPIRING.getScores(branch, period, outsz=num_reports):
                    scores = SCORE.score(scores, loading_vector, wcd, latent, num_reports, num_events, outsz=num_reports)
                    EXPIRING.setScores(branch, period, scores)
                    if loading_vector[num_events+1] == 0:
                        return(0)
                    else:
                        return(1)

inset('macros/constants.se')
inset('macros/fixed.se')
