# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2015 Forecast Foundation 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you have questions, please contact Joey Krug (joey@augur.net) or
# Jack Peterson (jack@augur.net).

import events as EVENTS
import expiringEvents as EXPIRING
import reporting as REPORTING
import resolve as RESOLVE

def smooth(branch, period, num_events, num_reports, flatsize):
    with reputation = array(num_reports):
        with i = 0:
            while i < num_reports:
                reputation[i] = REPORTING.getRepByIndex(branch, i)
                i += 1
            with adjusted_scores = array(num_reports):
                adjusted_scores = slice(EXPIRING.getAdjPrinComp(branch, period, outitems=num_reports), items=0, items=num_reports)
                with smooth_rep = array(num_reports):
                    smooth_rep = slice(RESOLVE.smooth(adjusted_scores, reputation, num_reports, num_events, outitems=num_reports), items=0, items=num_reports)
                    EXPIRING.setSmoothRep(branch, period, smooth_rep)
                    return(1)

def resolve(branch, period, num_events, num_reports, flatsize):
    with reports_filled = array(flatsize):
        reports_filled = slice(EXPIRING.getReportsFilled(branch, period, outitems=flatsize), items=0, items=flatsize)
        with smooth_rep = array(num_reports):
            smooth_rep = slice(EXPIRING.getSmoothRep(branch, period, outitems=num_reports), items=0, items=num_reports)
            with scaled = array(num_events):
                with scaled_max = array(num_events):
                    with scaled_min = array(num_events):
                        with j = 0:
                            while j < num_events:
                                with event = EXPIRING.getEvent(branch, period, j):
                                    if fix(EVENTS.getMaxValue(event)) != YES and EVENTS.getNumOutcomes(event) == 2:
                                        scaled[j] = 1
                                        scaled_min[j] = fix(EVENTS.getMinValue(event))
                                        scaled_max[j] = fix(EVENTS.getMaxValue(event))
                                    else:
                                        scaled[j] = 0
                                        scaled_min[j] = NO
                                        scaled_max[j] = YES
                                j += 1
                            with outcomes = array(num_events):
                                outcomes = slice(RESOLVE.resolve(smooth_rep, reports_filled, scaled, scaled_max, scaled_min, num_reports, num_events, outitems=num_events), items=0, items=num_events)
                                EXPIRING.setOutcomesFinal(branch, period, outcomes)
                                return(1)

inset('macros/constants.se')
inset('macros/fixed.se')
