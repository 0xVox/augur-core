import expiringEvents as EXPIRING
import reporting as REPORTING
import fxpFunctions as FXP
import events as EVENTS

# scalar
if 2^64*EVENTS.getMaxValue(event) != YES and EVENTS.getNumOutcomes(event) == 2:
    scaled_min[j] = 2^64*EVENTS.getMinValue(event)
    scaled_max[j] = 2^64*EVENTS.getMaxValue(event)
# categorical, but we can make it behave as a scalar for all intents and purposes here
elif(EVENTS.getNumOutcomes(event)>2):
    scaled_min[j] = 2^64
    scaled_max[j] = 2^64*EVENTS.getNumOutcomes(event)
# binary
else:
    scaled_min[j] = NO
    scaled_max[j] = YES
   
if scaled[i] == 1:
    outcomes_raw[i] = median * (scaled_max[i] - scaled_min[i]) + scaled_min[i]

macro ONE: 2^64

macro YES: 2^65
macro NO: 2^64
macro BAD: 3 * 2^63

macro CATCH_TOLERANCE: 2^64 / 10

# still needs to be done even if lazy evaluating things, just once at the end
# Bins values to 1, 1.5, 2
macro catch($x):
    if($x < (BAD - CATCH_TOLERANCE), NO, if($x > BAD + CATCH_TOLERANCE, YES, BAD))