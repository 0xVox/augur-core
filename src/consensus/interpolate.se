# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2015 Forecast Foundation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you have questions, please contact Jack Peterson (jack@augur.net).

import statistics as STATISTICS

def interpolate(reports:arr, reputation:arr, scaled:arr, scaled_max:arr, scaled_min:arr):
    # returns:
    #   reports_filled: [0, flatsize - 1]
    #   reports_mask: [flatsize, 2*flatsize - 1]

    num_reports = len(reputation)
    flatsize = len(reports)
    num_events = flatsize / num_reports
    reputation = normalize(reputation)
    flatsize_x_2 = 2 * flatsize
    # scaled_reports = array(flatsize)
    # i = 0
    # while i < num_events:
    #     j = 0
    #     while j < num_reports:
    #         idx = i + j*num_events
    #         if reports[idx] == 0:
    #             scaled_reports[idx] = 0
    #         else:
    #             if scaled[i] == 1:
    #                 scaled_reports[idx] = fixed_divide(reports[idx] - scaled_min[i], scaled_max[i] - scaled_min[i])
    #             else:
    #                 scaled_reports[idx] = reports[idx]
    #         j += 1
    #     i += 1
        
    # use existing data and reputations to fill missing observations
    # (weighted average or median over all non-missing data)
    reports_interp = array(flatsize_x_2)
    missing_values = 0

    # set up reports mask
    i = 0
    while i < flatsize:
        reports_interp[i] = reports[i]
        if reports[i] == 0:
            reports_interp[i + flatsize] = 1
            missing_values += 1
        i += 1
    if missing_values > 0:
        num_present = array(num_events)
        i = 0
        while i < num_events:
            j = 0
            while j < num_reports:
                if reports[i + j*num_events] != 0:
                    num_present[i] += 1
                j += 1
            i += 1
        i = 0
        while i < num_events:
            if num_present[i] < num_reports:
                total_active_reputation = 0
                active_reputation = array(num_present[i])
                active_reports = array(num_present[i])
                active_index = 0
                nan_indices = array(num_events)
                j = 0
                while j < num_events:
                    nan_indices[j] = num_reports
                    j += 1
                j = 0
                while j < num_reports:
                    idx = i + j*num_events
                    if reports[idx] != 0:
                        total_active_reputation += reputation[j]
                        active_reputation[active_index] = reputation[j]
                        active_reports[active_index] = reports[idx]
                        active_index += 1
                    else:
                        nan_indices[j] = j
                    j += 1
                guess = 0
                if scaled[i] == 0:
                    j = 0
                    while j < num_present[i]:
                        active_reputation[j] = fixed_divide(active_reputation[j], total_active_reputation)
                        guess += fixed_multiply(active_reputation[j], active_reports[j])
                        j += 1
                    guess = catch(guess)
                else:
                    j = 0
                    while j < num_present[i]:
                        active_reputation[j] = fixed_divide(active_reputation[j], total_active_reputation)
                        j += 1
                    guess = STATISTICS.weighted_median(active_reports, active_reputation)
                j = 0
                while j < num_events:
                    if nan_indices[j] < num_reports:
                        reports_interp[i + nan_indices[j]*num_events] = guess
                    j += 1
            i += 1
    else:
        i = 0
        while i < flatsize:
            reports_interp[i] = reports[i]
            i += 1
    return(reports_interp: arr)

inset('macros/constants.se')
inset('macros/fixed.se')
inset('macros/arrays.se')
# inset('../../macros/constants.se')
# inset('../../macros/fixed.se')
# inset('../../macros/arrays.se')
