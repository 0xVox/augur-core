# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2015 Forecast Foundation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you have questions, please contact Joey Krug (joey@augur.net) or
# Jack Peterson (jack@augur.net).

# extern whitelist.se: [addAddress:ii:s, check:i:i, checkaddr:ii:i, replaceAddress:iii:s]

import expiringEvents

import reporting

import adjust

def reputation_delta(branch, period, num_events, num_reports, flatsize):
    # if !WHITELIST.check(msg.sender):
    #     return(-1)
    with scores = expiringEvents.getScores(branch, period, outsz=num_reports):
        with nr_x_2 = num_reports * 2:
            with sets = ADJUST.reputation_delta(scores, num_reports, num_events, outsz=nr_x_2):
                expiringEvents.setSetOne(branch, period, slice(sets, items=0, items=num_reports)
                expiringEvents.setSetTwo(branch, period, slice(sets, items=num_reports, items=nr_x_2))
                return(1)

def weighted_delta(branch, period, num_events, num_reports, flatsize):
    # if !WHITELIST.check(msg.sender):
    #     return(-1)
    with reports_filled = expiringEvents.getReportsFilled(branch, period, outsz=flatsize):
        with reputation = array(num_reports):
            with i = 0:
                while i < num_reports:
                    reputation[i] = reporting.getRepByIndex(branch, i)
                    i += 1
                with set1 = expiringEvents.getSetOne(branch, period, outsz=num_reports):
                    with set2 = expiringEvents.getSetTwo(branch, period, outsz=num_reports):
                        with ne_x_3 = num_events * 3:
                            with ne_x_2 = num_events * 2:
                                with wsets = ADJUST.weighted_delta(set1, set2, reputation, reports_filled, num_reports, num_events, outsz=ne_x_3):
                                    expiringEvents.setOld(branch, period, slice(wsets, items=0, items=num_events))
                                    expiringEvents.setNewOne(branch, period, slice(wsets, items=num_events, items=ne_x_2))
                                    expiringEvents.setNewTwo(branch, period, slice(wsets, items=ne_x_2, items=ne_x_3))
                                    return(1)

def select_scores(branch, period, num_events, num_reports, flatsize):
    # if !WHITELIST.check(msg.sender):
    #     return(-1)
    with old = expiringEvents.returnOld(branch, period, outsz=num_events):
        with new1 = expiringEvents.getNewOne(branch, period, outsz=num_events):
            with new2 = expiringEvents.getNewTwo(branch, period, outsz=num_events):
                with set1 = expiringEvents.getSetOne(branch, period, outsz=num_reports):
                    with set2 = expiringEvents.getSetTwo(branch, period, outsz=num_reports):
                        with scores = expiringEvents.getScores(branch, period, outsz=num_reports):
                            with adjusted_scores = ADJUST.select_scores(old, new1, new2, set1, set2, scores, num_reports, num_events, outsz=num_reports):
                                expiringEvents.setAdjPrinComp(branch, period, adjusted_scores)
                                return(1)

inset('macros/constants.se')
inset('macros/fixed.se')
