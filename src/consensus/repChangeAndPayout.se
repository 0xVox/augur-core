import expiringEvents as EXPIRING
import reporting as REPORTING
import clustering as CLUSTER
import fxpFunctions as FXP
import outcomes as OUTCOMES
import branches as BRANCHES
import checkQuorum as QUORUM
import events as EVENTS
import cash as CASH
import info as INFO

macro ONE: 2^64
macro BAD: 3 * 2^63
macro BOND: 42 * ONE

# core ideas the same, needs drastic changes to implementation

def dispatch(branch):
    #if !BRANCHES.getStep(branch) and !QUORUM.checkQuorum(branch):
    #    return(-1)
    with period = BRANCHES.getVotePeriod(branch):
        with num_events = EXPIRING.getNumberEvents(branch, period):
            with num_reports = REPORTING.getNumberReporters(branch):
                with step = BRANCHES.getStep(branch):
                    if step == 4:
                        self.payout(branch, period, num_events, num_reports)
                        BRANCHES.setStep(branch, 0) # reset step
                        BRANCHES.incrementPeriod(branch)
                        return(period + 1)
                    elif step == 0:
                        EXPIRING.setTotalReputation(branch, period, REPORTING.getTotalRep(branch))
                    elif step == 1:
                        x = self.initCluster(branch, period, num_events, num_reports, 1)
                        if(x):
                            # increment 2x if it gets all done in 1st call, else go to step 2
                            BRANCHES.incrementStep(branch)
                    elif step == 2:
                        threshold = (FXP.fx_log(numEvents*2^64)*2^64/42475197863169474560)*2^64 / 32650737010465906688
                        if(threshold==0):
                            threshold = 5534023222112865280
                        # if not done, keep doing step two before incrementing the step
                        if(!CLUSTER.cluster(branch, period, num_events, num_reports, 0, threshold)):
                            return(2)
                    elif step == 3:
                        self.smooth(num_reports, num_events)
                    elif step == 4:
                        OUTCOMES.resolve(branch, period, num_events, num_reports)
                    BRANCHES.incrementStep(branch)
                    return(step + 1)

