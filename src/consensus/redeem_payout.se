# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2015 Forecast Foundation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you have questions, please contact Joey Krug (joey@augur.net) or
# Jack Peterson (jack@augur.net).

# extern whitelist.se: [addAddress:ii:s, check:i:i, checkaddr:ii:i, replaceAddress:iii:s]

import events

import expiringEvents

import reporting

import cash

import info

import payout

def payout(branch, period, num_events, num_reports, flatsize):
    # if !WHITELIST.check(msg.sender):
    #     return(-1)
    with smooth_rep = expiringEvents.getSmoothRep(branch, period, outsz=num_reports):
        with reports_mask = expiringEvents.getReportsMask(branch, period, outsz=flatsize):
            with outcomes = expiringEvents.getOutcomesFinal(branch, period, outsz=num_events):
                with reporter_payouts = payout.payout(outcomes, smooth_rep, reports_mask, num_reports, num_events, outsz=num_reports):
                    # get event ID for each event by taking the x index in the reports arrays
                    # - shoving it in reporting.events[] && getting the cooresponding ID
                    with j = 0:
                        while j < num_events:
                            with event = expiringEvents.getEvent(branch, period, j):
                                # then take outcomes_final && set each event outcome
                                # (BAD and BOND macros defined in consensus/constants.se)
                                events.setOutcome(event, outcomes[j])
                                if outcomes[j] != BAD:
                                    # return bond
                                    # Q: should the subtractCash be from the event's ID?
                                    cash.subtractCash(event, BOND)
                                    cash.addCash(info.getCreator(event), BOND)
                                else:
                                    # give event bond money to reporters
                                    cash.subtractCash(event, BOND)
                                    cash.addCash(branch, BOND)
                            j += 1
                    # - need to loop through rep holders && distribute 50% of branch fees to
                    #   reporters' cashcoin addresses
                    # - also need to take reporter_payouts && redistribute reputation in the
                    #   Reporting structure accordingly
                    with i = 0:
                        # TODO double-check that the cash in and out adds up to 0
                        while i < num_reports:
                            reporting.setRep(branch, i, fixed_multiply(reporter_payouts[i], 21000000 * ONE))
                            cash.addCash(reporting.getReporterID(branch, i), fixed_multiply(cash.balance(branch), reporter_payouts[i]))
                            i += 1
                        cash.subtractCash(branch, cash.balance(branch))
                        return(1)

inset('macros/constants.se')
inset('macros/fixed.se')
inset('macros/arrays.se')