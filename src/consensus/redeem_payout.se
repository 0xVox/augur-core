# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2015 Forecast Foundation 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you have questions, please contact Joey Krug (joey@augur.net) or
# Jack Peterson (jack@augur.net).

import events as EVENTS
import expiringEvents as EXPIRING
import reporting as REPORTING
import cash as CASH
import info as INFO
import payout as PAYOUT

def payout(branch, period, num_events, num_reports, flatsize):
    with smooth_rep = array(num_reports):
        smooth_rep = slice(EXPIRING.getSmoothRep(branch, period, outitems=num_reports), items=0, items=num_reports)
        with reports_mask = array(flatsize):
            reports_mask = slice(EXPIRING.getReportsMask(branch, period, outitems=flatsize), items=0, items=flatsize)
            with outcomes = array(num_events):
                outcomes = slice(EXPIRING.getOutcomesFinal(branch, period, outitems=num_events), items=0, items=num_events)
                with reporter_payouts = array(num_reports):
                    reporter_payouts = slice(PAYOUT.payout(outcomes, smooth_rep, reports_mask, num_reports, num_events, outitems=num_reports), items=0, items=num_reports)

                    # get event ID for each event by taking the x index in the reports arrays
                    # - shoving it in reporting.events[] and getting the corresponding ID
                    with j = 0:
                        while j < num_events:
                            with event = EXPIRING.getEvent(branch, period, j):

                                # then take outcomes_final and set each event outcome
                                # (BAD and BOND macros defined in consensus/constants.se)
                                EVENTS.setOutcome(event, outcomes[j])
                                if outcomes[j] != BAD:

                                    # return bond
                                    CASH.subtractCash(event, BOND)
                                    CASH.addCash(INFO.getCreator(event), BOND)
                                else:

                                    # give event bond money to reporters
                                    CASH.subtractCash(event, BOND)
                                    CASH.addCash(branch, BOND)
                            j += 1
                    # - need to loop through rep holders and distribute 50% of branch fees to
                    #   reporters' cashcoin addresses 
                    # - also need to take reporter_payouts and redistribute reputation in the
                    #   Reporting structure accordingly
                    EXPIRING.setReporterPayouts(branch, period, reporter_payouts)
                    with i = 0:
                        while i < num_reports:
                            REPORTING.setRep(branch, i, fixed_multiply(reporter_payouts[i], EXPIRING.getTotalReputation(branch, period)))
                            CASH.addCash(REPORTING.getReporterID(branch, i), fixed_multiply(CASH.balance(branch), reporter_payouts[i]))
                            i += 1
                        CASH.subtractCash(branch, CASH.balance(branch))
                        return(1)

inset('../../macros/constants.sm')
inset('../../macros/fixed.sm')
inset('../../macros/arrays.sm')
