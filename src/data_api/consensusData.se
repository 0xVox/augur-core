
macro Controller: 0xC001D00D
extern Controller: [lookup:[int256]:int256, checkWhitelist:[int256]:int256]

BRANCHES = Controller.lookup('branches')
extern branches: [addCurrency:[int256,int256,int256,int256]:int256, addMarketToBranch:[int256,int256]:int256, disableCurrency:[int256,int256]:int256, getBaseReporters:[int256]:int256, getBranchByNum:[int256]:int256, getBranchCurrency:[int256,int256]:int256, getBranchWallet:[int256,int256]:int256, getBranches:[]:int256[], getBranchesStartingAt:[int256]:int256[], getCreationDate:[int256]:int256, getCurrencyActive:[int256,int256]:int256, getCurrencyByContract:[int256,int256]:int256, getCurrencyRate:[int256,int256]:int256, getEventForkedOver:[int256]:int256, getForkPeriod:[int256]:int256, getForkTime:[int256]:int256, getInitialBalance:[int256,int256,int256]:int256, getMarketIDsInBranch:[int256,int256,int256]:int256[], getMinTradingFee:[int256]:int256, getMostRecentChild:[int256]:int256, getNumBranches:[]:int256, getNumCurrencies:[int256]:int256, getNumMarketsBranch:[int256]:int256, getOracleOnly:[int256]:int256, getParent:[int256]:int256, getParentPeriod:[int256]:int256, getPeriodLength:[int256]:int256, getVotePeriod:[int256]:int256, incrementPeriod:[int256]:int256, initializeBranch:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, reactivateCurrency:[int256,int256]:int256, removeLastCurrency:[int256]:int256, replaceCurrency:[int256,int256,int256,int256,int256]:int256, setBaseReporters:[int256,int256]:int256, setEventForkedOver:[int256,int256]:int256, setForkPeriod:[int256]:int256, setInitialBalance:[int256,int256,int256,int256]:int256, setMostRecentChild:[int256,int256]:int256, updateCurrencyRate:[int256,int256,int256,int256]:int256, updateNumCurrencies:[int256,int256]:int256]

inset('../macros/refund.sem')

# Storage for branch data
# branch takes a branch
    # penalized takes for a given period a user / address reported for a certain event and num of events they reported on in that period in total
    # penalizedUpTo is the latest period a user has done the penalization for
    # fees collected states whether for a given period and currency a user collected fees
    # rep collected states whether for a given period a user collected rep
    # base reporters last period is the minimum number of reporters for the last period
data branch[](period[](denominator, penalized[](event[], num, notEnoughReportsPenalized), feesCollected[][], repCollected[], feeFirst, periodBalance), penalizedUpTo[], baseReportersLastPeriod)

# refunds keeps track of subsidies for various consensus function calls paid for by the market creator or bonders
data refunds[]

# Keeps track of whether a reporter has been penalized for collusion while reporting
data slashed[][](reporter[])

def init():
    self.branch[1010101].baseReportersLastPeriod = 6

def getSlashed(branch, votePeriod, reporter):
    return(self.slashed[branch][votePeriod].reporter[reporter])

# whitelist
def setSlashed(branch, votePeriod, reporter):
    self.slashed[branch][votePeriod].reporter[reporter] = 1
    return(1)

# whitelist
def setRefund(refunder, amt):
    self.refunds[refunder] = amt
    return(1)

# whitelist
def doRefund(sender, refunder):
    if(!send(sender, self.refunds[refunder])):
        throw()
    return(1)

def getBaseReportersLastPeriod(branch):
    return(self.branch[branch].baseReportersLastPeriod)

def setBaseReportersLastPeriod(branch, amount):
    self.branch[branch].baseReportersLastPeriod = amount
    return(1)

# get whether the first fee has been claimed by a reporter yet
def getFeeFirst(branch, period):
    return(self.branch[branch].period[period].feeFirst)

# whitelist
def setFeeFirst(branch, period, val):
    self.branch[branch].period[period].feeFirst = val
    return(1)

def getPeriodBalance(branch, period):
    return(self.branch[branch].period[period].periodBalance)

# whitelist
def setPeriodBalance(branch, period, balance):
    self.branch[branch].period[period].periodBalance = balance
    return(1)

def getPenalizedUpTo(branch, sender):
    return(self.branch[branch].penalizedUpTo[sender])

# whitelist
def setPenalizedUpTo(branch, sender, period):
    self.branch[branch].penalizedUpTo[sender] = period
    return(1)

# @return fxp
def getDenominator(branch, period):
    return(self.branch[branch].period[period].denominator)

# whitelist
def increaseDenominator(branch, period, amount):
    if(self.branch[branch].period[period].denominator + amount >= self.branch[branch].period[period].denominator):
        self.branch[branch].period[period].denominator += amount
    return(1)

# whitelist
def decreaseDenominator(branch, period, amount):
    if(self.branch[branch].period[period].denominator - amount <= self.branch[branch].period[period].denominator):
        self.branch[branch].period[period].denominator -= amount
    return(1)

# @return fxp
def getFeesCollected(branch, address, period, currency):
    return(self.branch[branch].period[period].feesCollected[currency][address])

# whitelist
def setFeesCollected(branch, address, period, currency):
    self.branch[branch].period[period].feesCollected[currency][address] = 1
    return(1)

# @return fxp
def getRepCollected(branch, address, period):
    return(self.branch[branch].period[period].repCollected[address])

# whitelist
def setRepCollected(branch, address, period):
    self.branch[branch].period[period].repCollected[address] = 1
    return(1)

def getPenalized(branch, period, sender, event):
    return(self.branch[branch].period[period].penalized[sender].event[event])

# whitelist
def setPenalized(branch, period, sender, event):
    self.branch[branch].period[period].penalized[sender].event[event] = 1
    return(1)

def getPenalizedNum(branch, period, sender):
    return(self.branch[branch].period[period].penalized[sender].num)

# whitelist
def increasePenalizedNum(branch, period, sender, amount):
    self.branch[branch].period[period].penalized[sender].num += amount
    return(1)

# whitelist
def setNotEnoughPenalized(branch, address, period):
    self.branch[branch].period[period].penalized[address].notEnoughReportsPenalized = 1
    return(1)

def getNotEnoughPenalized(branch, address, period):
    return(self.branch[branch].period[period].penalized[address].notEnoughReportsPenalized)

def getRepRedistributionDone(branch, reporter):
    return(repRedistributionDone(branch, reporter))

macro repRedistributionDone($branch, $reporter):
    lastPeriodPenalized = self.branch[$branch].penalizedUpTo[$reporter]
    lastPeriod = BRANCHES.getVotePeriod($branch) - 1
    if(lastPeriod == lastPeriodPenalized):
        1
    else:
        0
