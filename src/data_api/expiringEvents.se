# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have receive a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import events as EVENTS
import info as INFO
inset('refund.se')

### This contract keeps track of data associated with reporting periods and the events + reports in them

# This keeps track of info in a period for the events in that period, it takes a branch and votePeriod as params, respectively
    # Events is 0 indexed and stores the events in a period [this allows the client to loop through and detect which events a given user should report on]
    # eventToIndex returns an event id for a given index in events
    # requiredEvents states whether a given event is required to be reported on or not [a round2 backstop or a fork event are both required]
    # subsidy is money for paying back a user for calculating the targeted num of reports for an event
    # eventWeight is number of reports on an event in a round 1 event, total rep reported on it in a backstop 1 or fork event
    # repEvent is the amount of rep that has reported on an event
    # lesserReportNum is the number of reports an event should have [the lesser of how many it can afford from fees and how many it should have due to outstanding share value]
    # numberEvents is the total number of events in a given reporting period
    # roundTwoNumEvents is the number of round 2 events in a given reporting period
    # numReqEvents is the number of events that are required to be reported on in a given reporting period
    # numberRemoved is the number of events that no longer have to be reported on in this period [a good example is an event that was resolved early successfully]
    # numEventsToReportOn is the number of events available for reporting on [not including required events] * base number of reporters per event [this is multiplied by a user's periodRepWeight to figure out how many events they should be reporting on in a given period]
    # shareValue is the value of all the outstanding shares from markets that have events expiring in this period
data periodEventInfo[][](events[], eventToIndex[], requiredEvents[], subsidy[], eventWeight[], lesserReportNum[], numberEvents, roundTwoNumEvents, numReqEvents, numberRemoved, numEventsToReportOn, shareValue)

# This keeps track of info in a period for the reporters, it takes a branch and votePeriod as params, respectively
    # Before rep is the amount of active rep a user has before any penalizations for reporting incorrectly
    # After rep is the amount of active rep a user has after all the modifications to their rep at the end of a period [it's initially equal to the before rep]
    # Period dormant rep is how much rep a user has dormant at the start of a period
    # Report hash stores the hash of a report&salt a user submitted for a given report [takes reporter, event as params]
    # Salty encrypted hash stores an encrypted concatenation of the salt and a report: it allows users to easily migrate across devices [takes reporter, event as params]
    # Report is the report a reporter submitted for a given event [takes reporter, event as params]
    # Ethics is the ethicality a reporter submitted for a given event [takes reporter, event as params]
    # numReportsSubmitted is the number of a reports a reporter has submitted for this period
    # periodRepWeight is a weighting used to calculate how many events a reporter should report on in a given period
data reporterPeriodInfo[][](beforeRep[], afterRep[], periodDormantRep[], reportHash[][], saltyEncryptedHash[][], report[][], ethics[][], numReportsSubmitted[], periodRepWeight[])

# This takes a period and event as params (e.g self.modeItems[period][event]) and stores mode data for categorical & scalar event reports
    # reportValue takes a possible reported value [say .72 in fixed point] as a key and the value is how many reports that event has, or in the case of a backstop, how much rep has reported on that event
    # currentMode keeps track of the current mode report for an event or which reportValue key has the highest value of reports/rep reported on it
    # currentModeItems is how many reports or rep reported the current mode has, which is used in determining whether there's a new mode
data modeItems[][](reportValue[], currentMode, currentModeItems)

def getSaltyEncryptedHash(branch, period, reporter, event):
    return(self.reporterPeriodInfo[branch][period].saltyEncryptedHash[reporter][event])

def setSaltyEncryptedHash(branch, period, reporter, saltyEncryptedHash, event):
    # if(!self.whitelist.check(msg.sender)):
    # 	return(-1)
    self.reporterPeriodInfo[branch][period].saltyEncryptedHash[reporter][event] = saltyEncryptedHash
    return(1)

# Refunds cost to calculate number of reports for an event
def refundCost(to, branch, period, event):
    if(!send(to, self.periodEventInfo[branch][period].subsidy[event])):
        throw()
    return(1)

def getSubsidy(branch, period, event):
    return(self.periodEventInfo[branch][period].subsidy[event])

def getPeriodRepWeight(branch, votePeriod, sender):
    return(self.reporterPeriodInfo[branch][votePeriod].periodRepWeight[sender])

def setPeriodRepWeight(branch, votePeriod, sender, value):
    self.reporterPeriodInfo[branch][votePeriod].periodRepWeight[sender] = value
    return(1)

def getReportHash(branch, period, reporter, event):
    return(self.reporterPeriodInfo[branch][period].reportHash[reporter][event])

def setEthicReport(branch, period, event, ethics, sender):
    self.reporterPeriodInfo[branch][period].ethics[sender][event] = ethics
    return(1)

def setReport(branch, period, event, report, sender):
    self.reporterPeriodInfo[branch][period].report[sender][event] = report
    return(1)

def setBeforeRep(branch, period, rep, sender):
    self.reporterPeriodInfo[branch][period].beforeRep[sender] = rep
    return(rep)

def setAfterRep(branch, period, rep, sender):
    self.reporterPeriodInfo[branch][period].afterRep[sender] = rep
    return(rep)

def setPeriodDormantRep(branch, period, rep, sender):
    self.reporterPeriodInfo[branch][period].periodDormantRep[sender] = rep
    return(rep)

def getLesserReportNum(branch, period, event):
    return(self.periodEventInfo[branch][period].lesserReportNum[event])

def getCurrentModeItems(period, event):
    return(self.modeItems[period][event].currentModeItems)

def getCurrentMode(period, event):
    return(self.modeItems[period][event].currentMode)

# returns weight of a report value for the mode
def getWeightOfReport(period, event, report):
    return(self.modeItems[period][event].reportValue[report])

def getEthicReport(branch, period, event, sender):
    return(self.reporterPeriodInfo[branch][period].ethics[sender][event])

def getReport(branch, period, event, sender):
    # if(whitelist):
    return(self.reporterPeriodInfo[branch][period].report[sender][event])

def getBeforeRep(branch, period, sender):
    return(self.reporterPeriodInfo[branch][period].beforeRep[sender])

def getAfterRep(branch, period, sender):
    return(self.reporterPeriodInfo[branch][period].afterRep[sender])

def getPeriodDormantRep(branch, period, sender):
    return(self.reporterPeriodInfo[branch][period].periodDormantRep[sender])

def getNumReportsSubmitted(branch, votePeriod, sender):
    return(self.reporterPeriodInfo[branch][votePeriod].numReportsSubmitted[sender])

def getEventWeight(branch, votePeriod, event):
    return(self.periodEventInfo[branch][votePeriod].eventWeight[event])

def getNumRoundTwo(branch, period):
    return(self.periodEventInfo[branch][period].roundTwoNumEvents)

def addRoundTwo(branch, period):
    self.periodEventInfo[branch][period].roundTwoNumEvents += 1
    return(1)

def getRequired(event, period, branch):
    return(self.periodEventInfo[branch][period].requiredEvents[event])

def getNumRequired(branch, period):
    return(self.periodEventInfo[branch][period].numReqEvents)

# Return 0 means already required
def setEventRequired(branch, period, event):
    if(!self.periodEventInfo[branch][period].requiredEvents[event]):
        self.periodEventInfo[branch][period].requiredEvents[event] = 1
        self.periodEventInfo[branch][period].numReqEvents += 1
        return(1)
    else:
        return(0)

# With this function you can get the events and report on outcomes
# @return all events in a branch and expiration period
def getEvents(branch, period):
    numEvents = self.periodEventInfo[branch][period].numberEvents
    events = array(numEvents)
    i = 0
    while i < numEvents:
        events[i] = self.periodEventInfo[branch][period].events[i]
        i += 1
    return(events: arr)

def getEventsRange(branch, period, start, end):
    numEvents = end-start
    events = array(numEvents)
    i = start
    index = 0
    while i < end:
        events[index] = self.periodEventInfo[branch][period].events[i]
        index += 1
        i += 1
    return(events: arr)

def getEventIndex(branch, period, event):
    return(self.periodEventInfo[branch][period].eventToIndex[event])

# gets number of available events to report on multiplied by base reporters per event as a minimum, not counting required or removed events
# -1: voting not started
def setNumEventsToReportOn(branch):
    # whitelist to only makeReports
    period = BRANCHES.getVotePeriod(branch)
    eventsInPeriod = self.periodEventInfo[branch][period].numberEvents
    numberOfRequiredEvents = self.periodEventInfo[branch][period].numReqEvents
    numberOfRemovedEvents = self.periodEventInfo[branch][period].numberRemoved
    self.periodEventInfo[branch][period].numEventsToReportOn = (eventsInPeriod - numberOfRequiredEvents - numberOfRemovedEvents)*BRANCHES.getBaseReporters(branch)
    return(1)

# gets number of available events to report on, not counting required events
def getNumEventsToReportOn(branch, period):
    return(self.periodEventInfo[branch][period].numEventsToReportOn)

def getShareValue(branch, expIndex):
    return(self.periodEventInfo[branch][expIndex].shareValue)

def getNumberEvents(branch, period):
    return(self.periodEventInfo[branch][period].numberEvents)

def getEvent(branch, period, eventIndex):
    return(self.periodEventInfo[branch][period].events[eventIndex])

# check that msg.sender is one of our function contracts
def addEvent(branch, futurePeriod, event, subsidy, currency, wallet):
    # if(!self.whitelist.check(msg.sender)):
    # 	return(-1)
    numberEvents = self.periodEventInfo[branch][futurePeriod].numberEvents
    self.periodEventInfo[branch][futurePeriod].events[numberEvents] = event
    self.periodEventInfo[branch][futurePeriod].eventToIndex[event] = numberEvents
    self.periodEventInfo[branch][futurePeriod].numberEvents += 1
    self.periodEventInfo[branch][futurePeriod].subsidy[event] += subsidy
    INFO.setCurrencyAndWallet(currency, wallet)
    return(1)

def deleteEvent(branch, period, event):
    i = self.periodEventInfo[branch][period].eventToIndex[event]
    self.periodEventInfo[branch][period].events[i] = 0
    self.periodEventInfo[branch][period].eventToIndex[event] = 0
    return(1)

def removeEvent(branch, period):
    self.periodEventInfo[branch][period].numberRemoved += 1
    return(1)

def getNumRemoved(branch, period):
    return(self.periodEventInfo[branch][period].numberRemoved)

def adjustPeriodShareValueOutstanding(branch, expIndex, amount):
    self.periodEventInfo[branch][expIndex].shareValue += amount
    return(1)

def setReportHash(branch, period, reporter, reportHash, event):
    # if(!self.whitelist.check(msg.sender)):
    # 	return(-1)
    self.reporterPeriodInfo[branch][period].reportHash[reporter][event] = reportHash
    return(1)

# called in case an event doesn't get reported on at all in a period
def moveEvent(branch, event):
    if(BRANCHES.getVotePeriod(branch) > EVENTS.getExpiration(event)/BRANCHES.getPeriodLength(branch) and !EVENTS.getUncaughtOutcome(event)):
        # add to next expiration period
        self.addEvent(branch, block.timestamp/BRANCHES.getPeriodLength(branch), event)
        EVENTS.setExpiration(event, block.timestamp)
        return(1)
    else:
        return(0)

def addToWeightOfReport(period, event, report, amount):
    self.modeItems[period][event].reportValue[report] += amount
    return(1)

def setCurrentMode(period, event, mode):
    self.modeItems[period][event].currentMode = mode
    return(1)

# basically setting current mode's weight
def setCurrentModeItems(period, event, modeReport):
    self.modeItems[period][event].currentModeItems = self.modeItems[period][event].reportValue[modeReport]
    return(1)

def setEventWeight(branch, votePeriod, event, num):
    self.periodEventInfo[branch][votePeriod].eventWeight[event] = num
    return(1)

def countReportAsSubmitted(branch, votePeriod, event, sender, weight):
    self.periodEventInfo[branch][votePeriod].eventWeight[event] += weight
    self.reporterPeriodInfo[branch][votePeriod].numReportsSubmitted[sender] += 1
    return(1)

def setLesserReportNum(branch, period, event, num):
    self.periodEventInfo[branch][period].lesserReportNum[event] = num
    return(1)
