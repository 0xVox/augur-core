# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

inset('refund.se')

# address -> value map of "cash [a made up subcurrency/token for testing"
data cashcoinBalances[]

# address -> address mapping of a cash address to the address that owns it
data owners[]

data withdrawInitiated[]

macro THREEDAYS: 259200

def init():
    # test initial funds
    self.cashcoinBalances[msg.sender] = 100000*ONE

# @return: cash balance of address
def balance(address):
    refund()
    return(self.cashcoinBalances[address])

# A random market could have a balance, and when that account was created/first used in the subcurrency, it'd have whatever contract that created it be the owner, so for example...
# needs to be called when making a market, branch, etc. or a new cash user acc.
def initiateOwner(account):
    if(!self.owners[account] and !self.cashcoinBalances[account]):
        self.owners[account] = msg.sender
        return(1)
    else:
        return(0)

# Sends cash from a user to a receiver
# @return value of cash sent; fail is 0
def sendFrom(recver, value, from):
    self.cashcoinBalances[msg.sender] += msg.value * ONE / WEITOETH
    if(!self.owners[msg.sender] and from==msg.sender):
        self.owners[msg.sender] = msg.sender
    # sendFrom would check if the sender had an owner, if it did, then it'd check and see if the msg.sender was the owner.
    # it's not owned by a regular account nor a contract owned account (i.e. a market's hash from markets.)
    if(from!=tx.origin and msg.sender!=self.owners[from] and msg.sender!=from):
        return(0)
    # if(!self.owners[recver]):
    #    return(0)
    senderBalance = self.cashcoinBalances[from]
    if(senderBalance >= value and value > 0):
        self.cashcoinBalances[from] -= value
        self.cashcoinBalances[recver] += value
        return(value)
    else:
        return(0)

# make sure only coming from specific contracts
def subtractCash(ID, amount):
    # if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    # if(msg.sender!=self.owners[ID] and tx.origin!=self.owners[ID]):
    #    return(0)
    self.cashcoinBalances[ID] -= amount
    return(1)

def addCash(ID, amount):
    # if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    self.cashcoinBalances[ID] += amount
    return(1)

def setCash(address, balance):
    # if !self.whitelist.check(msg.sender):
    #    return(-1)
    self.cashcoinBalances[address] = balance
    return(1)

def depositEther():
    self.cashcoinBalances[msg.sender] += msg.value * ONE / WEITOETH
    return(msg.value)

# Withdraw ether to an address
# Returns 2 if withdrawal is initiated [then must wait 3 days]
# Returns 1 if withdrawal is successful
# Errors:
    # 0: Not enough money
    # -1: Value less than or equal to 0
    # -2: 3 day withdrawal window isn't up
def withdrawEther(to, value):
    refund()
    if(!self.withdrawInitiated[msg.sender]):
        self.withdrawInitiated[msg.sender] = block.timestamp
        return(2)
    if(value <= 0):
        return(-1)
    if((block.timestamp - self.withdrawInitiated[msg.sender])<THREEDAYS):
        return(-2)
    if(self.cashcoinBalances[msg.sender] >= value * ONE / WEITOETH):
        self.cashcoinBalances[msg.sender] -= value * ONE / WEITOETH
        self.withdrawInitiated[msg.sender] = 0
        send(to, value)
        return(1)
    else:
        return(0)
