import branches as BRANCHES
import events as EVENTS
import expiringEvents as EXPEVENTS
import fxpFunctions as FXP
import reporting as REPORTING
import makeReports as MAKEREPORTS
inset('refund.se')

macro ONEPOINTTWO: 22136092888451461120

macro POINTZEROONE: 184467440737095520

# Calculates what a reporter should have to get below as a target to report on any given event
# eventsExpected == (numberReportEstimate*((reporterList[n]/totalRep)**1.2))
    # exp(1.2*ln(repbal)) / exp(1.2*ln(totalrep)) is == (reporterList[n]/totalRep)**1.2
    # a**b=exp(b*ln(a))=e**(b*ln(a)).
def calculateReportingThreshold(branch, event, votePeriod, sender):
    callstackCheck()
    repConstant = EXPEVENTS.getPeriodRepWeight(branch, votePeriod, sender)
    if(!repConstant):
        repConstant = FXP.fx_exp(ONEPOINTTWO * FXP.fx_log(REPORTING.getRepBalance(branch, sender)) / ONE) * 2 ** 64 / FXP.fx_exp(ONEPOINTTWO * FXP.fx_log(REPORTING.getActiveRep(branch)) / ONE)
        numEventsAvailableToReportOn = EXPEVENTS.getNumEventsToReportOn(branch, votePeriod)
        expectedEventsForReporter = repConstant * numEventsAvailableToReportOn
        # this includes required events
        eventsInPeriod = EXPEVENTS.getNumberEvents(branch, period) - EXPEVENTS.getNumRemoved(branch, votePeriod)
        numRequiredEvents = EXPEVENTS.getNumRequired(branch, votePeriod)
        # ensures low number of events with highly concentrated rep edge case still get reported on
        if(repFraction >= POINTZEROONE):
            minimum = min(30 - numRequiredEvents, eventsInPeriod - numRequiredEvents)
            if(expectedEventsForReporter / ONE < minimum):
                expectedEventsForReporter = minimum * ONE
                repConstant = expectedEventsForReporter / numEventsAvailableToReportOn
        EXPEVENTS.setPeriodRepWeight(branch, votePeriod, sender, repConstant)
    # 1 is 2**192 here, lesserreportnum, repconstant, and one are all base 2**64
    reportingThreshold = EXPEVENTS.getLesserReportNum(branch, votePeriod, event) * repConstant * ONE
    return(reportingThreshold)

# Gets events a reporter should report on
def getEventsToReportOn(branch, period, sender, start):
    callstackCheck()
    numEvents = EXPEVENTS.getNumberEvents(branch, period)
    events = array(numEvents * 2)
    i = 0
    n = start
    while(i < numEvents * 2):
        events[i] = EXPEVENTS.getEvent(branch, period, n)
        # calculate report target for event here if not done for purposes of computing this
        if(!EXPEVENTS.getLesserReportNum(branch, period, events[i])):
            MAKEREPORTS.calculateReportTargetForEvent(branch, events[i], period, msg.sender)
        reportingThreshold = self.calculateReportingThreshold(branch, events[i], period, sender)
        x = array(1)
        x[0] = sender + events[i]
        # do abs then mult by 2 to ensure pos. and between 0 and 1
        shaHash = sha3(x, items = 1)
        shaHash = (abs(shaHash) / ONE) * 2
        if((shaHash < reportingThreshold or EXPEVENTS.getRequired(events[i], period, branch)) and !EVENTS.getOutcome(events[i])):
            events[i + 1] = 1
        else:
            events[i + 1] = 0
        i += 2
        n += 1
    return(events: arr)

# Gets whether a reporter is able to report on a given event or not
def getEventCanReportOn(branch, period, reporter, event):
    callstackCheck()
    reportingThreshold = self.calculateReportingThreshold(branch, event, period, reporter)
    x = array(1)
    x[0] = reporter + event
    # do abs then mult by 2 to ensure pos. and between 0 and 1
    shaHash = sha3(x, items = 1)
    shaHash = (abs(shaHash) / ONE) * 2
    if(shaHash < reportingThreshold or EXPEVENTS.getRequired(event, period, branch)):
        return(1)
    else:
        return(0)

# In the rare possibility that no one gets randomly selected to report on a market in a given period, on the last day, we can change the sha3 threshold, UI calls this.
def setReportingThreshold(event):
    callstackCheck()
    # first check is if event expDate is in the current vote period and second is if blockNum is near expiration of commit period (within 24 hr.)
    # final check is if no reports on event
    # so if in 24 hr we'd be in the next half of the vote period, we're within 24 hr of the end of this one
    branch = EVENTS.getEventBranch(event)
    periodLength = BRANCHES.getPeriodLength(branch)
    votePeriod = BRANCHES.getVotePeriod(branch)
    if(votePeriod == EVENTS.getExpiration(event) / periodLength and (((block.timestamp + TWENTYFOURHR) % periodLength) > periodLength / 2) and !EVENTS.getUncaughtOutcome(event)):
        EVENTS.setThreshold(event, 2 ** 192)
        return(1)
    else:
        return(0)

macro abs($a):
    if($a < 0):
        $a = -$a
    $a
