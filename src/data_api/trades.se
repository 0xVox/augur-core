inset('refund.se')

### Storage of all data associated with trades

# reporterID is index
data tradeCommits[](hash, block)
# tradeID is index
data trades[](id, type, market, amount, price, owner, block, outcome)

event logAddTx(market:indexed, sender:indexed, type, fxpPrice, fxpAmount, outcome, tradeid)

def makeTradeHash(fxpMaxValue, fxpMaxAmount, tradeIDs: arr):
    refund()
    i = 0
    trades = 0
    while(i < len(tradeIDs)):
        trades += tradeIDs[i]
        i += 1
    tradeInfo = array(3)
    tradeInfo[0] = trades
    tradeInfo[1] = fxpMaxAmount
    tradeInfo[2] = fxpMaxValue
    tradeHash = sha3(tradeInfo, items = 3)
    return(tradeHash)

def commitTrade(hash):
    refund()
    self.tradeCommits[msg.sender].hash = hash
    self.tradeCommits[msg.sender].block = block.number
    return(1)

def checkHash(tradeHash, sender):
    callstackCheck()
    if(self.tradeCommits[sender].hash != tradeHash or block.number <= self.tradeCommits[sender].block):
        return(-1)
    else:
        return(1)

def saveTrade(tradeID, type, market, amount, price, sender, outcome):
    callstackCheck()
    self.trades[tradeID].id = tradeID
    self.trades[tradeID].type = type
    self.trades[tradeID].market = market
    self.trades[tradeID].amount = amount
    self.trades[tradeID].price = price
    self.trades[tradeID].owner = sender
    self.trades[tradeID].block = block.number
    self.trades[tradeID].outcome = outcome
    return(1)

def getTrade(id):
    callstackCheck()
    trade = array(8)
    trade[0] = self.trades[id].id
    trade[1] = self.trades[id].type
    trade[2] = self.trades[id].market
    trade[3] = self.trades[id].amount
    trade[4] = self.trades[id].price
    trade[5] = self.trades[id].owner
    trade[6] = self.trades[id].block
    trade[7] = self.trades[id].outcome
    if(trade):
        return(trade: arr)
    return([0]: arr)

def removeTrade(id):
    callstackCheck()
    self.trades[id].id = 0
    self.trades[id].type = 0
    self.trades[id].market = 0
    self.trades[id].amount = 0
    self.trades[id].price = 0
    self.trades[id].owner = 0
    self.trades[id].block = 0
    self.trades[id].outcome = 0
    return(1)

def fillTrade(tradeID, fill):
    callstackCheck()
    self.trades[tradeID].amount -= fill
    return(1)

def getAmount(id):
    callstackCheck()
    return(self.trades[id].amount)

def getID(tradeID):
    callstackCheck()
    return(self.trades[tradeID].id)

def getPrice(id):
    callstackCheck()
    return(self.trades[id].price)
