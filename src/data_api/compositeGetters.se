# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import info as INFO
import events as EVENTS
import branches as BRANCHES
import trades as TRADES
import markets as MARKETS
inset('refund.se')

macro TRADE_FIELDS: 8
macro EVENTS_FIELDS: 6
macro OUTCOMES_FIELDS: 2
macro WINNING_OUTCOMES_FIELDS: 8
macro BASE_FIELDS: 17

def getOrderBook(market):
    numTrades = MARKETS.get_total_trades(market)
    trades = MARKETS.get_trade_ids(market, outitems=numTrades)
    orderBook = array(TRADE_FIELDS*numTrades)
    i = 0
    while i < numTrades:
        tradeInfo = TRADES.get_trade(trades[i], outitems=TRADE_FIELDS)
        j = 0
        while j < 8:
            orderBook[8*i + j] = tradeInfo[j]
            j += 1
        i += 1
    return(orderBook:arr)

def getMarketInfo(market):
    index = BASE_FIELDS
    descriptionLength = INFO.getDescriptionLength(market)
    numEvents = MARKETS.getNumEvents(market)
    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    marketInfo = array(BASE_FIELDS + numEvents*EVENTS_FIELDS + numOutcomes*OUTCOMES_FIELDS + WINNING_OUTCOMES_FIELDS + descriptionLength + 1)
    marketInfo[0] = market
    # marketInfo[1] = MARKETS.getCurrentParticipantNumber(market)
    marketInfo[2] = MARKETS.getMakerFees(market)
    # marketInfo[3] = MARKETS.getParticipantNumber(market, msg.sender)
    marketInfo[4] = numOutcomes
    marketInfo[5] = MARKETS.getTradingPeriod(market)
    marketInfo[6] = MARKETS.getTradingFee(market)
    marketInfo[7] = MARKETS.getBranch(market)
    marketInfo[8] = numEvents
    marketInfo[9] = MARKETS.getCumScale(market)
    marketInfo[10] = MARKETS.getCreationTime(market)
    marketInfo[11] = MARKETS.getVolume(market)
    marketInfo[12] = INFO.getCreationFee(market)
    marketInfo[13] = INFO.getCreator(market)
    tags = slice(MARKETS.returnTags(market, outitems=3), items=0, items=3)
    marketInfo[14] = tags[0]
    marketInfo[15] = tags[1]
    marketInfo[16] = tags[2]

    # gather event(s) info:
    # [event, expirationDate, outcome, minValue, maxValue, numOutcomes]
    events = slice(MARKETS.getMarketEvents(market, outitems=numEvents), items=0, items=numEvents)
    i = 0
    while i < numEvents:
        eventInfo = EVENTS.getEventInfo(events[i], outitems=EVENTS_FIELDS)
        marketInfo[index + i*EVENTS_FIELDS] = events[i]
        j = 1
        while j < EVENTS_FIELDS:
            marketInfo[index + i*EVENTS_FIELDS + j] = eventInfo[j]
            j += 1
        i += 1
    index += numEvents*EVENTS_FIELDS

    # gather outcomes info: [sharesPurchased, price], winningOutcomes
    # (price of outcome = last trade)
    numTrades = MARKETS.get_total_trades(market)
    trades = MARKETS.get_trade_ids(market, outitems=numTrades)
    k = 0
    while k < numOutcomes:
        marketInfo[index + k*OUTCOMES_FIELDS] = MARKETS.getSharesPurchased(market, k + 1)
        i = 0
        marketInfo[index + k*OUTCOMES_FIELDS + 1] = MARKETS.getLastOutcomePrice(market, k + 1)
        k += 1
    index += numOutcomes*OUTCOMES_FIELDS
    winningOutcomes = slice(MARKETS.getWinningOutcomes(market, outitems=8), items=0, items=8)
    k = 0
    while k < WINNING_OUTCOMES_FIELDS:
        marketInfo[index + k] = winningOutcomes[k]
        k += 1
    index += WINNING_OUTCOMES_FIELDS

    # append description character codes
    marketInfo[index] = descriptionLength
    index += 1
    description = INFO.getDescription(market, outchars=descriptionLength)
    c = 0
    while c < descriptionLength:
        marketInfo[index + c] = getch(description, c)
        c += 1
    return(marketInfo: arr)

def batchGetMarketInfo(markets: arr):
    numMarkets = len(markets)
    totalLength = 0
    marketInfoLength = array(numMarkets)
    i = 0
    while i < numMarkets:
        market = markets[i]
        descriptionLength = INFO.getDescriptionLength(market)
        numEvents = MARKETS.getNumEvents(market)
        numOutcomes = MARKETS.getMarketNumOutcomes(market)
        marketInfoLength[i] = BASE_FIELDS + numEvents*EVENTS_FIELDS + numOutcomes*OUTCOMES_FIELDS + WINNING_OUTCOMES_FIELDS + descriptionLength + 2
        totalLength += marketInfoLength[i]
        i += 1
    marketsInfo = array(totalLength)
    index = 0
    i = 0
    while i < numMarkets:
        marketInfo = self.getMarketInfo(markets[i], outitems=marketInfoLength[i] - 1)
        marketsInfo[index] = marketInfoLength[i]
        j = 0
        while j < marketInfoLength[i] - 1:
            marketsInfo[index + j + 1] = marketInfo[j]
            j += 1
        index += marketInfoLength[i]
        i += 1
    return(marketsInfo: arr)

def getMarketsInfo(branch, offset, numMarketsToLoad):
    numMarkets = BRANCHES.getNumMarketsBranch(branch)
    if numMarketsToLoad == 0:
        numMarketsToLoad = numMarkets
    markets = slice(BRANCHES.getMarketsInBranch(branch, outitems=numMarkets), items=0, items=numMarkets)
    totalLen = numMarketsToLoad*11
    m = 0
    while m < numMarketsToLoad:
        totalLen += INFO.getDescriptionLength(markets[m + offset])
        m += 1
    marketsInfo = array(totalLen + 1)
    m = 0
    c = 1
    totalMarkets = min(numMarketsToLoad, numMarkets)
    marketsInfo[0] = totalMarkets
    while m < totalMarkets:
        market = markets[m + offset]
        descriptionLength = INFO.getDescriptionLength(market)
        marketsInfo[c] = 11 + descriptionLength
        marketsInfo[c + 1] = market
        marketsInfo[c + 2] = MARKETS.getTradingPeriod(market)
        marketsInfo[c + 3] = MARKETS.getTradingFee(market)
        marketsInfo[c + 4] = MARKETS.getCreationTime(market)
        marketsInfo[c + 5] = MARKETS.getVolume(market)
        tags = slice(MARKETS.returnTags(market, outitems=3), items=0, items=3)
        marketsInfo[c + 6] = tags[0]
        marketsInfo[c + 7] = tags[1]
        marketsInfo[c + 8] = tags[2]
        marketsInfo[c + 9] = MARKETS.getLastExpDate(market)
        marketsInfo[c + 10] = MARKETS.getMakerFees(market)
        description = INFO.getDescription(markets[m + offset], outchars=descriptionLength)
        c += 11
        d = 0
        while d < descriptionLength:
            marketsInfo[c] = getch(description, d)
            c += 1
            d += 1
        m += 1
    return(marketsInfo: arr)
