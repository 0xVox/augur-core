
macro Controller: 0xC001D00D
extern Controller: [lookup:[int256]:int256, checkWhitelist:[int256]:int256]

inset('refund.se')

# Keeps track of data for round two backstop [where everyone reports on something] using event as the index
    # final is whether an event is final for the round 2 backstop
    # bondReturned is whether the bond principle has been returned
    # bondPaid is how much on top of the bond principle has been paid to the bond poster
    # refund is subsidy to pay for round 2 event resolution function call
    # bondPoster is the account which posted the bond
    # original ethicality, outcome, and voteperiod specify the first round of consensus values for ethicality, outcome, and voteperiod, respectively
    # roundTwo states whether an event is a round two event
data roundTwo[](roundTwo, originalVotePeriod, originalOutcome, originalEthicality, final, bondPoster, bondReturned, bondPaid, refund, disputedOverEthics)

# Keeps track of data for the forking backstop [wherein the network is forked into two sets of rep] using event as the index
    # moved is used for stating whether an event has been moved to the winning fork
    # bondPaid is how much on top of the bond principle has been paid to the bond poster
    # bondAmount is the amount of the bond
    # bondPoster is the account which posted the bond
    # forkedOverEthicality states whether the event was forked due to controversy of ethicality
    # originalBranch is the branch the event was originally on
data forking[](bondPoster, bondAmount, forkedOverEthicality, bondPaid, originalBranch, moved)

# Given a branch and a forkPeriod it states which fork the winner was
data resolved[][]

def getDisputedOverEthics(event):
    return(self.roundTwo[event].disputedOverEthics)

def setDisputedOverEthics(event):
    self.roundTwo[event].disputedOverEthics = 1
    return(1)

def setRoundTwoRefund(event, amt):
    self.roundTwo[event].refund = amt
    return(1)

def doRoundTwoRefund(sender, event):
    if(!send(sender, self.roundTwo[event].refund)):
        throw()
    return(1)

def setForkBondPoster(event, poster):
    self.forking[event].bondPoster = poster
    return(1)

def getForkBondPoster(event):
    return(self.forking[event].bondPoster)

def setForkedOverEthicality(event):
    self.forking[event].forkedOverEthicality = 1
    return(1)

def getForkedOverEthicality(event):
    return(self.forking[event].forkedOverEthicality)

def adjForkBondPaid(event, amount):
    self.forking[event].bondPaid += amount
    return(1)

# @return fxp
def getForkBondPaid(event):
    return(self.forking[event].bondPaid)

# sets bond amount for a fork bond
def setBondAmount(event, amount):
    self.forking[event].bondAmount = amount
    return(1)

# gets bond amount for a fork bond
# @return fxp
def getBondAmount(event):
    return(self.forking[event].bondAmount)

def setOriginalBranch(event, branch):
    self.forking[event].originalBranch = branch
    return(1)

def getOriginalBranch(event):
    return(self.forking[event].originalBranch)

def setMoved(event):
    self.forking[event].moved = 1
    return(1)

def getMoved(event):
    return(self.forking[event].moved)

def setResolved(branch, forkPeriod, winner):
    self.resolved[branch][forkPeriod] = winner
    return(1)

def getResolved(branch, forkPeriod):
    return(self.resolved[branch][forkPeriod])

# gets how much of round 2 bond has been paid back
# @return fxp
def getBondPaid(event):
    return(self.roundTwo[event].bondPaid)

# increases how much of round 2 bond has been paid back
def increaseBondPaid(event, amount):
    if(amount + self.roundTwo[event].bondPaid < self.roundTwo[event].bondPaid):
        throw()
    self.roundTwo[event].bondPaid += amount
    return(1)

# whether a round 2 bond's principle has been returned
def getBondReturned(event):
    return(self.roundTwo[event].bondReturned)

def setBondReturned(event):
    self.roundTwo[event].bondReturned = 1
    return(1)

def getRoundTwo(event):
    refund()
    return(self.roundTwo[event].roundTwo)

def setRoundTwo(event, roundTwo):
    self.roundTwo[event].roundTwo = roundTwo
    return(1)

def getBondPoster(event):
    return(self.roundTwo[event].bondPoster)

def setBondPoster(event, bondPoster):
    self.roundTwo[event].bondPoster = bondPoster
    return(1)

# whether a round 2 event is final
def getFinal(event):
    return(self.roundTwo[event].final)

def setFinal(event):
    self.roundTwo[event].final = 1
    return(1)

def getOriginalOutcome(event):
    return(self.roundTwo[event].originalOutcome)

def setOriginalOutcome(event, originalOutcome):
    self.roundTwo[event].originalOutcome = originalOutcome
    return(1)

def getOriginalEthicality(event):
    return(self.roundTwo[event].originalEthicality)

def setOriginalEthicality(event, ethicality):
    self.roundTwo[event].originalEthicality = ethicality
    return(1)

def getOriginalVotePeriod(event):
    return(self.roundTwo[event].originalVotePeriod)

def setOriginalVotePeriod(event, period):
    self.roundTwo[event].originalVotePeriod = period
    return(1)
