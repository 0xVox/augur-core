# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [addToWhitelist:[int256]:int256, assertIsWhitelisted:[int256]:int256, assertOnlySpecifiedCaller:[int256,int256]:_, changeMode:[int256]:int256, emergencyStop:[]:int256, getMode:[]:int256, getOwner:[]:int256, lookup:[int256]:int256, onlyInEmergency:[]:_, release:[]:int256, removeFromWhitelist:[int256,int256]:int256, setValue:[int256,int256]:int256, stopInEmergency:[]:_, suicide:[int256,int256,int256]:int256, switchModeSoOnlyEmergencyStopsAndEscapeHatchesCanBeUsed:[]:_, transferOwnership:[int256,int256,int256,int256]:int256, updateController:[int256,int256]:int256]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256, setController:[address]:int256, suicideFunds:[address]:_]

ORDERS = self.controller.lookup('orders')
extern orders: [addOrderToMarket:[int256,int256]:int256, cancelOrderLog:[int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, checkHash:[int256,int256]:int256, commitOrder:[int256]:int256, completeSetsLog:[int256,int256,int256,int256,int256,int256]:int256, fillOrder:[int256,int256,int256,int256]:int256, getAmount:[int256]:int256, getID:[int256]:int256, getLastOrder:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getOrder:[int256]:int256[], getOrderIDs:[int256]:int256[], getOrderOwner:[int256]:int256, getPrevID:[int256,int256]:int256, getPrice:[int256]:int256, getTotalOrders:[int256]:int256, getType:[int256]:int256, getVolume:[int256]:int256, makeOrderHash:[int256,int256,int256]:int256, modifyMarketVolume:[int256,int256]:int256, removeOrder:[int256]:int256, removeOrderFromMarket:[int256,int256]:int256, saveOrder:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, setController:[address]:int256, setPrice:[int256,int256,int256]:int256, suicideFunds:[address]:_, takeAskOrderLog:[address,address,address,int256,uint256,address,uint256,uint256,uint256,uint256]:int256, takeBidOrderLog:[address,address,address,int256,uint256,address,uint256,uint256,uint256,uint256,uint256]:int256]

TAKEORDER = self.controller.lookup('takeOrder')
extern takeOrder: [publicTakeOrder:[address,uint256]:uint256, setController:[address]:int256, suicideFunds:[address]:_, takeOrder:[address,address,uint256]:uint256]

MAKEORDER = self.controller.lookup('makeOrder')
extern makeOrder: [makeOrder:[address,uint256,uint256,int256,address,uint256,address,address,int256]:int256, placeAsk:[address,uint256,int256,address,uint256]:int256[], placeBid:[address,uint256,int256,address,uint256]:int256[], publicMakeOrder:[uint256,uint256,int256,address,uint256,address,address,int256]:int256, setController:[address]:int256, suicideFunds:[address]:_]

inset('../macros/assertZeroValue.sem')

data controller

# Trade types
macro BID: 1
macro ASK: 2

# Minimum gas needed to execute the make and/or take functions
macro MINIMUM_GAS_NEEDED_TO_MAKE_ORDER: 282556
macro MINIMUM_GAS_NEEDED_TO_TAKE_ORDER: 316476

def init():
    self.controller = 0x0

# @public
# @return fxp
def publicBuy(market: address, outcome: uint256, fxpAmount: uint256, fxpPrice, tradeGroupID):
    assertZeroValue()
    MUTEX.acquire()
    self.controller.stopInEmergency()
    output = self.buy(msg.sender, market, outcome, fxpAmount, fxpPrice, tradeGroupID)
    MUTEX.release()
    return(output: uint256)

# @public
# @return fxp
def publicSell(market: address, outcome: uint256, fxpAmount: uint256, fxpPrice, tradeGroupID):
    assertZeroValue()
    MUTEX.acquire()
    self.controller.stopInEmergency()
    output = self.sell(msg.sender, market, outcome, fxpAmount, fxpPrice, tradeGroupID)
    MUTEX.release()
    return(output: uint256)

# Match an order with the best bid or ask.
# @public
# @return fxp
def publicTakeBestOrder(type: uint256, market: address, outcome: uint256, fxpAmount: uint256, fxpPrice):
    assertZeroValue()
    MUTEX.acquire()
    self.controller.stopInEmergency()
    fxpAmountRemaining = self.takeBestOrder(msg.sender, type, market, outcome, fxpAmount, fxpPrice)
    MUTEX.release()
    return(fxpAmountRemaining: uint256)

# Take ask orders from the head of the order list while prices are below the limit price; then make.
# @internal
# @return fxp
def buy(sender: address, market: address, outcome: uint256, fxpAmount: uint256, fxpPrice, tradeGroupID):
    assertZeroValue()
    self.controller.assertIsWhitelisted(msg.sender)
    return(self.trade(sender, BID, market, outcome, fxpAmount, fxpPrice, tradeGroupID): uint256)

# Take bid orders from the head of the order list while prices are above the limit price; then make.
# @internal
# @return fxp
def sell(sender: address, market: address, outcome: uint256, fxpAmount: uint256, fxpPrice, tradeGroupID):
    assertZeroValue()
    self.controller.assertIsWhitelisted(msg.sender)
    return(self.trade(sender, ASK, market, outcome, fxpAmount, fxpPrice, tradeGroupID): uint256)

# Take orders from the head of the order list while prices are better than the limit price; then make.
# @internal
# @return fxp
def trade(sender: address, type: uint256, market: address, outcome: uint256, fxpAmount: uint256, fxpPrice, tradeGroupID):
    assertZeroValue()
    self.controller.assertIsWhitelisted(msg.sender)
    if(type == BID):
        matchingType = ASK
    else:
        matchingType = BID
    fxpAmount = self.takeBestOrder(sender, matchingType, market, outcome, fxpAmount, fxpPrice)
    if(fxpAmount > 0 and msg.gas >= MINIMUM_GAS_NEEDED_TO_MAKE_ORDER):
        MAKEORDER.makeOrder(sender, type, fxpAmount, fxpPrice, market, outcome, 0, 0, tradeGroupID)
        return(0: uint256)
    return(fxpAmount: uint256)

# @internal
# @return fxp
def takeBestOrder(sender: address, type: uint256, market: address, outcome: uint256, fxpAmount: uint256, fxpPrice):
    assertZeroValue()
    self.controller.assertIsWhitelisted(msg.sender)
    orderID = ORDERS.getBestOrderID(type, market, outcome)
    while(orderID != 0 and fxpAmount > 0 and msg.gas >= MINIMUM_GAS_NEEDED_TO_TAKE_ORDER):
        fxpOrderPrice = ORDERS.getPrice(orderID, type, market, outcome)
        if(type == BID):
            isAcceptablePrice = fxpOrderPrice >= fxpPrice
        else:
            isAcceptablePrice = fxpOrderPrice <= fxpPrice
        if(isAcceptablePrice):
            orderOwner = ORDERS.getOrderOwner(orderID, type, market, outcome)
            nextOrderID = ORDERS.getWorseOrderID(orderID, type, market, outcome)
            if(orderOwner != sender):
                fxpAmount = TAKEORDER.takeOrder(sender, orderID, type, market, outcome, fxpAmount)
            orderID = nextOrderID
        else:
            orderID = 0
    return(fxpAmount: uint256)

# @controller
def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

# @controller
def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)
