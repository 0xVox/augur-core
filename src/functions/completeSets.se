# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import expiringEvents as EXPEVENTS
import cash as CASH
import markets as MARKETS
inset('refund.se')

# Buys fxpAmount of every outcome
# cost 850k gas
# Errors:
    # 0: invalid market/doesn't exist
    # -1: oracle only branch [no trading allowed]
    # -2: not enough money
def buyCompleteSets(market, fxpAmount):
    refund()
    branch = MARKETS.getBranch(market)
    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    cumScale = MARKETS.getCumScale(market)
    cost = fxpAmount*cumScale/ONE
    if(!MARKETS.getCreationTime(market)):
        return(0)
    if(BRANCHES.getOracleOnly(branch)):
        return(-1)
    # send money from user acc. to market address/account
    if(!CASH.sendFrom(market, cost, msg.sender)):
        return(-2)
    n = 1
    # send shares of the event to user address and increment the number issued in the market for each outcome
    while n <= numOutcomes:
        MARKETS.modifyShares(market, n, fxpAmount)
        MARKETS.modifyParticipantShares(market, msg.sender, n, fxpAmount, 0)
        n += 1
    # if still before voting period has started count it in the share value for the period and market to target # of reporters to be higher in markets w/ more outstanding value
    if(BRANCHES.getVotePeriod(branch) < MARKETS.getTradingPeriod(market)):
        MARKETS.modifySharesValue(market, fxpAmount*cumScale/ONE)
        EXPEVENTS.adjustPeriodShareValueOutstanding(branch, MARKETS.getTradingPeriod(market), fxpAmount*cumScale/ONE)
    return(1)

# Sells fxpAmount of every outcome [if user owns it]
# cost 850k gas
# Errors:
    # -2: trader doesn't exist
    # -3: user doesn't own enough shares
def sellCompleteSets(market, fxpAmount):
    refund()
    branch = MARKETS.getBranch(market)
    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    cumScale = MARKETS.getCumScale(market)
    cost = fxpAmount*cumScale/ONE
    n = 1
    while n <= numOutcomes:
        if(MARKETS.getParticipantSharesPurchased(market, msg.sender, n) < fxpAmount):
            return(-3)
        n += 1
    n = 1
    # Takes shares away from participant and decreases the fxpAmount issued in the market since we're exchanging complete sets
    while n <= numOutcomes:
        MARKETS.modifyShares(market, n, -fxpAmount)
        MARKETS.modifyParticipantShares(market, msg.sender, n, -fxpAmount, 0)
        n += 1
    # if still before voting period has started count it in the share value for the period and market to target # of reporters to be higher in markets w/ more outstanding value
    if(BRANCHES.getVotePeriod(branch)<MARKETS.getTradingPeriod(market)):
        MARKETS.modifySharesValue(market, -fxpAmount*cumScale/ONE)
        EXPEVENTS.adjustPeriodShareValueOutstanding(branch, MARKETS.getTradingPeriod(market), -fxpAmount*cumScale/ONE)
    # send funds from the market to the user acc.
    CASH.subtractCash(market, cost)
    CASH.addCash(msg.sender, cost)
    return(1)
