# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import expiringEvents as EXPEVENTS
import cash as CASH
import markets as MARKETS
inset('refund.se')

# Buys amount of every outcome
# cost 850k gas
# Errors:
    # 0: invalid market
    # -3: not enough money
def buyCompleteSets(market, amount):
    refund()
    if(!MARKETS.getCreationTime(market)):
        return(0)
    branch = MARKETS.getBranchID(market)
    if(BRANCHES.getOracleOnly(branch)):
        return(-1)
    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    cumScale = MARKETS.getCumScale(market)
    cost = amount*cumScale/ONE
    if(CASH.balance(msg.sender) < cost):
        return(-3)
    participantNumber = MARKETS.getParticipantNumber(market, msg.sender)
    # if participant doesn't exist in market, add them
    if(msg.sender != MARKETS.getParticipantID(market, participantNumber)):
        participantNumber = MARKETS.addParticipant(market, msg.sender)
    i = 1
    # send shares of the event to user address
    while i <= numOutcomes:
        MARKETS.modifyShares(market, i, amount)
        MARKETS.modifyParticipantShares(market, participantNumber, i, amount, 0)
        i += 1
    if(BRANCHES.getVotePeriod(branch)<MARKETS.getTradingPeriod(market)):
        MARKETS.modifySharesValue(market, amount*cumScale/ONE)
        EXPEVENTS.adjustPeriodShareValueOutstanding(branch, MARKETS.getTradingPeriod(market), amount*cumScale/ONE)
    # send money from user acc. to market address/account
    CASH.sendFrom(market, cost, msg.sender)
    return(1)

# Sells amount of every outcome [if user owns it]
# cost 850k gas
# Errors:
    # -1: oracle only / no trading branch
    # -2: trader doesn't exist
    # -3: user doesn't own enough shares 
def sellCompleteSets(market, amount):
    refund()
    participantNumber = MARKETS.getParticipantNumber(market, msg.sender)
    branch = MARKETS.getBranchID(market)
    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    cumScale = MARKETS.getCumScale(market)
    cost = amount*cumScale/ONE
    
    if(BRANCHES.getOracleOnly(branch)):
        return(-1)
    if(MARKETS.getParticipantID(market, participantNumber) != msg.sender):
        return(-2)
    n = 1
    while n <= numOutcomes:
        if(MARKETS.getParticipantSharesPurchased(market, participantNumber, i) < amount):
            return(-3)
        n += 1
    n = 1

    # Takes shares away from participant and decreases the amount issued in the market since we're exchanging complete sets
    while n <= numOutcomes:
        MARKETS.modifyShares(market, i, -amount)
        MARKETS.modifyParticipantShares(market, participantNumber, i, -amount, 0)
        n += 1
    # if still before voting period has started count it in the share value for the period and market to target # of reporters to be higher in markets w/ more outstanding value
    if(BRANCHES.getVotePeriod(branch)<MARKETS.getTradingPeriod(market)):
        MARKETS.modifySharesValue(market, -amount*cumScale/ONE)
        EXPEVENTS.adjustPeriodShareValueOutstanding(branch, MARKETS.getTradingPeriod(market), -amount*cumScale/ONE)
    # send funds from the market to the user acc.
    CASH.subtractCash(market, cost)
    CASH.addCash(msg.sender, cost)
    return(1)