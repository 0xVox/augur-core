import branches as BRANCHES
import reporting as REPORTING
import expiringEvents as EXPEVENTS
import consensusData as CONSENSUS

inset('refund.se')

event penalizationCaughtUp(branch: indexed, sender: indexed, penalizedFrom, penalizedUpTo, repChange, newRepBalance, timestamp)

macro POINTNINE: 900000000000000000

# Call when a user who hasn't reported for a while [and had their rep active] and wants to start again and needs to catch up on penalizations
# Errors:
    # -1: not in first half of reporting period
    # -2: doesn't need to be penalized/caught up
    # -3: user isn't behind or reported in the last period [and should thus use the penalization functions in consensus.se]
def penalizationCatchup(branch, sender):
    refund()
    # find delta between this last period and the last one a reporter was penalized up to
    lastPeriodPenalized = CONSENSUS.getPenalizedUpTo(branch, sender)
    lastPeriod = BRANCHES.getVotePeriod(branch)-1
    delta = lastPeriod - lastPeriodPenalized
    oldRep = REPORTING.getRepBalance(branch, sender)
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    # should only be allowed in 1st half of any period b/c rep removal / sending to branch should only be done then
    if(residual > periodLength/2):
        return(-1)
    if(delta <= 0):
        return(-2)
    # provided user is at least one period behind and they didn't report in the last period
    if(lastPeriodPenalized==lastPeriod or EXPEVENTS.getNumReportsActual(branch, lastPeriod, sender)):
        return(-3)
    # dock 10% for each period they didn't penalize on
    smoothedRep = oldRep*POINTNINE/ONE
    i = 1
    # if delta >22, max is 23 [1 above, 1 below, and 21 in while loop] penalizations simply so we don't run into out of gas issues
    if(delta>22):
        smoothedRep = smoothedRep*POINTNINE/ONE
        delta = 22
    while i < delta:
        smoothedRep = smoothedRep*POINTNINE/ONE
        i += 1
    # and send it to branch for penalty rep collection
    repChange = oldRep - smoothedRep
    # removes rep from reporter who lost it
    REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, sender), repChange)
    # sends that rep to the branch rep pool
    REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), repChange)
    CONSENSUS.setPenalizedUpTo(branch, sender, lastPeriod)
    log(type=penalizationCaughtUp, branch, sender, lastPeriodPenalized, lastPeriod, repChange, smoothedRep, block.timestamp)
    return(1)
