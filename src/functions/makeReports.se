# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

### Deals with the reporting process but not consensus / redistribution

import branches as BRANCHES
import expiringEvents as EXPEVENTS
import events as EVENTS
import markets as MARKETS
import reporting as REPORTING
import backstops as BACKSTOPS
import info as INFO
import consensusData as CONSENSUS
import collectFees as COLLECTFEES
import penalizationCatchup as CATCHUP
import reportingThreshold as THRESHOLD
import mutex as MUTEX
extern subcurrency: [allowance:[uint256,uint256]:uint256, approve:[uint256,uint256]:uint256, balance:[]:uint256, balanceOf:[uint256]:uint256, transfer:[uint256,uint256]:uint256, transferFrom:[uint256,uint256,uint256]:uint256]

inset('../data_api/refund.se')
inset('eventHelpers.se')
inset('../data_api/periodStage.se')
inset('logReturn.se')
inset('../data_api/float.se')

event makeReportsLogReturn(returnValue)

macro GAS_SUBSIDY: 3500000
macro MAX_REPORT_THRESHOLD: 10^54
# used for gas limit reasons to ensure terminating loop
macro MARKETS_COUNTING_TOWARDS_SHARE_VALUE: 20

def makeHash(salt, fxpReport, event, sender, ethics):
    hashInfo = array(5)
    hashInfo[0] = sender
    hashInfo[1] = salt
    hashInfo[2] = fxpReport
    hashInfo[3] = event
    hashInfo[4] = ethics
    reportHash = sha3(hashInfo, chars = 32 * len(hashInfo))
    return(reportHash)

# Allows a user to submit the hash of their fxpReport / commit
# Error: 0: not caught up on rep redistributions/penalizations so should be done first [only 1 period behind] - if reported last period and called collectfees then call the penalization functions in consensus, if didn't report last period or didn't call collectfees last period then call penalizationCatchup
# Error -1: invalid event
# Error -2: not in first half of period [commit part]
# Error -3: not able to fxpReport on this event
# Error -4: not caught up on penalizations [>1 period behind] and auto catchup failed
def submitReportHash(event, reportHash, saltyEncryptedHash):
    refund()
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()
    branch = EVENTS.getBranch(event)
    votePeriod = BRANCHES.getVotePeriod(branch)
    periodLength = BRANCHES.getPeriodLength(branch)
    lastPeriodPenalized = CONSENSUS.getPenalizedUpTo(branch, msg.sender)
    lastPeriod = votePeriod - 1
    delta = lastPeriod - lastPeriodPenalized
    eventIndex = EXPEVENTS.getEventIndex(branch, votePeriod, event)
    event = EXPEVENTS.getEvent(branch, votePeriod, eventIndex)
    checkSubmitReportHashPreconditions()

    reportingThresholdForUser = calculateReportingThreshold()
    # do abs then mult by 2 to ensure pos. and between 0 and 1 
    shaHash = (abs(sha3(msg.sender + event)) / ONE) * 2
    # max value 10^54
    shaHash = shaHash / 57896044618658097711785L * ONE
    # shaHash must be <= to the threshold for that user to be able to fxpReport on the given event
    if(shaHash > reportingThresholdForUser):
        MUTEX.unsetMutex()
        logReturn(makeReportsLogReturn, -3)
    EXPEVENTS.setReportHash(branch, votePeriod, msg.sender, reportHash, event)
    EXPEVENTS.setSaltyEncryptedHash(branch, votePeriod, msg.sender, saltyEncryptedHash, event)
    MUTEX.unsetMutex()
    logReturn(makeReportsLogReturn, 1)

# Submits / reveals a fxpReport for a period
# @return 1 if success
# Error messages
    # 0: reporter doesn't exist or has <1 rep
    # -1: has already reported
    # -2: not in second half of period
    # -3: hash doesn't match
    # -4: bad fxpReport
    # -5: invalid fxpEthics
    # -6: already resolved
    # -7: <48 hr left in period, too late to fxpReport, able to put up readj. bonds though
    # -8: fees couldn't be collected
def submitReport(event, salt, fxpReport, fxpEthics):
    refund()
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()

    branch = EVENTS.getBranch(event)
    balance = REPORTING.getRepBalance(branch, msg.sender)
    votePeriod = BRANCHES.getVotePeriod(branch)
    periodLength = BRANCHES.getPeriodLength(branch)
    forkedOverThisEvent = 0
    roundTwo = BACKSTOPS.getRoundTwo(event)
    weight = 1
    forkedOverEthicality = BACKSTOPS.getForkedOverEthicality(event)
    checkSubmitReportPreconditions()

    saveUsersReportAndHandleEthicality()
    coverGasCostIfPossible()
    MUTEX.unsetMutex()
    logReturn(makeReportsLogReturn, 1)

# validates and submits fxpReport
# weights reports by rep if round 2 and fork
# Returns -4 if fxpReport is invalid
    # isn't between 1 and 2 if binary
    # if same fxpReport as original outcome / ethicality if a forked event not forked over ethicality it's also invalid b/c this option was removed as a poss. answer
# needs whitelist
def validateReport(event, branch, votePeriod, fxpReport, forkedOverEthicality, forkedOverThisEvent, weight):
    outcome = 0
    # binary
    binary = EVENTS.getNumOutcomes(event) == 2 and EVENTS.getMaxValue(event) == TWO and EVENTS.getMinValue(event) == ONE
    if(binary):
        validateReportAndUpdateBinaryEvent()
    # scalar or categorical
    else:
        validateReportAndUpdateScalarOrCategoricalEvent()
    return(fxpReport)

### Helper functions:
# calculates how many reports should be on a given event
# whitelist
# @return fxp
def calculateReportTargetForEvent(branch, event, votePeriod, sender):
    numMarkets = EVENTS.getNumMarkets(event)
    # todo we should prob switch this to when we send fees don't add to a market but rather the event associated w/ the market, then assign reporters based on fees on event / total fees for all events, this'll save cost and be more appropriate for what we actually want and maybe move this fun to threshold
    if(numMarkets > MARKETS_COUNTING_TOWARDS_SHARE_VALUE):
        numMarkets = MAREKTS_COUNTING_TOWARDS_SHARE_VALUE
    markets = array(numMarkets)
    markets = EVENTS.getMarkets(event, outitems=numMarkets)
    totalFeesInWei = 0
    shareValue = 0
    i = 0
    while(i < numMarkets):
        totalFeesInWei += MARKETS.getFees(markets[i])
        i += 1
    allFeesForAllMarkets = EXPEVENTS.getFeeValue(branch, votePeriod)
    feeFraction = safeFxpDiv(totalFeesInWei, allFeesForAllMarkets)
    numReportersOnMarket = BRANCHES.getBaseReporters(branch) * (safeMul(-267, safeFxpMul(feeFraction, feeFraction))/2 + safeMul(533, feeFraction)/2 + ONE)
    canPayForThisManyReporters = totalFeesInWei / (GAS_SUBSIDY * tx.gasprice)
    lesser = min(canPayForThisManyReporters * ONE, numReportersOnMarket)
    if(!EXPEVENTS.getLesserReportNum(branch, votePeriod, event)):
        EXPEVENTS.refundCost(sender, branch, votePeriod, event)
        EXPEVENTS.setLesserReportNum(branch, votePeriod, event, lesser)
    return(lesser)

macro checkSubmitReportHashPreconditions():
    if(!eventIndex and (!event or event != event)):
        MUTEX.unsetMutex()
        logReturn(makeReportsLogReturn, -1)
    atFirstHalfOfPeriod()
    if(delta > 1 and CATCHUP.penalizationCatchup(branch, msg.sender) != 1):
        MUTEX.unsetMutex()
        logReturn(makeReportsLogReturn, -4)
    if(!CONSENSUS.getRepRedistributionDone(branch, msg.sender)):
        MUTEX.unsetMutex()
        logReturn(makeReportsLogReturn, 0)
    # if first fxpReport of period, num events not set
    if(!EXPEVENTS.getNumEventsToReportOn(branch, votePeriod)):
        EXPEVENTS.setNumEventsToReportOn(branch)

macro checkSubmitReportPreconditions():
    if(BRANCHES.getEventForkedOver(BRANCHES.getParent(branch)) == event):
        forkedOverThisEvent = 1
    if(roundTwo or forkedOverThisEvent):
        weight = balance
    if(balance < ONE):
        MUTEX.unsetMutex()
        logReturn(makeReportsLogReturn, 0)
    if(EXPEVENTS.getReport(branch, votePeriod, event, msg.sender)):
        MUTEX.unsetMutex()
        logReturn(makeReportsLogReturn, -1)
    atSecondHalfOfPeriod()
    realHash = EXPEVENTS.getReportHash(branch, votePeriod, msg.sender, event)
    if(self.makeHash(salt, fxpReport, event, msg.sender, fxpEthics) != realHash or !realHash):
        MUTEX.unsetMutex()
        logReturn(makeReportsLogReturn, -3)
    if(fxpEthics != ONE and fxpEthics != 0):
        MUTEX.unsetMutex()
        logReturn(makeReportsLogReturn, -5)
    if(EVENTS.getOutcome(event) != 0):
        MUTEX.unsetMutex()
        logReturn(makeReportsLogReturn, -6)
    # commented out for easy testing
    # if(block.timestamp / periodLength != ((block.timestamp + 2 * TWENTY_FOUR_HR) / periodLength)):
    #    logReturn(makeReportsLogReturn, -7)
    # ensures user has collected fees for last reporting period
    if(!CONSENSUS.getRepCollected(branch, msg.sender, votePeriod - 1)):
        if(COLLECTFEES.collectRep(branch, msg.sender, value = msg.value) < 0):
            MUTEX.unsetMutex()
            logReturn(makeReportsLogReturn, -8)
    # actual submitting of fxpReport and ethicality
    validatedFxpReport = self.validateReport(event, branch, votePeriod, fxpReport, forkedOverEthicality, forkedOverThisEvent, weight)
    if(validatedFxpReport == -4):
        MUTEX.unsetMutex()
        logReturn(makeReportsLogReturn, -4)

macro saveUsersReportAndHandleEthicality():
    EXPEVENTS.setReport(branch, votePeriod, event, validatedFxpReport, msg.sender)
    # set ethicality for forked event
    validatedFxpEthics = fxpEthics
    if(forkedOverThisEvent):
        # fork remove ethicality option if was forked over ethicality, other ethicality choice is the ethicality
        if(forkedOverEthicality):
            oldEthical = ethicCatch(EVENTS.getEthics(event))
            if(oldEthical == ONE):
                validatedFxpEthics = 0
            else:
                validatedFxpEthics = ONE
        EXPEVENTS.setEthicReport(branch, votePeriod, event, validatedFxpEthics, msg.sender)
        eventEthics = safeDiv(safeAdd(safeMul(EVENTS.getForkEthicality(event), EXPEVENTS.getEventWeight(branch, votePeriod, event)), safeMul(validatedFxpEthics, weight)), safeAdd(EXPEVENTS.getEventWeight(branch, votePeriod, event), weight))
        EVENTS.setForkEthicality(event, eventEthics)
    # set ethicality for a regular event
    else:
        EXPEVENTS.setEthicReport(branch, votePeriod, event, validatedFxpEthics, msg.sender)
        eventEthics = safeDiv(safeAdd(safeMul(EVENTS.getEthics(event), EXPEVENTS.getEventWeight(branch, votePeriod, event)), safeMul(validatedFxpEthics, weight)), safeAdd(EXPEVENTS.getEventWeight(branch, votePeriod, event), weight))
        EVENTS.setEthics(event, eventEthics)
    # round 2 and fork events are weighted by rep, otherwise 1
    EXPEVENTS.countReportAsSubmitted(branch, votePeriod, event, msg.sender, weight)

macro coverGasCostIfPossible():
    # pay reporters after reporting for their gas costs
    reportsNum = EXPEVENTS.getLesserReportNum(branch, votePeriod, event)
    paidBack = EVENTS.getReportersPaidSoFar(event)
    ableToPayForMore = reportsNum - paidBack
    if(ableToPayForMore):
        EVENTS.addReportersPaidSoFar(event)
        gasCostInWei = safeFxpDiv(GAS_SUBSIDY*tx.gasprice, WEI_TO_ETH)
        gasCostInSubcurrency = safeFxpDiv(gasCostInWei, BRANCHES.getCurrencyRate(branch, INFO.getCurrency(market)))
        INFO.getWallet(market).transfer(msg.sender, gasCostInSubcurrency)

macro calculateReportingThreshold():
    threshold = 0
    if(eventCreatedPriorToFork(event)):
        threshold = 0
    elif(EXPEVENTS.getRequired(event, votePeriod, branch) or EVENTS.getReportingThreshold(event)):
        threshold = MAX_REPORT_THRESHOLD
    # if number of reports event should have hasn't been calculated yet do it
    elif(!EXPEVENTS.getLesserReportNum(branch, votePeriod, event)):
        self.calculateReportTargetForEvent(branch, event, votePeriod, msg.sender)
        threshold = THRESHOLD.calculateReportingThreshold(branch, event, votePeriod, msg.sender)
    else:
        threshold = THRESHOLD.calculateReportingThreshold(branch, event, votePeriod, msg.sender)
    threshold

macro validateReportAndUpdateBinaryEvent():
    if(fxpReport > 2 * ONE or fxpReport < ONE or !fxpReport):
        logReturn(makeReportsLogReturn, -4)
    # outcome is calculated as we go along on a fxpReport by fxpReport basis (i.e. lazily evaluating things)
    elif(forkedOverThisEvent):
        # in case of fork remove the original outcome as a possible response if forked over outcome [i.e. didn't fork over fxpEthics]
        if(!forkedOverEthicality and fxpReport == catch(EVENTS.getUncaughtOutcome(event))):
            logReturn(makeReportsLogReturn, -4)
        outcome = safeDiv(safeAdd(safeMul(EVENTS.getForkOutcome(event), EXPEVENTS.getEventWeight(branch, votePeriod, event)), safeMul(fxpReport, weight)), safeAdd(EXPEVENTS.getEventWeight(branch, votePeriod, event), weight))
        EVENTS.setForkOutcome(event, outcome)
    else:
        outcome = safeDiv(safeAdd(safeMul(EVENTS.getUncaughtOutcome(event), EXPEVENTS.getEventWeight(branch, votePeriod, event)), safeMul(fxpReport, weight)), safeAdd(EXPEVENTS.getEventWeight(branch, votePeriod, event), weight))
        EVENTS.setUncaughtOutcome(event, outcome)

macro validateReportAndUpdateScalarOrCategoricalEvent():
    if(fxpReport > ONE):
        fxpReport = ONE
    if(fxpReport <= 0):
        # 1 is the new 0 [1/10**18 is basically 0 but able to be differentiated from no fxpReport of 0]
        fxpReport = 1
    # in case of fork remove the original outcome as a possible response if didn't fork over fxpEthics
    reportIsSameAsOutcomeOnOriginalBranch = fxpReport == EVENTS.getUncaughtOutcome(event)
    if(forkedOverThisEvent and (!forkedOverEthicality and reportIsSameAsOutcomeOnOriginalBranch)):
        logReturn(makeReportsLogReturn, -4)
    # outcome (uncaught and mode) is calculated as we go along on a fxpReport by fxpReport basis (i.e. lazily evaluating things)
    # adding weight to a given poss. mode fxpReport
    EXPEVENTS.addToWeightOfReport(votePeriod, event, fxpReport, weight)
    if(EXPEVENTS.getWeightOfReport(votePeriod, event, fxpReport) > EXPEVENTS.getCurrentModeItems(votePeriod, event)):
        EXPEVENTS.setCurrentMode(votePeriod, event, fxpReport)
        EXPEVENTS.setCurrentModeItems(votePeriod, event, fxpReport)
    outcome = EXPEVENTS.getCurrentMode(votePeriod, event)
    if(forkedOverThisEvent):
        EVENTS.setForkOutcome(event, outcome)
    else:
        EVENTS.setUncaughtOutcome(event, outcome)
