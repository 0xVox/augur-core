# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import info as INFO
import events as EVENTS
import branches as BRANCHES
import trades as TRADES
import markets as MARKETS
import expiringEvents as EXPEVENTS
import proportionCorrect as PROPORTION
inset('refund.se')

macro TRADE_FIELDS: 8
macro EVENTS_FIELDS: 9
macro OUTCOMES_FIELDS: 3
macro BASE_FIELDS: 14
macro BASE_CACHE_FIELDS: 10

def getOrderBook(marketID, offset, numTradesToLoad):
    refund()
    numTrades = MARKETS.get_total_trades(marketID)
    if offset > numTrades:
        return([]: arr)
    if numTradesToLoad == 0:
        numTradesToLoad = numTrades
    totalTrades = min(numTradesToLoad, numTrades - offset)
    # TODO chunk get_trade_ids
    trades = slice(MARKETS.get_trade_ids(marketID, outitems=numTrades), items=offset, items=offset+numTradesToLoad)
    orderBook = array(TRADE_FIELDS*totalTrades)
    numAvailableTrades = 0
    i = 0
    while i < totalTrades:
        tradeInfo = TRADES.get_trade(trades[i], outitems=TRADE_FIELDS)
        if tradeInfo[0] != 0:
            j = 0
            while j < 8:
                orderBook[8*numAvailableTrades + j] = tradeInfo[j]
                j += 1
            numAvailableTrades += 1
        i += 1
    return(slice(orderBook, items=0, items=TRADE_FIELDS*numAvailableTrades): arr)

def getAccountOrderBook(marketID, account):
    refund()
    numTrades = MARKETS.get_total_trades(marketID)
    trades = MARKETS.get_trade_ids(marketID, outitems=numTrades)
    orderBook = array(TRADE_FIELDS*numTrades)
    numAccountTrades = 0
    i = 0
    while i < numTrades:
        owner = TRADES.getTradeOwner(trades[i])
        if owner == account:
            tradeInfo = TRADES.get_trade(trades[i], outitems=TRADE_FIELDS)
            if tradeInfo[0] != 0:
                j = 0
                while j < 8:
                    orderBook[8*numAccountTrades + j] = tradeInfo[j]
                    j += 1
                numAccountTrades += 1
        i += 1
    return(slice(orderBook, items=0, items=TRADE_FIELDS*numAccountTrades): arr)

def getMarketInfo(marketID, account):
    refund()
    index = BASE_FIELDS
    descriptionLength = INFO.getDescriptionLength(marketID)
    eventID = MARKETS.getMarketEvent(marketID, 0)
    resolutionLength = EVENTS.getResolutionLength(eventID)
    extraInfoLength = MARKETS.getExtraInfoLength(marketID)
    numOutcomes = MARKETS.getMarketNumOutcomes(marketID)
    marketInfo = array(BASE_FIELDS + EVENTS_FIELDS + numOutcomes*OUTCOMES_FIELDS + descriptionLength + resolutionLength + extraInfoLength + 3)
    marketInfo[0] = marketID
    marketInfo[1] = MARKETS.getMakerFees(marketID)
    marketInfo[2] = numOutcomes
    marketInfo[3] = MARKETS.getTradingPeriod(marketID)
    marketInfo[4] = MARKETS.getTradingFee(marketID)
    marketInfo[5] = MARKETS.getBranchID(marketID)
    marketInfo[6] = MARKETS.getCumScale(marketID)
    marketInfo[7] = MARKETS.getCreationTime(marketID)
    marketInfo[8] = MARKETS.getVolume(marketID)
    marketInfo[9] = INFO.getCreationFee(marketID)
    marketInfo[10] = INFO.getCreator(marketID)
    tags = MARKETS.returnTags(marketID, outitems=3)
    marketInfo[11] = tags[0]
    marketInfo[12] = tags[1]
    marketInfo[13] = tags[2]

    # gather event(s) info:
    # [eventID, expirationDate, outcome, minValue, maxValue, numOutcomes]
    eventInfo = EVENTS.getEventInfo(eventID, outitems=EVENTS_FIELDS - 2)
    marketInfo[index] = eventID
    j = 1
    while j < EVENTS_FIELDS - 2:
        marketInfo[index + j] = eventInfo[j]
        j += 1
    if numOutcomes != 2 or eventInfo[3] != 10^18:
        marketInfo[index + 2] = EVENTS.getUncaughtOutcome(eventID)
    marketInfo[index + EVENTS_FIELDS - 2] = EVENTS.getEthical(eventID)
    marketInfo[index + EVENTS_FIELDS - 1] = PROPORTION.proportionCorrect(eventID)
    index += EVENTS_FIELDS

    # gather outcomes info: [sharesPurchased, price]
    # (price of outcome = last trade)
    k = 0
    while k < numOutcomes:
        marketInfo[index + k*OUTCOMES_FIELDS] = MARKETS.getSharesPurchased(marketID, k + 1)
        marketInfo[index + k*OUTCOMES_FIELDS + 1] = MARKETS.getLastOutcomePrice(marketID, k + 1)
        if account != 0:
            marketInfo[index + k*OUTCOMES_FIELDS + 2] = MARKETS.getParticipantSharesPurchased(marketID, account, k + 1)
        k += 1
    index += numOutcomes*OUTCOMES_FIELDS

    # append description character codes
    marketInfo[index] = descriptionLength
    index += 1
    description = INFO.getDescription(marketID, outchars=descriptionLength)
    c = 0
    while c < descriptionLength:
        marketInfo[index + c] = getch(description, c)
        c += 1
    index += descriptionLength

    # append resolution character codes
    marketInfo[index] = resolutionLength
    index += 1
    resolution = EVENTS.getResolution(eventID, outchars=resolutionLength)
    c = 0
    while c < resolutionLength:
        marketInfo[index + c] = getch(resolution, c)
        c += 1
    index += resolutionLength

    # append extraInfo character codes
    marketInfo[index] = extraInfoLength
    index += 1
    extraInfo = MARKETS.getExtraInfo(marketID, outchars=extraInfoLength)
    c = 0
    while c < extraInfoLength:
        marketInfo[index + c] = getch(extraInfo, c)
        c += 1

    return(marketInfo: arr)

def batchGetMarketInfo(marketIDs: arr, account):
    refund()
    numMarkets = len(marketIDs)
    totalLength = 0
    marketInfoLength = array(numMarkets)
    i = 0
    while i < numMarkets:
        marketID = marketIDs[i]
        descriptionLength = INFO.getDescriptionLength(marketID)
        eventID = MARKETS.getMarketEvent(marketID, 0)
        resolutionLength = EVENTS.getResolutionLength(eventID)
        extraInfoLength = MARKETS.getExtraInfoLength(marketID)
        numOutcomes = MARKETS.getMarketNumOutcomes(marketID)
        marketInfoLength[i] = BASE_FIELDS + EVENTS_FIELDS + numOutcomes*OUTCOMES_FIELDS + descriptionLength + resolutionLength + extraInfoLength + 4
        totalLength += marketInfoLength[i]
        i += 1
    marketsInfo = array(totalLength)
    index = 0
    i = 0
    while i < numMarkets:
        marketInfo = self.getMarketInfo(marketIDs[i], account, outitems=marketInfoLength[i] - 1)
        marketsInfo[index] = marketInfoLength[i]
        j = 0
        while j < marketInfoLength[i] - 1:
            marketsInfo[index + j + 1] = marketInfo[j]
            j += 1
        index += marketInfoLength[i]
        i += 1
    return(marketsInfo: arr)

# - if both volumeMin and volumeMax are specified, then
#   only include markets in the half-open interval: (volumeMin, volumeMax]
# - if volumeMax = -1 then there is no upper limit
def getMarketsInfo(branch, offset, numMarketsToLoad, volumeMin, volumeMax):
    refund()
    numMarkets = BRANCHES.getNumMarketsBranch(branch)
    if offset > numMarkets:
        return([]: arr)
    if numMarketsToLoad == 0:
        numMarketsToLoad = numMarkets
    totalMarkets = min(numMarketsToLoad, numMarkets - offset)
    marketIDs = BRANCHES.getSomeMarketsInBranch(branch, offset, offset + totalMarkets, outitems=totalMarkets)

    if volumeMin < volumeMax or volumeMax == -1:
        numThresholdedMarkets = 0
        thresholdedMarketIDs = array(numMarkets)
        m = 0
        while m < totalMarkets:
            marketID = marketIDs[m]
            volume = MARKETS.getVolume(marketID)
            if volume > volumeMin and (volumeMax == -1 or volume <= volumeMax):
                thresholdedMarketIDs[numThresholdedMarkets] = marketID
                numThresholdedMarkets += 1
                if numThresholdedMarkets == totalMarkets:
                    m = totalMarkets - 1
            m += 1
        totalMarkets = min(numThresholdedMarkets, totalMarkets)
        marketIDs = slice(thresholdedMarketIDs, items=0, items=numThresholdedMarkets)

    descriptionLengths = array(totalMarkets)
    totalLen = totalMarkets*16
    m = 0
    while m < totalMarkets:
        descriptionLengths[m] = INFO.getDescriptionLength(marketIDs[m])
        totalLen += descriptionLengths[m]
        m += 1
    marketsInfo = array(totalLen + 1)
    marketsInfo[0] = totalMarkets

    # get basic market info for each market
    m = 0
    c = 1
    while m < totalMarkets:
        marketID = marketIDs[m]
        descriptionLength = descriptionLengths[m]
        marketsInfo[c] = 16 + descriptionLength
        marketsInfo[c + 1] = marketID
        marketsInfo[c + 2] = MARKETS.getTradingPeriod(marketID)
        marketsInfo[c + 3] = MARKETS.getTradingFee(marketID)
        marketsInfo[c + 4] = MARKETS.getCreationTime(marketID)
        marketsInfo[c + 5] = MARKETS.getVolume(marketID)
        tags = MARKETS.returnTags(marketID, outitems=3)
        marketsInfo[c + 6] = tags[0]
        marketsInfo[c + 7] = tags[1]
        marketsInfo[c + 8] = tags[2]
        marketsInfo[c + 9] = MARKETS.getLastExpDate(marketID)
        marketsInfo[c + 10] = MARKETS.getMakerFees(marketID)
        eventID = MARKETS.getMarketEvent(marketID, 0)
        marketsInfo[c + 11] = eventID
        marketsInfo[c + 12] = EVENTS.getMinValue(eventID)
        marketsInfo[c + 13] = EVENTS.getMaxValue(eventID)
        marketsInfo[c + 14] = EVENTS.getNumOutcomes(eventID)
        if marketsInfo[c + 14] != 2 or marketsInfo[c + 12] != 10^18:
            marketsInfo[c + 15] = EVENTS.getUncaughtOutcome(eventID)
        else:
            marketsInfo[c + 15] = EVENTS.getOutcome(eventID)
        description = INFO.getDescription(marketID, outchars=descriptionLength)
        c += 16
        d = 0
        while d < descriptionLength:
            marketsInfo[c] = getch(description, d)
            c += 1
            d += 1
        m += 1
    return(marketsInfo: arr)

def getMarketCreatorFeesCollected(market):
    return((MARKETS.getFees(market) - INFO.getCreationFee(market))/2)

def getEventsWithSubmittedReport(branch, period, reporter):
    self.test_callstack()
    numEvents = EXPEVENTS.getNumberEvents(branch, period)
    events = array(numEvents)
    n = 0
    i = 0
    while(i < numEvents):
        eventID = EXPEVENTS.getEvent(branch, period, i)
        if(EXPEVENTS.getReport(branch, period, eventID, reporter) != 0):
            events[n] = eventID
            n += 1
        i += 1
    return(slice(events, items=0, items=n): arr)

def getPositionInMarket(market, account):
    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    position = array(numOutcomes)
    i = 0
    while i < numOutcomes:
        position[i] = MARKETS.getParticipantSharesPurchased(market, account, i + 1)
        i += 1
    return(position: arr)

def getMarketsCreatedByMarketCreator(branch, creator, initial, last):
    if(last < initial):
        throw()
    markets = array(last - initial)
    marketsByCreator = array(last - initial)
    markets = BRANCHES.getSomeMarketsInBranch(branch, initial, last, outitems = (last - initial))
    i = 0
    n = 0
    while i < len(markets):
        if(INFO.getCreator(markets[i]) == creator):
            marketsByCreator[n] = markets[i]
            n += 1
        i += 1
    marketsByCreator = slice(marketsByCreator, items = 0, items = n)
    return(marketsByCreator: arr)
