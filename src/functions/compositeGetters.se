# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import info as INFO
import events as EVENTS
import branches as BRANCHES
import trades as TRADES
import markets as MARKETS
inset('refund.se')

macro TRADE_FIELDS: 8
macro EVENTS_FIELDS: 7
macro OUTCOMES_FIELDS: 2
macro BASE_FIELDS: 14
macro BASE_CACHE_FIELDS: 10

def getOrderBook(marketID):
    refund()
    numTrades = MARKETS.get_total_trades(marketID)
    trades = MARKETS.get_trade_ids(marketID, outitems=numTrades)
    orderBook = array(TRADE_FIELDS*numTrades)
    numAvailableTrades = 0
    i = 0
    while i < numTrades:
        tradeInfo = TRADES.get_trade(trades[i], outitems=TRADE_FIELDS)
        if tradeInfo[0] != 0:
            j = 0
            while j < 8:
                orderBook[8*numAvailableTrades + j] = tradeInfo[j]
                j += 1
            numAvailableTrades += 1
        i += 1
    return(slice(orderBook, items=0, items=TRADE_FIELDS*numAvailableTrades): arr)

def getMarketInfo(marketID):
    refund()
    index = BASE_FIELDS
    descriptionLength = INFO.getDescriptionLength(marketID)
    eventID = MARKETS.getMarketEvent(marketID, 0)
    resolutionLength = EVENTS.getResolutionLength(eventID)
    extraInfoLength = MARKETS.getExtraInfoLength(marketID)
    numOutcomes = MARKETS.getMarketNumOutcomes(marketID)
    marketInfo = array(BASE_FIELDS + EVENTS_FIELDS + numOutcomes*OUTCOMES_FIELDS + descriptionLength + resolutionLength + extraInfoLength + 3)
    marketInfo[0] = marketID
    marketInfo[1] = MARKETS.getMakerFees(marketID)
    marketInfo[2] = numOutcomes
    marketInfo[3] = MARKETS.getTradingPeriod(marketID)
    marketInfo[4] = MARKETS.getTradingFee(marketID)
    marketInfo[5] = MARKETS.getBranchID(marketID)
    marketInfo[6] = MARKETS.getCumScale(marketID)
    marketInfo[7] = MARKETS.getCreationTime(marketID)
    marketInfo[8] = MARKETS.getVolume(marketID)
    marketInfo[9] = INFO.getCreationFee(marketID)
    marketInfo[10] = INFO.getCreator(marketID)
    tags = MARKETS.returnTags(marketID, outitems=3)
    marketInfo[11] = tags[0]
    marketInfo[12] = tags[1]
    marketInfo[13] = tags[2]

    # gather event(s) info:
    # [eventID, expirationDate, outcome, minValue, maxValue, numOutcomes]
    eventInfo = EVENTS.getEventInfo(eventID, outitems=EVENTS_FIELDS - 1)
    marketInfo[index] = eventID
    j = 1
    while j < EVENTS_FIELDS - 1:
        marketInfo[index + j] = eventInfo[j]
        j += 1
    marketInfo[index + EVENTS_FIELDS] = EVENTS.getEthical(eventID)
    index += EVENTS_FIELDS

    # gather outcomes info: [sharesPurchased, price], winningOutcomes
    # (price of outcome = last trade)
    k = 0
    while k < numOutcomes:
        marketInfo[index + k*OUTCOMES_FIELDS] = MARKETS.getSharesPurchased(marketID, k + 1)
        marketInfo[index + k*OUTCOMES_FIELDS + 1] = MARKETS.getLastOutcomePrice(marketID, k + 1)
        k += 1
    index += numOutcomes*OUTCOMES_FIELDS

    # append description character codes
    marketInfo[index] = descriptionLength
    index += 1
    description = INFO.getDescription(marketID, outchars=descriptionLength)
    c = 0
    while c < descriptionLength:
        marketInfo[index + c] = getch(description, c)
        c += 1
    index += descriptionLength

    # append resolution character codes
    marketInfo[index] = resolutionLength
    index += 1
    resolution = EVENTS.getResolution(eventID, outchars=resolutionLength)
    c = 0
    while c < resolutionLength:
        marketInfo[index + c] = getch(resolution, c)
        c += 1
    index += resolutionLength

    # append extraInfo character codes
    marketInfo[index] = extraInfoLength
    index += 1
    extraInfo = MARKETS.getExtraInfo(marketID, outchars=extraInfoLength)
    c = 0
    while c < extraInfoLength:
        marketInfo[index + c] = getch(extraInfo, c)
        c += 1

    return(marketInfo: arr)

def batchGetMarketInfo(marketIDs: arr):
    refund()
    numMarkets = len(marketIDs)
    totalLength = 0
    marketInfoLength = array(numMarkets)
    i = 0
    while i < numMarkets:
        marketID = marketIDs[i]
        descriptionLength = INFO.getDescriptionLength(marketID)
        eventID = MARKETS.getMarketEvent(marketID, 0)
        resolutionLength = EVENTS.getResolutionLength(eventID)
        extraInfoLength = MARKETS.getExtraInfoLength(marketID)
        numOutcomes = MARKETS.getMarketNumOutcomes(marketID)
        marketInfoLength[i] = BASE_FIELDS + EVENTS_FIELDS + numOutcomes*OUTCOMES_FIELDS + descriptionLength + resolutionLength + extraInfoLength + 4
        totalLength += marketInfoLength[i]
        i += 1
    marketsInfo = array(totalLength)
    index = 0
    i = 0
    while i < numMarkets:
        marketInfo = self.getMarketInfo(marketIDs[i], outitems=marketInfoLength[i] - 1)
        marketsInfo[index] = marketInfoLength[i]
        j = 0
        while j < marketInfoLength[i] - 1:
            marketsInfo[index + j + 1] = marketInfo[j]
            j += 1
        index += marketInfoLength[i]
        i += 1
    return(marketsInfo: arr)

def getMarketsInfo(branch, offset, numMarketsToLoad):
    refund()
    numMarkets = BRANCHES.getNumMarketsBranch(branch)
    if numMarketsToLoad == 0:
        numMarketsToLoad = numMarkets
    marketIDs = slice(BRANCHES.getMarketsInBranch(branch, outitems=numMarkets), items=0, items=numMarkets)
    totalLen = numMarketsToLoad*11
    m = 0
    while m < numMarketsToLoad:
        totalLen += INFO.getDescriptionLength(marketIDs[m + offset])
        m += 1
    marketsInfo = array(totalLen + 1)
    m = 0
    c = 1
    totalMarkets = min(numMarketsToLoad, numMarkets)
    marketsInfo[0] = totalMarkets
    while m < totalMarkets:
        marketID = marketIDs[m + offset]
        descriptionLength = INFO.getDescriptionLength(marketID)
        marketsInfo[c] = 11 + descriptionLength
        marketsInfo[c + 1] = marketID
        marketsInfo[c + 2] = MARKETS.getTradingPeriod(marketID)
        marketsInfo[c + 3] = MARKETS.getTradingFee(marketID)
        marketsInfo[c + 4] = MARKETS.getCreationTime(marketID)
        marketsInfo[c + 5] = MARKETS.getVolume(marketID)
        tags = slice(MARKETS.returnTags(marketID, outitems=3), items=0, items=3)
        marketsInfo[c + 6] = tags[0]
        marketsInfo[c + 7] = tags[1]
        marketsInfo[c + 8] = tags[2]
        marketsInfo[c + 9] = MARKETS.getLastExpDate(marketID)
        marketsInfo[c + 10] = MARKETS.getMakerFees(marketID)
        description = INFO.getDescription(marketIDs[m + offset], outchars=descriptionLength)
        c += 11
        d = 0
        while d < descriptionLength:
            marketsInfo[c] = getch(description, d)
            c += 1
            d += 1
        m += 1
    return(marketsInfo: arr)
