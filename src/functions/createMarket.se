# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import info as INFO
import cash as CASH
import reporting as REPORTING
import makeReports as MAKEREPORTS
import fxpFunctions as FXP
import markets as MARKETS
import events as EVENTS
import expiringEvents as EXPEVENTS
import trades as TRADES
inset('refund.se')

event creationBlock(market:indexed)

# tradingFee is a percent in fixedPoint
# @return marketID if success or 1 if on an oracle only branch creation we have success
# error messages otherwise
    # -1: bad input or parent doesn't exist
    # -2: too many events
    # -3: too many outcomes
    # -4: not enough money
    # -5: fee too low
    # -6: duplicate events
    # -7: event already expired
    # -8: market already exists
    # -9: would expire during non-reporting fork period
# .05 eth to create
# need to check that it's an actual subcurrency upon market creation (maybe check send/balance funs)
def createMarket(branch, description:str, tradingFee, events:arr, tag1, tag2, tag3, makerFees, extraInfo:str):
    refund()
    if(makerFees<0 or makerFees > 2**63):
        return(0)
    periodLength = BRANCHES.getPeriodLength(branch)
    # send this to branch
    creationFee = 1106804644422573056 * BRANCHES.getBaseReporters(branch) * 2**64 / tradingFee
    # will need to get equivalent value in usd or eth or w/e via etherex exchange for subcurrency markets
    if(periodLength==0 or len(description)==0 || tradingFee < BRANCHES.getMinTradingFee(branch)):
        return(-1)
    if(tradingFee > 2^61):
        return(-1)
        
    event = events[0]
    # check that events have same exp. dates && branch
    i = 0
    eventNum = len(events)
    # only supports upto 3 dimensional markets
    if(eventNum > 3):
        return(-2)
    numOutcomes = 0
    eventsConcat = 0
    cumulativeScale = 0
    tradingPeriod = 0
    while i < eventNum:
        event = events[i]
        if(i!=0):
            if(event==events[i-1]):
                return(-6)
        expirationDate = EVENTS.getExpiration(event)
        futurePeriod = expirationDate / periodLength
        if(expirationDate < block.timestamp):
            return(-7)
        forkPeriod = BRANCHES.getForkPeriod(branch)
        if(forkPeriod && (futurePeriod == forkPeriod or futurePeriod == (forkPeriod+1))):
            return(-9)
        if(EVENTS.getEventBranch(event) != branch || !INFO.getCreator(event)):
            return(-1)
        EXPEVENTS.addEvent(branch, futurePeriod, event)
        if(expirationDate > tradingPeriod):
            tradingPeriod = expirationDate
        eventsConcat += event
        if(!EVENTS.getBond(event)):
            # pay validity bond
            period = block.timestamp / 86400
            validity_bond =  6 * creationFee * 2 * (1 + EVENTS.getPast24(period-1)) / (1 + EXPEVENTS.getNumberEvents(branch, BRANCHES.getVotePeriod(branch)))
            if(!CASH.send(event, validity_bond)):
                return(-4)
            EVENTS.setBond(event, validity_bond)
            EVENTS.addPast24(24period)
        #scalars
        maxValue = EVENTS.getMaxValue(event)
        minValue = EVENTS.getMinValue(event)
        if((maxValue!=2**65 || minValue !=2**64) && EVENTS.getNumOutcomes(event)==2):
            # is a valid scalar
            cumulativeScale += maxValue - minValue
        eventNumOutcomes = EVENTS.getNumOutcomes(event)
        if(i==0):
            numOutcomes += eventNumOutcomes
        else:
            numOutcomes *= eventNumOutcomes
        i += 1
    if(numOutcomes > 8):
        return(-3)
    if(cumulativeScale==0):
        cumulativeScale = 2**64
    tradingPeriod = (tradingPeriod / periodLength)

    # formation of marketID (hash)
    marketinfo = string(11*32 + len(description))
    marketinfo[0] = MARKET
    marketinfo[1] = tx.origin
    marketinfo[2] = initialLiquidity
    marketinfo[3] = branch
    marketinfo[4] = eventsConcat
    marketinfo[5] = len(events)
    marketinfo[6] = cumulativeScale
    marketinfo[7] = alpha
    marketinfo[8] = numOutcomes
    marketinfo[9] = tradingPeriod
    marketinfo[10] = tradingFee
    mcopy(marketinfo + 11*32, description, chars=len(description))
    marketID = sha256(marketinfo, chars=len(marketinfo))
    log(type=creationBlock, marketID)
    CASH.initiateOwner(marketID)
    # pay numOutcomes fee
    # if it's already been created return 0
    if(INFO.getCreator(marketID) || MARKETS.getMarketNumOutcomes(marketID)):
        return(-8)
    if(!BRANCHES.getOracleOnly(branch) && CASH.balance(msg.sender) < creationFee):
        return(-4)
    if(INFO.setInfo(marketID, description, tx.origin, creationFee) && BRANCHES.addMarketToBranch(branch, marketID) && MARKETS.initializeMarket(marketID, events, tradingPeriod, tradingFee, branch, tag1, tag2, tag3, makerFees, cumulativeScale, numOutcomes, extraInfo) && CASH.send(branch, creationFee)):
        i = 0
        while i < len(events):
            EVENTS.addMarket(events[i], marketID)
            i += 1
    return(marketID)

def updateTradingFee(branch, market, tradingFee):
    refund()
    if(msg.sender != INFO.getCreator(market) || tx.origin != INFO.getCreator(market)):
        return(-4)
    oldFee = MARKETS.getTradingFee(market)
    oldCreationFee = 1106804644422573056 * BRANCHES.getBaseReporters(branch) * 2**64 / oldFee
    newCreationFee = 1106804644422573056 * BRANCHES.getBaseReporters(branch) * 2**64 / tradingFee
    if(tradingFee < BRANCHES.getMinTradingFee(branch) or tradingFee > oldFee):
        return(-1)
    CASH.send(branch, newCreationFee-oldCreationFee)
    return(MARKETS.setTradingFee(market, tradingFee))

# Anyone can post an "Early Resolution Bond"
# This bond is equal to 0.5 * Market_Fee * Market_Value
# This amount is the amount needed to pay the reporters in case this was frivolous.
# The market goes up for early resolution and reporters place claim to what is truth, however for early resolution, they have an additional option: 'Market is not ready to resolve'
    # this addl option is just the normal indeterminate (except here it's a bit of a special case, see below)
# In the event 'Market is not ready to resolve' is found to be the consensus, the early resolution bond is paid to the reporters for their labor.
    # and market remains with old expiration dateevent
# In the event any other option is found to be the consensus the early resolution bond is returned to the poster and then resolution is handled just like any other case.
def pushMarketForward(branch, market):
    refund()
    branchEventIsInForked = 0
    winningForkDecided = 0
    if(branchEventIsInForked && !winningForkDecided):
        return(0)
    # prevent for backstop 1 markets and vice versa
    # todo: if has been pushed forward in the past (see close market) don't allow it again
    numEvents = MARKETS.getNumEvents(market)
    if(marketClosed):
        return(0)
    if(CASH.send(market, numEvents*MARKETS.getTradingFee(market)*MARKETS.getTotalSharesPurchased(market)/(2*2^64))==0):
        return(0)
    i = 0
    # for each event in market
    while i < numEvents:
        if(1):
            #if(eventNotResolved && eventNotInRound2Adj && notRejectedBefore && event isn't already in next vote period):
            event = MARKETS.getMarketEvent(market, i)
            # push into next vote period
            period = BRANCHES.getVotePeriod(branch)
            EXPEVENTS.addEvent(branch, period+1, event)
            # set event expiration date to be after the current reporting period ends
            EVENTS.setExpiration(event, block.timestamp)
            MARKETS.setTradingPeriod(market, period+1)
            MARKETS.setPushedForward(market, 1)
            #MAKEREPORTS.setReportable(period+1, event)
        i += 1
    return(1)