# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

### Allows creation of events and markets and manipulating them

import branches as BRANCHES
import info as INFO
import markets as MARKETS
import backstops as BACKSTOPS
import reporting as REPORTING
import events as EVENTS
import expiringEvents as EXPEVENTS
import mutex as MUTEX
extern subcurrency: [allowance:[int256,int256]:int256, approve:[int256,int256]:int256, balance:[]:int256, balanceOf:[int256]:int256, transfer:[int256,int256]:int256, transferFrom:[int256,int256,int256]:int256]
inset('../data_api/refund.se')
inset('../data_api/float.se')

event marketCreated(market)
event tradingFeeUpdated(market, fxpTradingFee)

macro POINT_ZERO_THREE: 553402322211286528
macro COST_PER_REPORTER: 3500000
macro COST_FOR_EVENT_REPORT_CALCULATION: 500000
macro MAX_FEE: 2 ** 62
macro THREE_DAYS: 259200
macro FIRST_RESOLVE_BOND: 10 * ONE

macro checkSubcurrencyIsValid(contract):
    allowance = $contract.allowance(msg.sender, self)
    balance = $contract.balanceOf(self)
    transfer = $contract.transfer(msg.sender, 0)
    transferFrom = $contract.transferFrom(self, msg.sender, 0)
    approve = $contract.approve(self, 0)

# def createSingleEventMarket(branch, description:str, expDate, fxpMinValue, fxpMaxValue, numOutcomes, resolution:str, fxpTradingFee, tag1, tag2, tag3, fxpMakerFees, extraInfo:str):
#     event = self.createEvent(branch, description, expDate, fxpMinValue, fxpMaxValue, numOutcomes, resolution, call=delegate)
#     market = self.createMarket(branch, description, fxpTradingFee, [event], tag1, tag2, tag3, fxpMakerFees, extraInfo, call=delegate)
#     return(market)

# Create an event. Events are the basic units / questions that are reported on in Augur by reporters
# @param numOutcomes is number of outcomes for this event, e.g. quarter mile times from 10.0 to 11.0 would be 11 outcomes (if incremented by 0.1)
# @param fxpMinValue should be 10**18 for a binary event, fxpMaxValue should be 2**65 for a binary event
# @param fxpMinValue for a scalar from 0 to 100 should be 0 and max should be 100*10**18, for -100 to 200, it should be -100*10**18 and 200*10**18 respectively
# @param description is a description of the event / the question itself
# @param resolution is the string source/link to resolve the event
# @param branch is the branch the event is created in
# @param expDate is the epoch time in which the event expires
# @param resolutionAddress is the address that resolves an event in the beginning
# @return event if success
# range between min and max should be 1 [in fxp] or greater
# error messages otherwise
    #  0: not enough money to pay fees or event already exists
    # -1: we're either already past that date, branch doesn't exist, or description or resolver address is bad
    # -2: max value < min value or range < 1
    # -3: invalid number of outcomes
    # -4: would expire during non-reporting fork period
# .025 eth to create
# descriptionWithoutOutcomeLabels + "~|>" + outcome1label + "|"  + outcome2label + "|" + outcome3label is format for a description
# with a categorical user can set min and max to whatever, for reporting 1 is the min and max is the max then reports should be scaled between that range, for payouts it's 1 to the winning outcome or equal for all outcomes if indeterminate, you cannot trade by paying more than 1 for a share as that makes no sense
def createEvent(branch, description:str, expDate, fxpMinValue, fxpMaxValue, numOutcomes, resolution: str, resolutionAddress, currency):
    refund()
    if(MUTEX.getMutex() && !mutexWhitelisted()):
        throw()
    if(!mutexWhitelisted()):
        MUTEX.setMutex()

    periodLength = BRANCHES.getPeriodLength(branch)
    forkPeriod = BRANCHES.getForkPeriod(branch)
    checkEventCreationPreconditions()

    eventinfo = string(8 * 32 + len(description))
    eventinfo[0] = branch                                       # branch
    eventinfo[1] = expDate                                      # expiration date
    eventinfo[2] = msg.sender                                   # creator address
    eventinfo[3] = periodLength
    eventinfo[4] = fxpMinValue                                     # minimum outcome value
    eventinfo[5] = fxpMaxValue                                     # maximum outcome value
    eventinfo[6] = numOutcomes                                  # number of outcomes
    eventinfo[7] = resolutionAddress
    mcopy(eventinfo + 8 * 32, description, len(description))
    event = ripemd160(eventinfo, chars = len(eventinfo))
    if(INFO.getCreator(event)):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(0)

    wallet = create('wallet.se')
    if(!wallet.initialize(currency)):
        throw()
    REPORTING.addReporter(branch, event, 0, 0, 0)

    firstResolveBondPaid = 0
    firstResolveBondPoster = 0
    resolverPaid = REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, resolutionAddress), FIRST_RESOLVE_BOND) && REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, event), FIRST_RESOLVE_BOND)
    if(resolverPaid)
        firstResolveBondPaid = 1
        firstResolveBondPoster = resolutionAddress
    # sender / event creator paid
    elif(REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, msg.sender), FIRST_RESOLVE_BOND) && REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, event), FIRST_RESOLVE_BOND))
        firstResolveBondPaid = 1
        firstResolveBondPoster = msg.sender
    if(INFO.setInfo(event, description, msg.sender, 0, currency, wallet) and EVENTS.initializeEvent(event, branch, expDate, fxpMinValue, fxpMaxValue, numOutcomes, resolution, resolutionAddress, firstResolveBondPoster) && firstResolveBondPaid):
        if(!EVENTS.getBond(event)):
            # pay validity / indeterminate protection bond
            period = block.timestamp / TWENTY_FOUR_HR
            minFee = safeDiv(safeMul(safeMul(safeMul(COST_PER_REPORTER, baseReporters), tx.gasprice), ONE), WEI_TO_ETH)
            validityBond = (minFee * (1 + EVENTS.getPast24(period)) / (1 + EXPEVENTS.getNumberEvents(branch, BRANCHES.getVotePeriod(branch)))) / 2
            if(!currency.transferFrom(msg.sender, wallet, validityBond)):
                throw()
            EVENTS.setExpiration(event, block.timestamp)
            EVENTS.setBond(event, validityBond)
            EVENTS.addPast24(period)
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(event)
    else:
        throw()

# Create a market. Markets are the basic _tradable_ units / questions that are traded on in Augur
# @param branch is the branch of the market
# @param description is the description for a market
# @param fxpTradingFee is percent in fixedPoint
# @param events array is the list of events in a market [only 1 for now]
# @params tag1, tag2, and tag3 are the tags describing a market
# @param fxpMakerFees are the percent of the trading fee a maker pays [0-50% in fixed point]
# @param extraInfo is a string of any extra info associated with a market
# @return market if success or 1 if on an oracle only branch creation we have success
# error messages otherwise
    # -1: bad input or event doesn't exist
    # -2: event already expired
    # -3: would expire during non-reporting fork period
    # -4: market already exists
    # throw()s if not enough money to create the market and place event in the appropriate reporting period
# .05 eth to create
# need at least 1.2M gas @ gas price to cover resolution & 500k per event to calc. num reports for it - this is passed as value to this function
# need to check that it's an actual subcurrency upon market creation (maybe check send/balance funs)
# todo fix creation fee to be in eth b/c it covers gas fees...
def createMarket(branch, description: str, fxpTradingFee, event, tag1, tag2, tag3, extraInfo: str, currency):
    if(MUTEX.getMutex() && !mutexWhitelisted()):
        throw()
    if(!mutexWhitelisted()):
        MUTEX.setMutex()

    periodLength = BRANCHES.getPeriodLength(branch)
    baseReporters = BRANCHES.getBaseReporters(branch)
    creationFee = safeFxpDiv(POINT_ZERO_THREE * baseReporters, fxpTradingFee)
    # gives ether/cash amount in fixed point
    minFee = safeFxpDiv(COST_PER_REPORTER * baseReporters * tx.gasprice, WEI_TO_ETH)
    creationFee = max(minFee, creationFee)
    period = block.timestamp / TWENTY_FOUR_HR
    numOutcomes = EVENTS.getNumOutcomes(event)
    cumulativeScale = 0
    # market's trading period is the same as the last expiring event in the market
    expirationDate = EVENTS.getExpiration(event)
    futurePeriod = expirationDate / periodLength
    forkPeriod = BRANCHES.getForkPeriod(branch)
    checkMarketCreationPreconditions()

    # scalars
    fxpMaxValue = EVENTS.getMaxValue(event)
    fxpMinValue = EVENTS.getMinValue(event)
    scalar = (fxpMaxValue != TWO or fxpMinValue != ONE) and numOutcomes == 2
    if(scalar):
        # cumulativeScale is the range of a scalar
        cumulativeScale += fxpMaxValue - fxpMinValue
    if(!cumulativeScale):
        cumulativeScale = ONE

    # formation of market (hash)
    marketinfo = string(8 * 32 + len(description))
    marketinfo[0] = futurePeriod
    marketinfo[1] = fxpTradingFee
    marketinfo[2] = block.timestamp
    marketinfo[3] = tag1
    marketinfo[4] = tag2
    marketinfo[5] = tag3
    marketinfo[6] = expirationDate
    marketinfo[7] = len(description)
    mcopy(marketinfo + 8 * 32, description, chars = len(description))
    market = ripemd160(marketinfo, chars = len(marketinfo))
    # if it's already been created return 0
    if(INFO.getCreator(market)):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(-4)
    events = array(1)
    events[0] = event
    checkSubcurrencyIsValid(currency)
    # todo if wallet contract doesn't exist for a branch for a given currency need to make it or should we have an approval process for adding a token to a branch and otherwise don't allow if not in the allowed list?
    wallet = create('wallet.se')
    #winningOutcomeAddress = getOneWinningOutcomeContractAddr if 1 and getTwoWinningOutcomeContractAddrFromWhitelist if 2
    if(!wallet.setWinningOutcomeContractAddressInitialize(currency, winningOutcomeAddress)):
        throw()
    makeMarket()

    log(type = marketCreated, market)
    if(!mutexWhitelisted()):
        MUTEX.unsetMutex()
    return(market)
    
# initialize market and send money to pay for resolution
# todo fix something off with paying for resolution here and event adding and what if event already added then -500k issue and what if user doesn't send enough to resolve where is check for that
macro makeMarket():
    $payCosts = currency.transferFrom(msg.sender, INFO.getWallet(branch), creationFee)
    $infoSet = INFO.setInfo(market, description, msg.sender, creationFee, currency, wallet)
    $i = 0
    $shareContracts = array(numOutcomes)
    while $i < numOutcomes:
        $shareContracts[$i] = create('shareTokens.se')
        $i += 1
    $initializedMarket = MARKETS.initializeMarket(market, events, futurePeriod, fxpTradingFee, branch, tag1, tag2, tag3, cumulativeScale, numOutcomes, extraInfo, msg.value - COST_FOR_EVENT_REPORT_CALCULATION * tx.gasprice, creationFee, expirationDate, shareContracts, value = (msg.value - COST_FOR_EVENT_REPORT_CALCULATION * tx.gasprice))
    $makeBranchAndEventAwareOfNewMarket = BRANCHES.addMarketToBranch(branch, market) and EVENTS.addMarket(event, market)

    if($payCosts and $infoSet and $initializedMarket and $makeBranchAndEventAwareOfNewMarket):
        1
    else:
        throw()

macro addEvent():
    # cost for calculating num. of reports for an event
    if(!send(EXPEVENTS, COST_FOR_EVENT_REPORT_CALCULATION * tx.gasprice)):
        throw()
    EXPEVENTS.addEvent(branch, futurePeriod, event, COST_FOR_EVENT_REPORT_CALCULATION * tx.gasprice, currency, wallet)

# Updates a trading fee to be lower in a market
# Errors
    # -1: not the market creator
    # -2: invalid new trading fee
def updateTradingFee(market, fxpTradingFee):
    refund()
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()
    branch = MARKETS.getBranch(market)
    if(msg.sender != INFO.getCreator(market)):
        MUTEX.unsetMutex()
        return(-1)
    oldFee = MARKETS.getTradingFee(market)
    baseReporters = BRANCHES.getBaseReporters(branch)
    oldCreationFee = safeFxpDiv(POINT_ZERO_SIX * baseReporters, oldFee)
    newCreationFee = safeFxpDiv(POINT_ZERO_SIX * baseReporters, fxpTradingFee)
    if(fxpTradingFee < BRANCHES.getMinTradingFee(branch) or fxpTradingFee > oldFee):
        MUTEX.unsetMutex()
        return(-2)
    currency = INFO.getCurrency(market)
    if(!currency.transferFrom(msg.sender, BRANCHES.getWallet(branch, currency), newCreationFee - oldCreationFee) or !MARKETS.setTradingFee(market, fxpTradingFee)):
        throw()
    log(type = tradingFeeUpdated, market, fxpTradingFee)
    MUTEX.unsetMutex()
    return(1)

# Anyone can post an "Early Resolution Bond"
# This bond is equal to 0.5 * marketFee * marketValue
# This amount is the amount needed to pay the reporters in case this was frivolous.
# The market goes up for early resolution and reporters place claim to what is truth, however for early resolution, they have an additional option: 'Market is not ready to resolve'
    # this addl option is just the normal indeterminate (except here it's a bit of a special case, see below)
# In the event 'Market is not ready to resolve' is found to be the consensus, the early resolution bond is paid to the reporters for their labor.
    # and market remains with old expiration dateevent
# In the event any other option is found to be the consensus the early resolution bond is returned to the poster and then resolution is handled just like any other case.
# todo add comments re return values and test again
# test this w/ new early first resolver thing too
def pushMarketForward(branch, market):
    refund()
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()

    # can't do while forking
    forkPeriod = BRANCHES.getForkPeriod(branch)
    periodLength = BRANCHES.getPeriodLength(branch)
    currentPeriod = block.timestamp / periodLength
    if(forkPeriod == currentPeriod or currentPeriod == (forkPeriod + 1)):
        MUTEX.unsetMutex()
        return(-1)
    # if market closed or already pushed forward, return 0
    if(MARKETS.getOneWinningOutcome(market, 0) or MARKETS.getPushedForward(market)):
        MUTEX.unsetMutex()
        return(-2)
    if(MARKETS.getBranch(market) != branch):
        MUTEX.unsetMutex()
        return(0)
    event = MARKETS.getMarketEvent(market, 0)
    expiration = EVENTS.getExpiration(event)
    beingReportedOnNow = (expiration / periodLength == block.timestamp / periodLength)
    alreadyPushedForward = EVENTS.getRejectedPeriod(event) or expiration != EVENTS.getOriginalExpiration(event)
    if(alreadyPushedForward or beingReportedOnNow or EVENTS.getOutcome(event) or BACKSTOPS.getRoundTwo(event)):
        MUTEX.unsetMutex()
        return(-3)
    # push into next vote period
    period = block.timestamp / periodLength
    # figure out what's going on with subsidy system here todo
    EXPEVENTS.addEvent(branch, period, event, 0)
    # set event expiration date to be after the current reporting period ends
    EVENTS.setExpiration(event, block.timestamp)
    MARKETS.setTradingPeriod(market, period)
    MARKETS.setPushedForward(market, 1, msg.sender)
    EVENTS.setEventPushedUp(event, 1)
    payEarlyResolutionBond = MARKETS.getCurrency(market).transferFrom(msg.sender, INFO.getWallet(market), safeFxpMul(MARKETS.getTradingFee(market), MARKETS.getTotalSharesPurchased(market)) / 2)
    if(!payEarlyResolutionBond):
        throw()
    MUTEX.unsetMutex()
    return(1)

macro checkEventCreationPreconditions():
    if(!periodLength or !len(description) or !len(resolution) or expDate < block.timestamp or !resolutionAddress):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(-1)
    if(fxpMaxValue < fxpMinValue or (fxpMaxValue - fxpMinValue) < ONE or (fxpMaxValue + fxpMinValue) < fxpMaxValue):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(-2)
    if(numOutcomes < 2 or numOutcomes > 8):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(-3)
    # fix to allow event and market creation during forks at own risk
    if(forkPeriod and ((expDate / periodLength) == forkPeriod or (expDate / periodLength) == (forkPeriod + 1))):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(-4)

macro checkMarketCreationPreconditions():
    # will need to get equivalent value in usd or eth or w/e via etherex exchange for subcurrency markets
    if(!periodLength or !len(description) or fxpTradingFee < BRANCHES.getMinTradingFee(branch) or fxpTradingFee > MAX_FEE or EVENTS.getEventBranch(event) != branch or !INFO.getCreator(event)):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(-1)
    if(expirationDate < block.timestamp):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(-2)
    # todo examine why - perhaps should or shouldn't allow on fork but on regular branch
    if(forkPeriod and (futurePeriod == forkPeriod or futurePeriod == (forkPeriod + 1))):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(-3)

def putEventIntoReportingPeriod(event):
    if(MUTEX.getMutex() && !mutexWhitelisted()):
        throw()
    if(!mutexWhitelisted()):
        MUTEX.setMutex()
    # add events to the appropriate reporting period
    branch = EVENTS.getEventBranch(event)
    periodLength = BRANCHES.getPeriodLength(branch)
    baseReporters = BRANCHES.getBaseReporters(branch)
    # gives ether/cash amount in fixed point
    minFee = safeFxpDiv(COST_PER_REPORTER * baseReporters * tx.gasprice, WEI_TO_ETH)
    period = block.timestamp / TWENTY_FOUR_HR
    # want to resolve as soon as possible
    futurePeriod = block.number / periodLength

    if(!EVENTS.getChallenged(event) && !EVENTS.getFirstPreliminaryOutcome(event) && block.timestamp > (EVENTS.getOriginalExpiration(event) + THREE_DAYS)):
        addEvent()
        EVENTS.setChallenged(event)
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(1)
    else:
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(0)

def challengeInitialResolution(event):
    if(MUTEX.getMutex() && !mutexWhitelisted()):
        throw()
    if(!mutexWhitelisted()):
        MUTEX.setMutex()
    # add events to the appropriate reporting period
    branch = EVENTS.getEventBranch(event)
    currency = INFO.getCurrency(event)
    periodLength = BRANCHES.getPeriodLength(branch)
    baseReporters = BRANCHES.getBaseReporters(branch)
    # gives ether/cash amount in fixed point
    minFee = safeFxpDiv(COST_PER_REPORTER * baseReporters * tx.gasprice, WEI_TO_ETH)
    period = block.timestamp / TWENTY_FOUR_HR
    # want to resolve as soon as possible
    futurePeriod = block.number / periodLength

    if(!EVENTS.getChallenged(event) && block.timestamp < (EVENTS.getOriginalExpiration(event) + 2 * THREE_DAYS) && EVENTS.getFirstPreliminaryOutcome(event)):
        addEvent()
        EVENTS.setChallenged(event)
        payExtraBond()
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(1)
    else:
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(0)

macro payExtraBond():
    baseReporters = BRANCHES.getBaseReporters(branch)
    # todo change this to be based off of reporting costs for market given outstanding shares
    amount = safeFxpDiv(5*COST_PER_REPORTER * baseReporters * tx.gasprice, WEI_TO_ETH)
    if(!currency.transferFrom(msg.sender, wallet, amount)):
        throw()
    EVENTS.setExtraBond(event, amount)

# could create a contract which is the sender which uses ecrecover to verify a realitykeys signature on a hash + result, 0 goes to 10**18, 1 goes to 2**65
# with oraclize.it do value = parseInt(result, 18) to get it in the proper 10**18 base, then do (value - min) * 10**18 / range to submit the result to augur
# unethical is just a .5 outcome for scalar/categorical, 1.5 for binary as usual
def resolveEarly(event, outcome):
    if(MUTEX.getMutex() && !mutexWhitelisted()):
        throw()
    if(!mutexWhitelisted()):
        MUTEX.setMutex()
    if(msg.sender == EVENTS.getResolutionAddress(event) && block.timestamp > EVENTS.getExpiration(event) && block.timestamp < (EVENTS.getExpiration(event) + 86400*3)):
        EVENTS.setFirstPreliminaryOutcome(event, outcome)
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(1)
    else:
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(0)
        

# Allows a user to directly add fees / effectively pay for oracle usage w/o having to trade using the default contracts
# Returns 1 if successful, 0 if too late to send additional fees
def addFees(market, amount):
    branch = MARKETS.getBranch(market)
    notVotingOnYet = BRANCHES.getVotePeriod(branch) < MARKETS.getTradingPeriod(market)
    if(notVotingOnYet):
        currency = MARKETS.getCurrency(market)
        if(!currency.transferFrom(msg.sender, BRANCHES.getWallet(branch, currency), amount)):
            throw()
        MARKETS.addFees(market, amount)
        MARKETS.adjustPeriodFeeValue(branch, MARKETS.getTradingPeriod(market), amount)
        return(1)
    else:
        return(0)
