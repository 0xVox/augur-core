# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

extern controller: [lookup:[int256]:int256, checkWhitelist:[int256]:int256]

BRANCHES = self.controller.lookup('branches')
extern branches: [addCurrency:[int256,int256,int256,int256]:int256, addMarketToBranch:[int256,int256]:int256, disableCurrency:[int256,int256]:int256, getBaseReporters:[int256]:int256, getBranchByNum:[int256]:int256, getBranchCurrency:[int256,int256]:int256, getBranchWallet:[int256,int256]:int256, getBranches:[]:int256[], getBranchesStartingAt:[int256]:int256[], getCreationDate:[int256]:int256, getCurrencyActive:[int256,int256]:int256, getCurrencyByContract:[int256,int256]:int256, getCurrencyRate:[int256,int256]:int256, getEventForkedOver:[int256]:int256, getForkPeriod:[int256]:int256, getForkTime:[int256]:int256, getInitialBalance:[int256,int256,int256]:int256, getMarketIDsInBranch:[int256,int256,int256]:int256[], getMinTradingFee:[int256]:int256, getMostRecentChild:[int256]:int256, getNumBranches:[]:int256, getNumCurrencies:[int256]:int256, getNumMarketsBranch:[int256]:int256, getOracleOnly:[int256]:int256, getParent:[int256]:int256, getParentPeriod:[int256]:int256, getPeriodLength:[int256]:int256, getVotePeriod:[int256]:int256, incrementPeriod:[int256]:int256, initializeBranch:[int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, reactivateCurrency:[int256,int256]:int256, removeLastCurrency:[int256]:int256, replaceCurrency:[int256,int256,int256,int256,int256]:int256, setBaseReporters:[int256,int256]:int256, setEventForkedOver:[int256,int256]:int256, setForkPeriod:[int256]:int256, setInitialBalance:[int256,int256,int256,int256]:int256, setMostRecentChild:[int256,int256]:int256, updateCurrencyRate:[int256,int256,int256,int256]:int256, updateNumCurrencies:[int256,int256]:int256]

INFO = self.controller.lookup('info')
extern info: [getCreationFee:[int256]:int256, getCreator:[int256]:int256, getCurrency:[int256]:int256, getDescription:[int256]:bytes, getDescriptionLength:[int256]:int256, getWallet:[int256]:int256, setCurrencyAndWallet:[int256,int256,int256]:int256, setInfo:[int256,bytes,int256,int256,int256,int256]:int256]

MARKETS = self.controller.lookup('markets')
extern markets: [addFees:[int256,int256]:int256, addOrder:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, getBondsMan:[int256]:int256, getBranch:[int256]:int256, getCumulativeScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getGasSubsidy:[int256]:int256, getLastExpDate:[int256]:int256, getLastOrder:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getMarketEvent:[int256,int256]:int256, getMarketEvents:[int256]:int256[], getMarketNumOutcomes:[int256]:int256, getMarketShareContracts:[int256]:int256[], getMarketsHash:[int256]:int256, getNumEvents:[int256]:int256, getOneWinningOutcome:[int256,int256]:int256, getOrderIDs:[int256]:int256[], getOriginalTradingPeriod:[int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPrevID:[int256,int256]:int256, getPushedForward:[int256]:int256, getSender:[]:int256, getSharesPurchased:[int256,int256]:int256, getSharesValue:[int256]:int256, getTotalOrders:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, getVolume:[int256]:int256, getWinningOutcomes:[int256]:int256[], initializeMarket:[int256,int256[],int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256,int256[]]:int256, modifyParticipantShares:[int256,int256,int256,int256,int256]:int256, modifyShares:[int256,int256,int256]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, removeOrderFromMarket:[int256,int256]:int256, returnTags:[int256]:int256[], setPrice:[int256,int256,int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, setWinningOutcomes:[int256,int256[]]:int256]

BACKSTOPS = self.controller.lookup('backstops')
extern backstops: [adjForkBondPaid:[int256,int256]:int256, doRoundTwoRefund:[int256,int256]:int256, getBondAmount:[int256]:int256, getBondPaid:[int256]:int256, getBondPoster:[int256]:int256, getBondReturned:[int256]:int256, getDisputedOverEthics:[int256]:int256, getFinal:[int256]:int256, getForkBondPaid:[int256]:int256, getForkBondPoster:[int256]:int256, getForkedOverEthicality:[int256]:int256, getMoved:[int256]:int256, getOriginalBranch:[int256]:int256, getOriginalEthicality:[int256]:int256, getOriginalOutcome:[int256]:int256, getOriginalVotePeriod:[int256]:int256, getResolved:[int256,int256]:int256, getRoundTwo:[int256]:int256, increaseBondPaid:[int256,int256]:int256, setBondAmount:[int256,int256]:int256, setBondPoster:[int256,int256]:int256, setBondReturned:[int256]:int256, setDisputedOverEthics:[int256]:int256, setFinal:[int256]:int256, setForkBondPoster:[int256,int256]:int256, setForkedOverEthicality:[int256]:int256, setMoved:[int256]:int256, setOriginalBranch:[int256,int256]:int256, setOriginalEthicality:[int256,int256]:int256, setOriginalOutcome:[int256,int256]:int256, setOriginalVotePeriod:[int256,int256]:int256, setResolved:[int256,int256,int256]:int256, setRoundTwo:[int256,int256]:int256, setRoundTwoRefund:[int256,int256]:int256]

REPORTING = self.controller.lookup('reporting')
extern reporting: [addDormantRep:[int256,int256,int256]:int256, addRep:[int256,int256,int256]:int256, addReporter:[int256,int256,int256,int256,int256]:int256, adjustActiveRep:[int256,int256]:int256, balanceOfReporter:[int256,int256]:int256, claimInitialRepFromRepContract:[]:int256, getActiveRep:[int256]:int256, getDormantRepByIndex:[int256,int256]:int256, getNumberReporters:[int256]:int256, getRepBalance:[int256,int256]:int256, getRepByIndex:[int256,int256]:int256, getReportedOnNonFinalRoundTwoEvent:[int256,int256]:int256, getReporterID:[int256,int256]:int256, getReputation:[int256]:int256[], getTotalRep:[int256]:int256, repIDToIndex:[int256,int256]:int256, setInitialReporters:[int256]:int256, setRep:[int256,int256,int256]:int256, setReportedOnNonFinalRoundTwoEvent:[int256,int256,int256]:int256, subtractDormantRep:[int256,int256,int256]:int256, subtractRep:[int256,int256,int256]:int256, totalSupply:[int256]:int256]

EVENTS = self.controller.lookup('events')
extern events: [addMarket:[int256,int256]:int256, addPast24:[int256]:int256, addReportersPaidSoFar:[int256]:int256, getBond:[int256]:int256, getChallenged:[int256]:int256, getCreationTime:[int256]:int256, getEarlyResolutionBond:[int256]:int256, getEthics:[int256]:int256, getEventBranch:[int256]:int256, getEventInfo:[int256]:int256[], getEventPushedUp:[int256]:int256, getEventResolution:[int256]:bytes, getExpiration:[int256]:int256, getExtraBond:[int256]:int256, getExtraBondPoster:[int256]:int256, getFirstPreliminaryOutcome:[int256]:int256, getForkEthicality:[int256]:int256, getForkOutcome:[int256]:int256, getForkResolveAddress:[int256]:int256, getForked:[int256]:int256, getForkedDone:[int256]:int256, getMarket:[int256,int256]:int256, getMarkets:[int256]:int256[], getMaxValue:[int256]:int256, getMinValue:[int256]:int256, getMode:[int256]:int256, getNumMarkets:[int256]:int256, getNumOutcomes:[int256]:int256, getOriginalExpiration:[int256]:int256, getOutcome:[int256]:int256, getPast24:[int256]:int256, getRejected:[int256]:int256, getRejectedPeriod:[int256]:int256, getReportersPaidSoFar:[int256]:int256, getReportingThreshold:[int256]:int256, getResolutionAddress:[int256]:int256, getResolutionLength:[int256]:int256, getResolveBondPoster:[int256]:int256, getUncaughtOutcome:[int256]:int256, initializeEvent:[int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256]:int256, setBond:[int256,int256]:int256, setBranch:[int256,int256]:int256, setChallenged:[int256]:int256, setCreationTime:[int256]:int256, setEarlyResolutionBond:[int256,int256]:int256, setEthics:[int256,int256]:int256, setEventPushedUp:[int256,int256]:int256, setExpiration:[int256,int256]:int256, setExtraBond:[int256,int256]:int256, setExtraBondPoster:[int256,int256]:int256, setFirstPreliminaryOutcome:[int256,int256]:int256, setForkDone:[int256]:int256, setForkEthicality:[int256,int256]:int256, setForkOutcome:[int256,int256]:int256, setForked:[int256]:int256, setMode:[int256,int256]:int256, setOriginalExpiration:[int256,int256]:int256, setOutcome:[int256,int256]:int256, setRejected:[int256,int256]:int256, setThreshold:[int256,int256]:int256, setUncaughtOutcome:[int256,int256]:int256]

EXPEVENTS = self.controller.lookup('expiringEvents')
extern expiringEvents: [addEvent:[int256,int256,int256,int256,int256,int256,int256]:int256, addReportToReportsSubmitted:[int256,int256,int256]:int256, addRoundTwo:[int256,int256]:int256, addToWeightOfReport:[int256,int256,int256,int256]:int256, adjustPeriodFeeValue:[int256,int256,int256]:int256, countReportAsSubmitted:[int256,int256,int256,int256,int256]:int256, deleteEvent:[int256,int256,int256]:int256, getActiveReporters:[int256,int256,int256,int256]:int256[], getAfterFork:[int256,int256]:int256, getAfterRep:[int256,int256,int256]:int256, getBeforeRep:[int256,int256,int256]:int256, getCurrentMode:[int256,int256]:int256, getCurrentModeItems:[int256,int256]:int256, getEthicReport:[int256,int256,int256,int256]:int256, getEvent:[int256,int256,int256]:int256, getEventIndex:[int256,int256,int256]:int256, getEventWeight:[int256,int256,int256]:int256, getEvents:[int256,int256]:int256[], getEventsRange:[int256,int256,int256,int256]:int256[], getFeeValue:[int256,int256]:int256, getLesserReportNum:[int256,int256,int256]:int256, getNumActiveReporters:[int256,int256]:int256, getNumEventsToReportOn:[int256,int256]:int256, getNumRemoved:[int256,int256]:int256, getNumReportsSubmitted:[int256,int256,int256]:int256, getNumRequired:[int256,int256]:int256, getNumRoundTwo:[int256,int256]:int256, getNumberEvents:[int256,int256]:int256, getPeriodDormantRep:[int256,int256,int256]:int256, getPeriodRepWeight:[int256,int256,int256]:int256, getReport:[int256,int256,int256,int256]:int256, getReportHash:[int256,int256,int256,int256]:int256, getReportsCommitted:[int256,int256,int256]:int256, getRequired:[int256,int256,int256]:int256, getSaltyEncryptedHash:[int256,int256,int256,int256]:int256, getSubsidy:[int256,int256,int256]:int256, getWeightOfReport:[int256,int256,int256]:int256, moveEvent:[int256,int256]:int256, refundCost:[int256,int256,int256,int256]:int256, removeEvent:[int256,int256]:int256, setAfterRep:[int256,int256,int256,int256]:int256, setBeforeRep:[int256,int256,int256,int256]:int256, setCurrentMode:[int256,int256,int256]:int256, setCurrentModeItems:[int256,int256,int256]:int256, setEthicReport:[int256,int256,int256,int256,int256]:int256, setEventRequired:[int256,int256,int256]:int256, setEventWeight:[int256,int256,int256,int256]:int256, setLesserReportNum:[int256,int256,int256,int256]:int256, setNumEventsToReportOn:[int256]:int256, setPeriodDormantRep:[int256,int256,int256,int256]:int256, setPeriodRepWeight:[int256,int256,int256,int256]:int256, setReport:[int256,int256,int256,int256,int256]:int256, setReportHash:[int256,int256,int256,int256,int256]:int256, setSaltyEncryptedHash:[int256,int256,int256,int256,int256]:int256]

MUTEX = self.controller.lookup('mutex')
extern mutex: [getMutex:[]:int256, setMutex:[]:int256, unsetMutex:[]:int256]

FXP = self.controller.lookup('fxpFunctions')
extern fxpFunctions: [fxExp:[int256]:int256, fxLog:[int256]:int256]

extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

extern forkResolveContract: [resolveFork:[]:int256]

extern wallet: [initialize:[int256]:int256, setWinningOutcomeContractAddressInitialize:[int256,int256]:int256, transfer:[address,uint256]:int256]

inset('../macros/refund.sem')
inset('../macros/float.sem')
inset('../macros/eventHelpers.sem')

data controller

event marketCreated(market)
event tradingFeeUpdated(market, fxpTradingFee)

macro POINT_ZERO_THREE: 553402322211286528
macro COST_PER_REPORTER: 3500000
macro COST_FOR_EVENT_REPORT_CALCULATION: 500000
macro MAX_FEE: 10 ** 17
macro THREE_DAYS: 259200
macro FIRST_RESOLVE_BOND: 11 * ONE
macro SECONDS_PER_YEAR: 31557600
macro 10_PERCENT_RATE: 100000000000000000
# may want to reconfirm this again
macro COST_FOR_MARKET_RESOLUTION: 1000000

macro checkSubcurrencyIsValid($contract):
    allowance = $contract.allowance(msg.sender, self)
    balance = $contract.balanceOf(self)
    transfer = $contract.transfer(msg.sender, 0)
    transferFrom = $contract.transferFrom(self, msg.sender, 0)
    approve = $contract.approve(self, 0)

macro checkForkResolveContractIsValid($contract):
    resolve = $contract.resolveFork()


### Allows creation of events and markets and manipulating them

# def createSingleEventMarket(branch, description:str, expDate, fxpMinValue, fxpMaxValue, numOutcomes, resolution:str, fxpTradingFee, tag1, tag2, tag3, fxpMakerFees, extraInfo:str):
#     event = self.createEvent(branch, description, expDate, fxpMinValue, fxpMaxValue, numOutcomes, resolution, call=delegate)
#     market = self.createMarket(branch, description, fxpTradingFee, [event], tag1, tag2, tag3, fxpMakerFees, extraInfo, call=delegate)
#     return(market)

# Create an event. Events are the basic units / questions that are reported on in Augur by reporters
# @param numOutcomes is number of outcomes for this event, e.g. quarter mile times from 10.0 to 11.0 would be 11 outcomes (if incremented by 0.1)
# @param fxpMinValue should be 10**18 for a binary event, fxpMaxValue should be 2**65 for a binary event
# @param fxpMinValue for a scalar from 0 to 100 should be 0 and max should be 100*10**18, for -100 to 200, it should be -100*10**18 and 200*10**18 respectively
# @param description is a description of the event / the question itself
# @param resolution is the string source/link to resolve the event
# @param branch is the branch the event is created in
# @param expDate is the epoch time in which the event expires
# @param resolutionAddress is the address that resolves an event in the beginning
# @param forkResolveAddress is the address for the contract for an event to use to resolve a fork, it's an optional parameter so may be 0 if the event chooses to use the default fork resolution, it should whitelist forking.se
# @return event if success
# range between min and max should be 1 [in fxp] or greater
# error messages otherwise
    #  0: not enough money to pay fees or event already exists
    # -1: we're either already past that date, branch doesn't exist, or description or resolver address is bad
    # -2: max value < min value or range < 1
    # -3: invalid number of outcomes
    # -4: don't allow events to be created that expire in the last 48 hr of this current period [and thus being reported on next period] if a fork was made [this'll allow people to have time to claim rep on the fork, not result in weird issues with calculating events to report on changing due to active rep changing as people claim rep on the new fork, and only make people have to worry about reporting on the forked event next period]
    # -5: currency isn't an approved branch currency
# .025 eth to create
# descriptionWithoutOutcomeLabels + "~|>" + outcome1label + "|"  + outcome2label + "|" + outcome3label is format for a description
# with a categorical user can set min and max to whatever, for reporting 1 is the min and max is the max then reports should be scaled between that range from 0-2, for payouts it's 1 to the winning outcome or equal for all outcomes if indeterminate, you cannot trade by paying more than 1 for a share as that makes no sense
# for binary it's 1 as min and 2 as max
def init():
    self.controller = 0xC001D00D

def ok():
    return(1)
# def createEvent(branch, description:str, expDate, fxpMinValue, fxpMaxValue, numOutcomes, resolution: str, resolutionAddress, currency, forkResolveAddress):
#     refund()
#     if(MUTEX.getMutex() && !isCallerWhitelisted()):
#         throw()
#     if(!isCallerWhitelisted()):
#         MUTEX.setMutex()

#     periodLength = BRANCHES.getPeriodLength(branch)
#     checkEventCreationPreconditions()

#     eventInfo = string(8 * 32 + len(description))
#     eventInfo[0] = branch                                       # branch
#     eventInfo[1] = expDate                                      # expiration date
#     eventInfo[2] = msg.sender                                   # creator address
#     eventInfo[3] = periodLength
#     eventInfo[4] = fxpMinValue                                     # minimum outcome value
#     eventInfo[5] = fxpMaxValue                                     # maximum outcome value
#     eventInfo[6] = numOutcomes                                  # number of outcomes
#     eventInfo[7] = resolutionAddress
#     mcopy(eventInfo + 8 * 32, description, len(description))
#     event = ripemd160(eventInfo, chars = len(eventInfo))
#     if(INFO.getCreator(event)):
#         if(!isCallerWhitelisted()):
#             MUTEX.unsetMutex()
#         return(0)

#     checkSubcurrencyIsValid(currency)
#     wallet = create('wallet.se')
#     if(!wallet.initialize(currency)):
#         throw()
#     REPORTING.addReporter(branch, event, 0, 0, 0)

#     firstResolveBondPaid = 0
#     firstResolveBondPoster = 0
#     # sender / event creator paid
#     # todo add if no resolution address just put in regular vote period as normal but charge extra
#     if(REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, msg.sender), FIRST_RESOLVE_BOND) && REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, event), FIRST_RESOLVE_BOND)):
#         firstResolveBondPaid = 1
#         firstResolveBondPoster = msg.sender
#     if(INFO.setInfo(event, description, msg.sender, 0, currency, wallet) and EVENTS.initializeEvent(event, branch, expDate, fxpMinValue, fxpMaxValue, numOutcomes, resolution, resolutionAddress, firstResolveBondPoster, forkResolveAddress) && firstResolveBondPaid):
#         if(!EVENTS.getBond(event)):
#             # pay validity / indeterminate protection bond
#             period = block.timestamp / TWENTY_FOUR_HR
#             baseReporters = BRANCHES.getBaseReporters(branch)
#             minFee = safeFxpMul(safeMul(safeMul(COST_PER_REPORTER, baseReporters), tx.gasprice), BRANCHES.getCurrencyRate(branch, currency))
#             if(!minFee):
#                 throw()
#             validityBond = (minFee * (1 + EVENTS.getPast24(period)) / (1 + EXPEVENTS.getNumberEvents(branch, BRANCHES.getVotePeriod(branch)))) / 2
#             if(!currency.transferFrom(msg.sender, wallet, validityBond)):
#                 throw()
#             EVENTS.setExpiration(event, block.timestamp)
#             EVENTS.setBond(event, validityBond)
#             EVENTS.addPast24(period)
#         if(!isCallerWhitelisted()):
#             MUTEX.unsetMutex()
#         return(event)
#     else:
#         throw()

# # Create a market. Markets are the basic _tradable_ units / questions that are traded on in Augur
# # @param branch is the branch of the market
# # @param description is the description for a market
# # @param fxpTradingFee is percent in fixedPoint
# # @param events array is the list of events in a market [only 1 for now]
# # @params tag1, tag2, and tag3 are the tags describing a market
# # @param fxpMakerFees are the percent of the trading fee a maker pays [0-50% in fixed point]
# # @param extraInfo is a string of any extra info associated with a market
# # @return market if success or 1 if on an oracle only branch creation we have success
# # error messages otherwise
#     # -1: bad input or event doesn't exist
#     # -2: event already expired
#     # -4: market already exists
#     # -5: currency isn't an approved branch currency
#     # -6: didn't pay enough for market resolution gas cost
#     # throw()s if not enough money to create the market and place event in the appropriate reporting period
# # .05 eth to create
# # need at least 1.2M gas @ gas price to cover resolution & 500k per event to calc. num reports for it - this is passed as value to this function
# # need to check that it's an actual subcurrency upon market creation
# def createMarket(branch, description: str, fxpTradingFee, event, tag1, tag2, tag3, extraInfo: str, currency):
#     if(MUTEX.getMutex() && !isCallerWhitelisted()):
#         throw()
#     if(!isCallerWhitelisted()):
#         MUTEX.setMutex()

#     periodLength = BRANCHES.getPeriodLength(branch)
#     baseReporters = BRANCHES.getBaseReporters(branch)
#     creationFee = safeFxpMul(safeFxpDiv(POINT_ZERO_THREE * baseReporters, fxpTradingFee), BRANCHES.getCurrencyRate(branch, currency))
#     # gives ether/cash amount in fixed point
#     minFee = safeFxpMul(safeMul(safeMul(COST_PER_REPORTER, baseReporters), tx.gasprice), BRANCHES.getCurrencyRate(branch, currency))
#     creationFee = max(minFee, creationFee)
#     if(!creationFee):
#         throw()
#     period = block.timestamp / TWENTY_FOUR_HR
#     numOutcomes = EVENTS.getNumOutcomes(event)
#     cumulativeScale = 0
#     # market's trading period is the same as the last expiring event in the market
#     expirationDate = EVENTS.getExpiration(event)
#     futurePeriod = expirationDate / periodLength
#     checkMarketCreationPreconditions()

#     # scalars
#     fxpMaxValue = EVENTS.getMaxValue(event)
#     fxpMinValue = EVENTS.getMinValue(event)
#     scalar = (fxpMaxValue != TWO or fxpMinValue != ONE) and numOutcomes == 2
#     if(scalar):
#         # cumulativeScale is the range of a scalar
#         cumulativeScale += fxpMaxValue - fxpMinValue
#     if(!cumulativeScale):
#         cumulativeScale = ONE

#     # formation of market (hash)
#     marketInfo = string(8 * 32 + len(description))
#     marketInfo[0] = futurePeriod
#     marketInfo[1] = fxpTradingFee
#     marketInfo[2] = block.timestamp
#     marketInfo[3] = tag1
#     marketInfo[4] = tag2
#     marketInfo[5] = tag3
#     marketInfo[6] = expirationDate
#     marketInfo[7] = len(description)
#     mcopy(marketInfo + 8 * 32, description, chars = len(description))
#     market = ripemd160(marketInfo, chars = len(marketInfo))
#     # if it's already been created return 0
#     if(INFO.getCreator(market)):
#         if(!isCallerWhitelisted()):
#             MUTEX.unsetMutex()
#         return(-4)
#     events = array(1)
#     events[0] = event
#     checkSubcurrencyIsValid(currency)
#     wallet = create('wallet.se')
#     #winningOutcomeAddress = getOneWinningOutcomeContractAddr if 1 and getTwoWinningOutcomeContractAddrFromWhitelist if 2
#     if(!wallet.setWinningOutcomeContractAddressInitialize(currency, winningOutcomeAddress)):
#         throw()
#     shareContracts = array(numOutcomes)
#     i = 0
#     while i < numOutcomes:
#         shareContracts[i] = create('shareTokens.se')
#         i += 1
#     makeMarket()

#     log(type = marketCreated, market)
#     if(!isCallerWhitelisted()):
#         MUTEX.unsetMutex()
#     return(market)

# # initialize market and send money to pay for resolution
# macro makeMarket():
#     $payCosts = currency.transferFrom(msg.sender, INFO.getWallet(branch), creationFee)
#     $infoSet = INFO.setInfo(market, description, msg.sender, creationFee, currency, wallet)

#     $initializedMarket = MARKETS.initializeMarket(market, events, futurePeriod, fxpTradingFee, branch, tag1, tag2, tag3, cumulativeScale, numOutcomes, extraInfo, msg.value, creationFee, expirationDate, shareContracts, value = msg.value)
#     $makeBranchAndEventAwareOfNewMarket = BRANCHES.addMarketToBranch(branch, market) and EVENTS.addMarket(event, market)

#     # event creation bond pay w/ markets
#         # A = P*e^rt
#         # so A - P gives us amount to return to person
#     currency = INFO.getCurrency(events[0])
#     $bondPrincipal = EVENTS.getBond(events[0])
#     $time = (expirationDate - block.timestamp) * ONE / SECONDS_PER_YEAR
#     $amountToPay = $bondPrincipal*FXP.fxExp(safeFxpMul($time, 10_PERCENT_RATE)) - $bondPrincipal
#     $paidEventBondPoster = currency.transferFrom(msg.sender, INFO.getCreator(events[0]), $amountToPay)
#     if($payCosts and $infoSet and $initializedMarket and $makeBranchAndEventAwareOfNewMarket and $paidEventBondPoster):
#         1
#     else:
#         throw()

# macro addEvent():
#     # cost for calculating num. of reports for an event
#     if(!send(EXPEVENTS, COST_FOR_EVENT_REPORT_CALCULATION * tx.gasprice)):
#         throw()
#     forkPeriod = BRANCHES.getForkPeriod(branch)
#     afterFork = 0
#     if(futurePeriod == (forkPeriod + 1) or futurePeriod == (forkPeriod + 2)):
#         afterFork = 1
#     EXPEVENTS.addEvent(branch, futurePeriod, event, COST_FOR_EVENT_REPORT_CALCULATION * tx.gasprice, currency, wallet, afterFork)

# # Updates a trading fee to be lower in a market
# # Errors
#     # -1: not the market creator
#     # -2: invalid new trading fee
# def updateTradingFee(market, fxpTradingFee):
#     refund()
#     if(MUTEX.getMutex()):
#         throw()
#     MUTEX.setMutex()
#     branch = MARKETS.getBranch(market)
#     if(msg.sender != INFO.getCreator(market)):
#         MUTEX.unsetMutex()
#         return(-1)
#     oldFee = MARKETS.getTradingFee(market)
#     currency = INFO.getCurrency(market)
#     baseReporters = BRANCHES.getBaseReporters(branch)
#     oldCreationFee = safeFxpMul(safeFxpDiv(POINT_ZERO_SIX * baseReporters, oldFee), BRANCHES.getCurrencyRate(branch, currency))
#     newCreationFee = safeFxpMul(safeFxpDiv(POINT_ZERO_SIX * baseReporters, fxpTradingFee), BRANCHES.getCurrencyRate(branch, currency))
#     if(fxpTradingFee < BRANCHES.getMinTradingFee(branch) or fxpTradingFee > oldFee):
#         MUTEX.unsetMutex()
#         return(-2)
#     if(!currency.transferFrom(msg.sender, BRANCHES.getBranchWallet(branch, currency), newCreationFee - oldCreationFee) or !MARKETS.setTradingFee(market, fxpTradingFee)):
#         throw()
#     log(type = tradingFeeUpdated, market, fxpTradingFee)
#     MUTEX.unsetMutex()
#     return(1)

# # Anyone can post an "Early Resolution Bond"
# # This bond is equal to 0.5 * marketFee * marketValue
# # This amount is the amount needed to pay the reporters in case this was frivolous.
# # The market goes up for early resolution and reporters place claim to what is truth, however for early resolution, they have an additional option: 'Market is not ready to resolve'
#     # this addl option is just the normal indeterminate (except here it's a bit of a special case, see below)
# # In the event 'Market is not ready to resolve' is found to be the consensus, the early resolution bond is paid to the reporters for their labor.
#     # and market remains with old expiration dateevent
# # In the event any other option is found to be the consensus the early resolution bond is returned to the poster and then resolution is handled just like any other case.
# # Errors:
#     # 0: invalid branch
#     # -1: not allowed for events during a fork scenario for events that were created before the fork until the fork is over
#     # -2: market already closed or already pushed forward
#     # -3: event has already been pushed forward, is being reported on now, or has an outcome already
#     # -4: event isn't in a regular reporting cycle yet
# def pushMarketForward(branch, market):
#     refund()
#     if(MUTEX.getMutex()):
#         throw()
#     MUTEX.setMutex()

#     periodLength = BRANCHES.getPeriodLength(branch)
#     currentPeriod = block.timestamp / periodLength
#     if(MARKETS.getOneWinningOutcome(market, 0) or MARKETS.getPushedForward(market)):
#         MUTEX.unsetMutex()
#         return(-2)
#     if(MARKETS.getBranch(market) != branch):
#         MUTEX.unsetMutex()
#         return(0)
#     event = MARKETS.getMarketEvent(market, 0)
#     if(eventCreatedPriorToFork(event)):
#         return(-1)
#     event = MARKETS.getMarketEvent(market, 0)
#     expiration = EVENTS.getExpiration(event)
#     beingReportedOnNow = (expiration / periodLength == block.timestamp / periodLength)
#     alreadyPushedForward = EVENTS.getRejectedPeriod(event) or expiration != EVENTS.getOriginalExpiration(event)
#     if(alreadyPushedForward or beingReportedOnNow or EVENTS.getOutcome(event) or BACKSTOPS.getRoundTwo(event)):
#         MUTEX.unsetMutex()
#         return(-3)
#     if(EXPEVENTS.getEvent(branch, expiration / periodLength, EXPEVENTS.getEventIndex(branch, expiration / periodLength, event)) != event):
#         return(-4)
#     # push into next vote period
#     period = block.timestamp / periodLength
#     forkPeriod = BRANCHES.getForkPeriod(branch)
#     afterFork = 0
#     if(period == (forkPeriod + 1) or period == (forkPeriod + 2)):
#         afterFork = 1
#     currency = INFO.getCurrency(event)
#     wallet = INFO.getWallet(event)
#     EXPEVENTS.addEvent(branch, period, event, COST_FOR_EVENT_REPORT_CALCULATION * tx.gasprice, currency, wallet, afterFork)

#     # set event expiration date to be after the current reporting period ends
#     EVENTS.setExpiration(event, block.timestamp)
#     MARKETS.setTradingPeriod(market, period)
#     MARKETS.setPushedForward(market, 1, msg.sender)
#     EVENTS.setEventPushedUp(event, 1)
#     bond = safeFxpMul(MARKETS.getTradingFee(market), MARKETS.getTotalSharesPurchased(market)) / 2
#     payEarlyResolutionBond = INFO.getCurrency(market).transferFrom(msg.sender, INFO.getWallet(market), bond)
#     if(!payEarlyResolutionBond or !EVENTS.setEarlyResolutionBond(event, bond)):
#         throw()
#     MUTEX.unsetMutex()
#     return(1)

# # Errors:
#     # -1: not allowed for events during a fork scenario for events that were created before the fork until the fork is over
# def putEventIntoReportingPeriod(event):
#     if(MUTEX.getMutex() && !isCallerWhitelisted()):
#         throw()
#     if(!isCallerWhitelisted()):
#         MUTEX.setMutex()
#     # add events to the appropriate reporting period
#     branch = EVENTS.getEventBranch(event)
#     periodLength = BRANCHES.getPeriodLength(branch)
#     baseReporters = BRANCHES.getBaseReporters(branch)
#     # want to resolve as soon as possible
#     futurePeriod = block.timestamp / periodLength
#     if(eventCreatedPriorToFork(event)):
#         return(-1)

#     if(!EVENTS.getChallenged(event) && !EVENTS.getFirstPreliminaryOutcome(event) && block.timestamp > (EVENTS.getExpiration(event) + THREE_DAYS)):
#         addEvent()
#         EVENTS.setExpiration(event, block.timestamp)
#         EVENTS.setChallenged(event)
#         if(!isCallerWhitelisted()):
#             MUTEX.unsetMutex()
#         return(1)
#     else:
#         if(!isCallerWhitelisted()):
#             MUTEX.unsetMutex()
#         return(0)

# # Errors:
#     # -1: not allowed for events during a fork scenario for events that were created before the fork until the fork is over
# def challengeInitialResolution(event):
#     if(MUTEX.getMutex() && !isCallerWhitelisted()):
#         throw()
#     if(!isCallerWhitelisted()):
#         MUTEX.setMutex()
#     # add events to the appropriate reporting period
#     branch = EVENTS.getEventBranch(event)
#     currency = INFO.getCurrency(event)
#     periodLength = BRANCHES.getPeriodLength(branch)
#     baseReporters = BRANCHES.getBaseReporters(branch)

#     # want to resolve as soon as possible
#     futurePeriod = block.timestamp / periodLength
#     if(eventCreatedPriorToFork(event)):
#         return(-1)

#     if(!EVENTS.getChallenged(event) && block.timestamp < (EVENTS.getExpiration(event) + 2 * THREE_DAYS) && EVENTS.getFirstPreliminaryOutcome(event)):
#         addEvent()
#         EVENTS.setExpiration(event, block.timestamp)
#         EVENTS.setChallenged(event)
#         payExtraBond()
#         if(!isCallerWhitelisted()):
#             MUTEX.unsetMutex()
#         return(1)
#     else:
#         if(!isCallerWhitelisted()):
#             MUTEX.unsetMutex()
#         return(0)

# # could create a contract which is the sender which uses ecrecover to verify a realitykeys signature on a hash + result, 0 goes to 10**18, 1 goes to 2**65
# # with oraclize.it do value = parseInt(result, 18) to get it in the proper 10**18 base, then do (value - min) * 10**18 / range to submit the result to augur
# # unethical is just a .5 outcome for scalar/categorical, 1.5 for binary as usual
# def resolveEarly(event, outcome):
#     if(MUTEX.getMutex() && !isCallerWhitelisted()):
#         throw()
#     if(!isCallerWhitelisted()):
#         MUTEX.setMutex()
#     if(msg.sender == EVENTS.getResolutionAddress(event) && block.timestamp > EVENTS.getExpiration(event) && block.timestamp < (EVENTS.getExpiration(event) + THREE_DAYS)):
#         # outcome of 1 is 1/10**18 or basically 0, but allows us to still check if outcome is 0 or not to see if an outcome has been set
#         if(outcome == 0):
#             outcome = 1
#         EVENTS.setFirstPreliminaryOutcome(event, outcome)
#         if(!isCallerWhitelisted()):
#             MUTEX.unsetMutex()
#         return(1)
#     else:
#         if(!isCallerWhitelisted()):
#             MUTEX.unsetMutex()
#         return(0)

# # Allows a user to directly add fees / effectively pay for oracle usage w/o having to trade using the default contracts
# # should make this be to an event directly, so every addFees and getFees call will be effected by fixing this todo
# # Returns 1 if successful, 0 if too late to send additional fees
# def addFees(market, fxpAmount):
#     branch = MARKETS.getBranch(market)
#     notVotingOnYet = BRANCHES.getVotePeriod(branch) < MARKETS.getTradingPeriod(market)
#     if(notVotingOnYet):
#         currency = INFO.getCurrency(market)
#         if(!currency.transferFrom(msg.sender, BRANCHES.getBranchWallet(branch, currency), amount)):
#             throw()
#         amountInWei = safeFxpMul(fxpAmount, BRANCHES.getCurrencyRate(branch, currency))
#         if(!amountInWei):
#             throw()
#         MARKETS.addFees(market, amountInWei)
#         EXPEVENTS.adjustPeriodFeeValue(branch, MARKETS.getTradingPeriod(market), amountInWei)
#         return(1)
#     else:
#         return(0)

# macro checkEventCreationPreconditions():
#     if(!periodLength or !len(description) or !len(resolution) or expDate < block.timestamp or !resolutionAddress):
#         if(!isCallerWhitelisted()):
#             MUTEX.unsetMutex()
#         return(-1)
#     if(fxpMaxValue < fxpMinValue or (fxpMaxValue - fxpMinValue) < ONE or (fxpMaxValue + fxpMinValue) < fxpMaxValue):
#         if(!isCallerWhitelisted()):
#             MUTEX.unsetMutex()
#         return(-2)
#     if(numOutcomes < 2 or numOutcomes > 8):
#         if(!isCallerWhitelisted()):
#             MUTEX.unsetMutex()
#         return(-3)
#     parent = BRANCHES.getParent(branch)
#     parentLastForked = BRANCHES.getForkPeriod(parent)
#     fortyEightHourPeriodWhereNoEventsCanExpireOnNewFork = parentLastForked + 1
#     whenEventExpires = expDate / periodLength
#     if(whenEventExpires == fortyEightHourPeriodWhereNoEventsCanExpireOnNewFork):
#         return(-4)
#     if(!BRANCHES.getCurrencyActive(branch, currency)):
#         return(-5)
#     checkForkResolveContractIsValid(forkResolveAddress)

# macro checkMarketCreationPreconditions():
#     # will need to get equivalent value in usd or eth or w/e via etherex exchange for subcurrency markets
#     if(!periodLength or !len(description) or fxpTradingFee < BRANCHES.getMinTradingFee(branch) or fxpTradingFee > MAX_FEE or EVENTS.getEventBranch(event) != branch or !INFO.getCreator(event)):
#         if(!isCallerWhitelisted()):
#             MUTEX.unsetMutex()
#         return(-1)
#     if(expirationDate < block.timestamp):
#         if(!isCallerWhitelisted()):
#             MUTEX.unsetMutex()
#         return(-2)
#     if(!BRANCHES.getCurrencyActive(branch, currency)):
#         return(-5)
#     if(msg.value < safeMul(COST_FOR_MARKET_RESOLUTION, tx.gasprice)):
#         return(-6)

# macro payExtraBond():
#     baseReporters = BRANCHES.getBaseReporters(branch)
#     amount = safeFxpDiv(5*COST_PER_REPORTER * baseReporters * tx.gasprice, WEI_TO_ETH)
#     if(!currency.transferFrom(msg.sender, INFO.getWallet(event), amount)):
#         throw()
#     EVENTS.setExtraBond(event, amount)
#     EVENTS.setExtraBondPoste(event, msg.sender)
