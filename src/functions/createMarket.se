# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

### Allows creation of events and markets and manipulating them

import branches as BRANCHES
import info as INFO
import markets as MARKETS
import backstops as BACKSTOPS
import events as EVENTS
import expiringEvents as EXPEVENTS
extern subcurrency: [allowance:[int256,int256]:int256, approve:[int256,int256]:int256, balance:[]:int256, balanceOf:[int256]:int256, transfer:[int256,int256]:int256, transferFrom:[int256,int256,int256]:int256]
inset('../data_api/refund.se')

event marketCreated(market)
event tradingFeeUpdated(market, fxpTradingFee)

macro POINT_ZERO_THREE: 553402322211286528
macro COST_PER_REPORTER: 3500000
macro COST_FOR_EVENT_REPORT_CALCULATION: 500000

macro checkSubcurrencyIsValid(contract):
    allowance = $contract.allowance(msg.sender, self)
    balance = $contract.balanceOf(self)
    transfer = $contract.transfer(msg.sender, 0)
    transferFrom = $contract.transferFrom(self, msg.sender, 0)
    approve = $contract.approve(self, 0)

# def createSingleEventMarket(branch, description:str, expDate, fxpMinValue, fxpMaxValue, numOutcomes, resolution:str, fxpTradingFee, tag1, tag2, tag3, fxpMakerFees, extraInfo:str):
#     event = self.createEvent(branch, description, expDate, fxpMinValue, fxpMaxValue, numOutcomes, resolution, call=delegate)
#     market = self.createMarket(branch, description, fxpTradingFee, [event], tag1, tag2, tag3, fxpMakerFees, extraInfo, call=delegate)
#     return(market)

# Create an event. Events are the basic units / questions that are reported on in Augur by reporters
# @param numOutcomes is number of outcomes for this event, e.g. quarter mile times from 10.0 to 11.0 would be 11 outcomes (if incremented by 0.1)
# @param fxpMinValue should be 2**64 for a binary event, fxpMaxValue should be 2**65 for a binary event
# @param fxpMinValue for a scalar from 0 to 100 should be 0 and max should be 100*2**64, for -100 to 200, it should be -100*2**64 and 200*2**64 respectively
# @param description is a description of the event / the question itself
# @param resolution is the string source/link to resolve the event
# @param branch is the branch the event is created in
# @param expDate is the epoch time in which the event expires
# @return event if success
# error messages otherwise
    #  0: not enough money to pay fees or event already exists
    # -1: we're either already past that date, branch doesn't exist, or description is bad
    # -2: max value < min value or range < 1
    # -3: invalid number of outcomes
    # -4: would expire during non-reporting fork period
# .025 eth to create
# descriptionWithoutOutcomeLabels + "~|>" + outcome1label + "|"  + outcome2label + "|" + outcome3label is format for a description
def createEvent(branch, description:str, expDate, fxpMinValue, fxpMaxValue, numOutcomes, resolution: str):
    refund()
    periodLength = BRANCHES.getPeriodLength(branch)
    forkPeriod = BRANCHES.getForkPeriod(branch)
    checkEventCreationPreconditions()

    eventinfo = string(7 * 32 + len(description))
    eventinfo[0] = branch                                       # branch
    eventinfo[1] = expDate                                      # expiration date
    eventinfo[2] = msg.sender                                   # creator address
    eventinfo[3] = periodLength
    eventinfo[4] = fxpMinValue                                     # minimum outcome value
    eventinfo[5] = fxpMaxValue                                     # maximum outcome value
    eventinfo[6] = numOutcomes                                  # number of outcomes
    mcopy(eventinfo + 7 * 32, description, len(description))
    event = ripemd160(eventinfo, chars = len(eventinfo))
    if(INFO.getCreator(event)):
        return(0)
    if(INFO.setInfo(event, description, msg.sender, 0) and EVENTS.initializeEvent(event, branch, expDate, fxpMinValue, fxpMaxValue, numOutcomes, resolution)):
        return(event)
    else:
        throw()

# Create a market. Markets are the basic _tradable_ units / questions that are traded on in Augur
# @param branch is the branch of the market
# @param description is the description for a market
# @param fxpTradingFee is percent in fixedPoint
# @param events array is the list of events in a market [only 1 for now]
# @params tag1, tag2, and tag3 are the tags describing a market
# @param fxpMakerFees are the percent of the trading fee a maker pays [0-50% in fixed point]
# @param extraInfo is a string of any extra info associated with a market
# @return market if success or 1 if on an oracle only branch creation we have success
# error messages otherwise
    # -1: bad input or event doesn't exist
    # -2: event already expired
    # -3: would expire during non-reporting fork period
    # -4: market already exists
    # throw()s if not enough money to create the market and place event in the appropriate reporting period
# .05 eth to create
# need at least 1.2M gas @ gas price to cover resolution 500k per event to calc. num reports for it - this is passed as value to this function
# need to check that it's an actual subcurrency upon market creation (maybe check send/balance funs)
# todo fix creation fee to be in eth b/c it covers gas fees...
def createMarket(branch, description: str, fxpTradingFee, event, tag1, tag2, tag3, fxpMakerFees, extraInfo: str, currency):
    callstackCheck()
    periodLength = BRANCHES.getPeriodLength(branch)
    creationFee = POINT_ZERO_THREE * BRANCHES.getBaseReporters(branch) * ONE / fxpTradingFee
    # gives ether/cash amount in fixed point
    minFee = COST_PER_REPORTER * BRANCHES.getBaseReporters(branch) * tx.gasprice * ONE / WEI_TO_ETH
    creationFee = max(minFee, creationFee)
    validityBond = (creationFee * (1 + EVENTS.getPast24(period)) / (1 + EXPEVENTS.getNumberEvents(branch, BRANCHES.getVotePeriod(branch)))) / 2
    numOutcomes = EVENTS.getNumOutcomes(event)
    cumulativeScale = 0
    # market's trading period is the same as the last expiring event in the market
    expirationDate = EVENTS.getExpiration(event)
    futurePeriod = expirationDate / periodLength
    forkPeriod = BRANCHES.getForkPeriod(branch)
    checkMarketCreationPreconditions()

    # scalars
    fxpMaxValue = EVENTS.getMaxValue(event)
    fxpMinValue = EVENTS.getMinValue(event)
    scalar = (fxpMaxValue != TWO or fxpMinValue != ONE) and numOutcomes == 2
    if(scalar):
        # cumulativeScale is the range of a scalar
        cumulativeScale += fxpMaxValue - fxpMinValue
    if(!cumulativeScale):
        cumulativeScale = ONE

    # formation of market (hash)
    marketinfo = string(8 * 32 + len(description))
    marketinfo[0] = futurePeriod
    marketinfo[1] = fxpTradingFee
    marketinfo[2] = block.timestamp
    marketinfo[3] = tag1
    marketinfo[4] = tag2
    marketinfo[5] = tag3
    marketinfo[6] = expirationDate
    marketinfo[7] = len(description)
    mcopy(marketinfo + 8 * 32, description, chars = len(description))
    market = ripemd160(marketinfo, chars = len(marketinfo))
    # if it's already been created return 0
    if(INFO.getCreator(market)):
        return(-4)
    events = array(1)
    events[0] = event
    checkSubcurrencyIsValid(currency)
    # todo if wallet contract doesn't exist for a branch for a given currency need to make it or should we have an approval process for adding a token to a branch?
    wallet = create('wallet.se')
    if(!wallet.initialize(currency)):
        throw()
    makeMarket()
    
    # add events to the appropriate reporting period
    eventNotAddedYet = (EXPEVENTS.getEvent(branch, futurePeriod, EXPEVENTS.getEventIndex(branch, futurePeriod, event)) != event)
    if(eventNotAddedYet):
        addEvent()
    log(type = marketCreated, market)
    return(market)
    
# initialize market and send money to pay for resolution
# todo fix something off with paying for resolution here and event adding and what if event already added then -500k issue and what if user doesn't send enough to resolve where is check for that
macro makeMarket():
    $payCosts = currency.transferFrom(msg.sender, INFO.getWallet(branch), creationFee)
    $infoSet = INFO.setInfo(market, description, msg.sender, creationFee, currency, wallet)
    $initializedMarket = MARKETS.initializeMarket(market, events, futurePeriod, fxpTradingFee, branch, tag1, tag2, tag3, fxpMakerFees, cumulativeScale, numOutcomes, extraInfo, msg.value - COST_FOR_EVENT_REPORT_CALCULATION * tx.gasprice, creationFee, expirationDate, value = (msg.value - COST_FOR_EVENT_REPORT_CALCULATION * tx.gasprice))
    $makeBranchAndEventAwareOfNewMarket = BRANCHES.addMarketToBranch(branch, market) and EVENTS.addMarket(event, market)
    if($payCosts and $infoSet and $initializedMarket and $makeBranchAndEventAwareOfNewMarket):
        1
    else:
        throw()
        
macro addEvent():
    # cost for calculating num. of reports for an event
    if(!send(EXPEVENTS, COST_FOR_EVENT_REPORT_CALCULATION * tx.gasprice)):
        throw()
    wallet = create('wallet.se')
    if(!wallet.initialize(currency)):
        throw()
    EXPEVENTS.addEvent(branch, futurePeriod, event, COST_FOR_EVENT_REPORT_CALCULATION * tx.gasprice, currency, wallet)
    if(!EVENTS.getBond(event)):
        # pay validity / indeterminate protection bond
        period = block.timestamp / TWENTY_FOUR_HR
        if(!currency.transferFrom(msg.sender, wallet, validityBond)):
            throw()
        EVENTS.setBond(event, validityBond)
        EVENTS.addPast24(period)

# Updates a trading fee to be lower in a market
# Errors
    # -1: not the market creator
    # -2: invalid new trading fee
def updateTradingFee(market, fxpTradingFee):
    refund()
    branch = MARKETS.getBranch(market)
    if(msg.sender != INFO.getCreator(market)):
        return(-1)
    oldFee = MARKETS.getTradingFee(market)
    oldCreationFee = POINT_ZERO_SIX * BRANCHES.getBaseReporters(branch) * ONE / oldFee
    newCreationFee = POINT_ZERO_SIX * BRANCHES.getBaseReporters(branch) * ONE / fxpTradingFee
    if(fxpTradingFee < BRANCHES.getMinTradingFee(branch) or fxpTradingFee > oldFee):
        return(-2)
    currency = INFO.getCurrency(market)
    if(!currency.transferFrom(msg.sender, BRANCHES.getWallet(branch, currency), newCreationFee-oldCreationFee) or !MARKETS.setTradingFee(market, fxpTradingFee)):
        throw()
    log(type = tradingFeeUpdated, market, fxpTradingFee)
    return(1)

# Anyone can post an "Early Resolution Bond"
# This bond is equal to 0.5 * marketFee * marketValue
# This amount is the amount needed to pay the reporters in case this was frivolous.
# The market goes up for early resolution and reporters place claim to what is truth, however for early resolution, they have an additional option: 'Market is not ready to resolve'
    # this addl option is just the normal indeterminate (except here it's a bit of a special case, see below)
# In the event 'Market is not ready to resolve' is found to be the consensus, the early resolution bond is paid to the reporters for their labor.
    # and market remains with old expiration dateevent
# In the event any other option is found to be the consensus the early resolution bond is returned to the poster and then resolution is handled just like any other case.
# todo add comments re return values and test again
def pushMarketForward(branch, market):
    refund()
    # can't do while forking
    forkPeriod = BRANCHES.getForkPeriod(branch)
    periodLength = BRANCHES.getPeriodLength(branch)
    currentPeriod = block.timestamp / periodLength
    if(forkPeriod == currentPeriod or currentPeriod == (forkPeriod + 1)):
        return(-1)
    # if market closed or already pushed forward, return 0
    if(MARKETS.getOneWinningOutcome(market, 0) or MARKETS.getPushedForward(market)):
        return(-2)
    if(MARKETS.getBranch(market) != branch):
        return(0)
    event = MARKETS.getMarketEvent(market, 0)
    expiration = EVENTS.getExpiration(event)
    beingReportedOnNow = (expiration / periodLength == block.timestamp / periodLength)
    alreadyPushedForward = EVENTS.getRejectedPeriod(event) or expiration != EVENTS.getOriginalExpiration(event)
    if(alreadyPushedForward or beingReportedOnNow or EVENTS.getOutcome(event) or BACKSTOPS.getRoundTwo(event)):
        return(-4)
    # push into next vote period
    period = block.timestamp / periodLength
    # figure out what's going on with subsidy system here todo
    EXPEVENTS.addEvent(branch, period, event, 0)
    # set event expiration date to be after the current reporting period ends
    EVENTS.setExpiration(event, block.timestamp)
    MARKETS.setTradingPeriod(market, period)
    MARKETS.setPushedForward(market, 1, msg.sender)
    EVENTS.setEventPushedUp(event, 1)
    payEarlyResolutionBond = MARKETS.getCurrency(market).transferFrom(msg.sender, INFO.getWallet(market), MARKETS.getTradingFee(market) * MARKETS.getTotalSharesPurchased(market) / (2 * ONE))
    if(!payEarlyResolutionBond):
        throw()
    return(1)

macro checkEventCreationPreconditions():
    if(!periodLength or !len(description) or !len(resolution) or expDate < block.timestamp):
        return(-1)
    if(fxpMaxValue < fxpMinValue or (fxpMaxValue - fxpMinValue) < ONE):
        return(-2)
    if(numOutcomes < 2 or numOutcomes > 8):
        return(-3)
    # fix to allow event and market creation during forks at own risk
    if(forkPeriod and ((expDate / periodLength) == forkPeriod or (expDate / periodLength) == (forkPeriod + 1))):
        return(-4)

macro checkMarketCreationPreconditions():
    # will need to get equivalent value in usd or eth or w/e via etherex exchange for subcurrency markets
    if(!periodLength or !len(description) or fxpTradingFee < BRANCHES.getMinTradingFee(branch) or fxpTradingFee > 2 ** 62 or EVENTS.getEventBranch(event) != branch or !INFO.getCreator(event) or fxpMakerFees < 0 or fxpMakerFees > ONE_HALF):
        return(-1)
    if(expirationDate < block.timestamp):
        return(-2)
    if(forkPeriod and (futurePeriod == forkPeriod or futurePeriod == (forkPeriod + 1))):
        return(-3)
