import info as INFO
import cash as CASH
import expiringEvents as EXPIRING
import reporting as REPORTING
import events as EVENTS
import branches as BRANCHES
import markets as MARKETS
import backstops as BACKSTOPS
import sendReputation as SENDREP
inset('refund.se')
inset('eventHelpers.se')

macro POINTZEROONE: 184467440737095520

macro MINBOND: 200*2**64

# Allows a user to post a bond to enter round two of consensus
# Appeal_Bond = Market_Value * (0.01 + Market_Fee / 2) + Average_Adjudication_Cost
    # Average_Adjudication_Cost = Total fees paid to reporters for all markets in this reporting round / number of markets in this reporting round.
        # needs an abs min of ~200 rep.
# Reporting period is 2 months minus 48 hours.  This 48 hours allows for the appeals to take place before the next reporting round begins.
# Returns 1 upon success
# Errors:
    #  0: invalid votePeriod/branch
    # -1: Pushed forward event, bonding not allowed during this
    # -2: branch is in the middle of a fork
    # throw()s if not enough msg.value to cover resolution cost or not a large enough bond
def roundTwoPostBond(branch, event, eventIndex, overEthicality):
    callstackCheck()
    votePeriod = BRANCHES.getVotePeriod(branch)
    # if pushed forward don't allow until no longer pushed fwd
    if(EVENTS.getOriginalExpiration(event)!=EVENTS.getExpiration(event)):
        return(-1)
    market = EVENTS.getMarket(event, 0)
    forkPeriod = BRANCHES.getForkPeriod(branch)
    if(forkPeriod == votePeriod or (forkPeriod+1) == votePeriod):
        return(-2)
    # todo find actual cost
    if(msg.value < 500000*tx.gasprice):
        return(0)
    # pays money to cover resolution cost
    if(!send(BACKSTOPS, msg.value)):
        throw()
    BACKSTOPS.setRoundTwoRefund(event, msg.value)
    averageAdjudicationCost = BRANCHES.getInitialBalance(branch, votePeriod)/EXPIRING.getNumberEvents(branch, votePeriod)
    bond = averageAdjudicationCost + MARKETS.getSharesValue(market)*(POINTZEROONE + MARKETS.getTradingFee(market)/2) / ONE
    bond = min(bond, MINBOND)
    eventID = EXPEVENTS.getEvent(branch, votePeriod, eventIndex)
    # if so, we're in the final 48 hours and event is in this branch + votePeriod
    if(block.timestamp/BRANCHES.getPeriodLength(branch)!=((block.timestamp + 2*TWENTYFOURHR)/BRANCHES.getPeriodLength(branch)) and event!=0 and event==eventID and !BACKSTOPS.getRoundTwo(event) and !EVENTS.getForked(event)):
        # send the bond to the branch
        # todo fix this will fail b/c event doesn't have rep acc
        if(!SENDREP.sendRepFrom(branch, msg.sender, event, bond)):
            throw()
        period = BRANCHES.getVotePeriod(branch)
        # remove from events in # to report on calc for last period
        EXPIRING.removeEvent(branch, period)
        # makes event required reporting in round 2 (the next period) as well
        EXPIRING.setEventRequired(branch, period+1, event)
        # push event into next period
        EXPIRING.addEvent(branch, period+1, event)
        # set event expiration date to be after the current reporting period ends
        EVENTS.setExpiration(event, block.timestamp)
        # set round two to true so can't be done again
        BACKSTOPS.setRoundTwo(event, 1)
        BACKSTOPS.setOriginalVotePeriod(event, votePeriod)
        if(scalar(event) or categorical(event)):
            BACKSTOPS.setOriginalOutcome(event, EVENTS.getUncaughtOutcome(event))
        else:
            BACKSTOPS.setOriginalOutcome(event, catch(EVENTS.getUncaughtOutcome(event)))
        BACKSTOPS.setOriginalEthicality(event, ethic_catch(EVENTS.getEthics(event)))
        EXPEVENTS.addRoundTwo(branch, period)
        BACKSTOPS.setBondPoster(event, msg.sender)
        EVENTS.setUncaughtOutcome(event, 0)
        EVENTS.setMode(event, 0)
        EVENTS.setEthics(event, 0)
        if(overEthicality):
            BACKSTOPS.setDisputedOverEthics(event)
        return(1)

# Resolves a round 2 event scenario
# Errors:
    # 0: returned if not reported on again yet
def roundTwoResolve(branch, event, eventIndex, sender):
    refund()
    votePeriod = BRANCHES.getVotePeriod(branch)
    market = EVENTS.getMarket(event, 0)
    averageAdjudicationCost = BRANCHES.getInitialBalance(branch, votePeriod-1)/EXPEVENTS.getNumberEvents(branch, votePeriod-1)
    bond = averageAdjudicationCost + MARKETS.getSharesValue(market)*(POINTZEROONE + MARKETS.getTradingFee(market)/2) / ONE
    bond = min(bond, MINBOND)
    event = EXPEVENTS.getEvent(branch, votePeriod, eventIndex)
    votedOnAgain = 0
    overruled = 1
    forked = EVENTS.getForked(event)
    # checks if the event's outcome was overruled or the same as the original reporting cycle
    if(scalar(event) or categorical(event)):
        if(BACKSTOPS.getOriginalOutcome(event) == EVENTS.getUncaughtOutcome(event) and BACKSTOPS.getOriginalEthicality(event)==ethic_catch(EVENTS.getEthics(event))):
            overruled = 0
    elif(BACKSTOPS.getOriginalOutcome(event) == catch(EVENTS.getUncaughtOutcome(event)) and BACKSTOPS.getOriginalEthicality(event)==ethic_catch(EVENTS.getEthics(event))):
        overruled = 0
    if(votePeriod > (EVENTS.getExpiration(event) / BRANCHES.getPeriodLength(branch))):
        votedOnAgain = 1
    forkPeriod = BRANCHES.getForkPeriod(branch)
    # if forking and this isn't the fork event
    if(forkPeriod==votePeriod or votePeriod==(forkPeriod+1) and (BRANCHES.getEventForkedOver(branch)!=event and !BACKSTOPS.getBondReturned(event) and BACKSTOPS.getRoundTwo(event)) and event!=0 and event==eventID):
        # return the bond
        REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, event), bond)
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getBondPoster(event)), bond)
        BACKSTOPS.setBondReturned(event)
        BACKSTOPS.setRoundTwo(event, 0)
        BACKSTOPS.doRoundTwoRefund(sender, event)
        return(1)
    # overruled and bond poster was right
    elif(overruled and votedOnAgain and BACKSTOPS.getRoundTwo(event) and votePeriod!=BACKSTOPS.getOriginalVotePeriod(event) and event!=0 and event==eventID and !forked and !BACKSTOPS.getBondReturned(event)):
        # return the bond
        REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, event), bond)
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getBondPoster(event)), bond)
        # and set final outcome / event bond, etc
        if(!self.resolve(branch, event)):
            throw()
        # reward the bonded challenger with whatever rep would normally be taken from the liars up to 2x the bond, then beyond that the people who originally reported whatever the actual truth was would get the rest. then regular rep redistribution for the round 2 reporting
        BACKSTOPS.setFinal(event)
        BACKSTOPS.setBondReturned(event)
        BACKSTOPS.doRoundTwoRefund(sender, event)
        return(2*bond)
    # same as original consensus and bond poster was wrong [or malicious]
    elif(votedOnAgain and BACKSTOPS.getRoundTwo(event) and votePeriod!=BACKSTOPS.getOriginalVotePeriod(event) and event!=0 and event==eventID and !forked and !BACKSTOPS.getBondReturned(event)):
        # lose bond
        REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, event), bond)
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), bond)
        # and set final outcome / event bond, etc
        if(!self.resolve(branch, event)):
            throw()
        # rep redistribution from original period/orig. outcome stands, rep redistribution from round 2 happens as usual as well
        BACKSTOPS.setFinal(event)
        BACKSTOPS.setBondReturned(event)
        BACKSTOPS.doRoundTwoRefund(sender, event)
        return(1)
    # not voted on again yet
    else:
        return(0)

# Actually sets the outcome for a round 2 event
# Errors:
    # 0: event isn't binary, categorical, or scalar [hell has frozen over or quantum events have been invented]
def resolve(branch, event):
    refund()
    bond = EVENTS.getBond(event)
    # set ethicality to the binned version of the ethics
    ethical = ethic_catch(EVENTS.getEthics(event))
    EVENTS.setEthics(event, ethical)
    # binary
    if(binary(event)):
        # set outcome to the binned version of the outcome
        fxpOutcome = catch(EVENTS.getUncaughtOutcome(event))
        EVENTS.setOutcome(event, fxpOutcome)
        if(fxpOutcome==3*ONEHALF or !ethical):
            # give event bond money to reporters
            CASH.subtractCash(event, bond)
            CASH.addCash(branch, bond)
            # not ethical is same as 1.5 outcome w/ binary
            fxpOutcome = 3*ONEHALF
            EVENTS.setOutcome(event, fxpOutcome)
        else:
            # return bond
            CASH.subtractCash(event, bond)
            CASH.addCash(INFO.getCreator(event), bond)
        return(1)
    # scalar
    elif(scalar(event) or categorical(event)):
        mode = EVENTS.getUncaughtOutcome(event)
        # sets mode which is used to penalize/reward reporters
        EVENTS.setMode(event, mode)
        scaled_max = EVENTS.getMaxValue(event)
        scaled_min = EVENTS.getMinValue(event)
        if(categorical(event)):
            scaled_min = ONE
            scaled_max = ONE*EVENTS.getNumOutcomes(event)
        fxpOutcome = mode * (scaled_max - scaled_min)/ONE + scaled_min
        # sets outcome which is used in calculating payouts
        EVENTS.setOutcome(event, fxpOutcome)
        ethicOutcome = 2**63 * (scaled_max - scaled_min)/ONE + scaled_min
        if(mode==ONEHALF or !ethical):
            # give event bond money to reporters
            CASH.subtractCash(event, bond)
            CASH.addCash(branch, bond)
            # not ethical is same as .5 outcome w/ scalar
            # mode is used to compare for reporting acc. so still the same as reported outcome, but resolving the market as .5
            EVENTS.setOutcome(event, ethicOutcome)
        else:
            # return bond
            CASH.subtractCash(event, bond)
            CASH.addCash(INFO.getCreator(event), bond)
        return(1)
    # (should never be reached)
    else:
        return(0)
