# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2015 Forecast Foundation OU
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you have questions, please contact jack@augur.net or joey@augur.net.

### Faucets - get ~free rep + cash!

import reporting as REPORTING
import events as EVENTS
import cash as CASH
import consensusData as CONSENSUS
import branches as BRANCHES
import expiringEvents as EXPEVENTS
import backstops as BACKSTOPS
import mutex as MUTEX
extern subcurrency: [allowance:[uint256,uint256]:uint256, approve:[uint256,uint256]:uint256, balance:[]:uint256, balanceOf:[uint256]:uint256, transfer:[uint256,uint256]:uint256, transferFrom:[uint256,uint256,uint256]:uint256]
inset('../data_api/refund.se')

inset('eventHelpers.se')

event fundedAccount(branch: indexed, sender: indexed, cashBalance, repBalance, timestamp)

macro POINT_ZERO_ONE: 10000000000000000
macro ONE_MONTH: 2592000
macro POINT_SIX: 600000000000000000

# Error -1: Hey, you're not broke!
def cashFaucet():
    refund()
    if(CASH.balanceOf(msg.sender) > 5 * ONE):
        return(-1)
    CASH.setCash(msg.sender, 10000 * ONE)
    return(1)

def reputationFaucet(branch):
    refund()
    if REPORTING.repIDToIndex(branch, msg.sender) != 0 or REPORTING.getReporterID(branch, 0) == msg.sender:
        index = REPORTING.repIDToIndex(branch, msg.sender)
    else:
        index = REPORTING.getNumberReporters(branch)
        REPORTING.addReporter(branch, msg.sender, 0, 0, 0)
    REPORTING.setRep(branch, index, 47*ONE)
    periodLength = BRANCHES.getPeriodLength(branch)
    if block.timestamp % periodLength <= periodLength / 2:
        penalizedUpTo = BRANCHES.getVotePeriod(branch) - 1
    else:
        penalizedUpTo = BRANCHES.getVotePeriod(branch)
    CONSENSUS.setPenalizedUpTo(branch, msg.sender, penalizedUpTo)
    CONSENSUS.setRepCollected(branch, msg.sender, penalizedUpTo)
    return(1)

def fundNewAccount(branch):
    CASH.send(self, 0)
    self.reputationFaucet(branch, call=delegate)
    CASH.setCash(msg.sender, 10000*ONE)
    log(type=fundedAccount, branch, msg.sender, 10000*ONE, 47*ONE, block.timestamp)
    return(1)

# Used to claim rep on a fork or on a new branch
# Returns 1 if successful, 0 if already claimed/too late
# Error:
    # -1: parent isn't the actual parent
    # -2: penalization catchup failed
    # -3: only behind one period and not caught up / penalized yet
def claimInitialRep(parent, branch):
    refund()
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()
    # auto increment vote period if needed
    INCREMENTPERIOD.incrementPeriodAfterReporting(parent)
    parentPeriod = BRANCHES.getParentPeriod(branch)
    forkPeriod = BRANCHES.getForkPeriod(parent)
    fork = REPORTING.getFork(parent)
    forkEvent = BRANCHES.getEventForkedOver(parent)
    outcome = EVENTS.getUncaughtOutcome(forkEvent)
    if(binary(forkEvent)):
        outcome = catch(outcome)
    report = EXPEVENTS.getReport(parent, forkPeriod, forkEvent, msg.sender)
    ethical = ethicCatch(EVENTS.getEthics(forkEvent))
    ethicReport = EXPEVENTS.getEthicReport(parent, forkPeriod, forkEvent, msg.sender)
    dormantRep = EXPEVENTS.getPeriodDormantRep(parent, parentPeriod, msg.sender)
    # if this wasn't set then use reg. dormant rep balance
    if(dormantRep == 0):
        dormantRep = REPORTING.balanceOf(parent, msg.sender)
    # if this wasn't set then use reg. rep balance after catching reporter up
    rep = EXPEVENTS.getBeforeRep(parent, parentPeriod, msg.sender)
    checkRepClaimPreconditions()
    
    if(rep == 0):
        rep = REPORTING.getRepBalance(parent, msg.sender)
    repDecrease = 0
    # if forked and (reported with original consensus or didn't report or (reported with original ethicality and forked over ethicality))
    reportedWithOriginalConsensus = ((outcome - POINT_ZERO_ONE) <= report <= (outcome + POINT_ZERO_ONE))
    reportedWrongEthicality = (BACKSTOPS.getForkedOverEthicality(forkEvent) and ethical == ethicReport)
    reportedWrongly = (reportedWithOriginalConsensus or !report or reportedWrongEthicality)
    if(fork and reportedWrongly):
        removeRepFromThoseWhoReportedWrong()
    if(fork):
        CONSENSUS.setPenalizedUpTo(branch, msg.sender, forkPeriod)
        CONSENSUS.setRepCollected(branch, msg.sender, forkPeriod)
    else:
        CONSENSUS.setPenalizedUpTo(branch, msg.sender, (BRANCHES.getVotePeriod(branch) - 1))
        CONSENSUS.setRepCollected(branch, msg.sender, (BRANCHES.getVotePeriod(branch) - 1))
    REPORTING.addReporter(branch, msg.sender, rep, dormantRep, repDecrease)
    MUTEX.unsetMutex()
    return(1)

macro checkRepClaimPreconditions():
    branchDoesntExist = (!parent or !branch)
    if((BRANCHES.getParent(branch) != parent && parent && branch) or branchDoesntExist):
        MUTEX.unsetMutex()
        return(-1)
    tooLate = block.timestamp > (BRANCHES.getCreationDate(branch) + ONE_MONTH)
    alreadyClaimed = REPORTING.repIDToIndex(branch, msg.sender)
    if(alreadyClaimed or tooLate):
        MUTEX.unsetMutex()
        return(0)
    lastPeriodPenalized = CONSENSUS.getPenalizedUpTo(parent, msg.sender)
    lastPeriod = BRANCHES.getVotePeriod(parent) - 1
    delta = lastPeriod - lastPeriodPenalized
    if(delta > 1):
        if(CATCHUP.penalizationCatchup(parent, msg.sender) != 1):
            MUTEX.unsetMutex()
            return(-2)
    if(!CONSENSUS.getRepRedistributionDone(parent, msg.sender)):
        MUTEX.unsetMutex()
        return(-3)

macro removeRepFromThoseWhoReportedWrong():
    # take away 40% of rep from liars and those who didn't report
    repDecrease = rep - safeFxpMul(rep, POINT_SIX)
    rep = safeSub(rep, repDecrease)
    amountLeftToPayBonder = BACKSTOPS.getBondAmount(forkEvent) - BACKSTOPS.getForkBondPaid(forkEvent)
    if(repDecrease < amountLeftToPayBonder):
        # send all the redistributed rep to the fork bond poster
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getForkBondPoster(forkEvent)), repDecrease)
    # send amountLeftToPayBonder [if positive] to the fork bond poster
    elif(amountLeftToPayBonder > 0):
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getForkBondPoster(forkEvent)), amountLeftToPayBonder)
        # send the rest to the new branch's redistribution pool
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), (repDecrease - amountLeftToPayBonder))
    else:
        # send to new branch's redistribution pool
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), repDecrease)
