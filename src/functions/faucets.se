# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2015 Forecast Foundation OU
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you have questions, please contact jack@augur.net or joey@augur.net.

macro Controller: 0xC001D00D
extern Controller: [lookup:[int256]:int256, checkWhitelist:[int256]:int256]

REPORTING = Controller.lookup('reporting')
extern reporting: [addDormantRep:[int256,int256,int256]:int256, addRep:[int256,int256,int256]:int256, addReporter:[int256,int256,int256,int256,int256]:int256, adjustActiveRep:[int256,int256]:int256, balanceOfReporter:[int256,int256]:int256, checkContractWhitelist:[int256,int256]:int256, checkWhitelist:[int256]:int256, claimInitialRep:[]:int256, getActiveRep:[int256]:int256, getDormantRepByIndex:[int256,int256]:int256, getFork:[int256]:int256, getNumberReporters:[int256]:int256, getRepBalance:[int256,int256]:int256, getRepByIndex:[int256,int256]:int256, getReportedOnNonFinalRoundTwoEvent:[int256]:int256, getReporterID:[int256,int256]:int256, getReputation:[int256]:int256[], getTotalRep:[int256]:int256, repIDToIndex:[int256,int256]:int256, setFork:[int256]:int256, setInitialReporters:[int256]:int256, setRep:[int256,int256,int256]:int256, setReportedOnNonFinalRoundTwoEvent:[int256,int256]:int256, setSaleDistribution:[int256[],int256[],int256]:int256, setWhitelist:[int256,int256[]]:bytes, subtractDormantRep:[int256,int256,int256]:int256, subtractRep:[int256,int256,int256]:int256, totalSupply:[int256]:int256]

EVENTS = Controller.lookup('events')
extern events: [addMarket:[int256,int256]:int256, addPast24:[int256]:int256, addReportersPaidSoFar:[int256]:int256, getBond:[int256]:int256, getChallenged:[int256]:int256, getCreationTime:[int256]:int256, getEarlyResolutionBond:[int256]:int256, getEthics:[int256]:int256, getEventBranch:[int256]:int256, getEventPushedUp:[int256]:int256, getEventResolution:[int256]:bytes, getExpiration:[int256]:int256, getExtraBond:[int256]:int256, getFirstPreliminaryOutcome:[int256]:int256, getForkEthicality:[int256]:int256, getForkOutcome:[int256]:int256, getForkResolveAddress:[int256]:int256, getForked:[int256]:int256, getForkedDone:[int256]:int256, getMarket:[int256,int256]:int256, getMarkets:[int256]:int256[], getMaxValue:[int256]:int256, getMinValue:[int256]:int256, getMode:[int256]:int256, getNumMarkets:[int256]:int256, getNumOutcomes:[int256]:int256, getOriginalExpiration:[int256]:int256, getOutcome:[int256]:int256, getPast24:[int256]:int256, getRejected:[int256]:int256, getRejectedPeriod:[int256]:int256, getReportersPaidSoFar:[int256]:int256, getReportingThreshold:[int256]:int256, getResolutionAddress:[int256]:int256, getResolutionLength:[int256]:int256, getResolveBondPoster:[int256]:int256, getUncaughtOutcome:[int256]:int256, getEventInfo:[int256]:int256[], initializeEvent:[int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256]:int256, setBond:[int256,int256]:int256, setBranch:[int256,int256]:int256, setChallenged:[int256]:int256, setCreationTime:[int256]:int256, setEarlyResolutionBond:[int256,int256]:int256, setEthics:[int256,int256]:int256, setEventPushedUp:[int256,int256]:int256, setExpiration:[int256,int256]:int256, setExtraBond:[int256,int256]:int256, setFirstPreliminaryOutcome:[int256,int256]:int256, setForkDone:[int256]:int256, setForkEthicality:[int256,int256]:int256, setForkOutcome:[int256,int256]:int256, setForked:[int256]:int256, setMode:[int256,int256]:int256, setOriginalExpiration:[int256,int256]:int256, setOutcome:[int256,int256]:int256, setRejected:[int256,int256]:int256, setThreshold:[int256,int256]:int256, setUncaughtOutcome:[int256,int256]:int256]

CASH = Controller.lookup('cash')
extern cash: [allowance:[address,address]:int256, approve:[address,uint256]:int256, balanceOf:[address]:int256, commitSuicide:[]:int256, depositEther:[]:int256, getDecimals:[]:int256, getName:[]:int256, getSymbol:[]:int256, setCash:[address,uint256]:int256, totalSupply:[]:int256, transfer:[address,uint256]:int256, transferFrom:[address,address,uint256]:int256, withdrawEther:[address,uint256]:int256]

CONSENSUS = Controller.lookup('consensusData')
extern consensusData: [decreaseDenominator:[int256,int256,int256]:int256, doRefund:[int256,int256]:int256, getBaseReportersLastPeriod:[int256]:int256, getDenominator:[int256,int256]:int256, getFeeFirst:[int256,int256]:int256, getFeesCollected:[int256,int256,int256,int256]:int256, getNotEnoughPenalized:[int256,int256,int256]:int256, getPenalized:[int256,int256,int256,int256]:int256, getPenalizedNum:[int256,int256,int256]:int256, getPenalizedUpTo:[int256,int256]:int256, getPeriodBalance:[int256,int256]:int256, getRepCollected:[int256,int256,int256]:int256, getRepRedistributionDone:[int256,int256]:int256, getSlashed:[int256,int256,int256]:int256, increaseDenominator:[int256,int256,int256]:int256, increasePenalizedNum:[int256,int256,int256,int256]:int256, setBaseReportersLastPeriod:[int256,int256]:int256, setFeeFirst:[int256,int256,int256]:int256, setFeesCollected:[int256,int256,int256,int256]:int256, setNotEnoughPenalized:[int256,int256,int256]:int256, setPenalized:[int256,int256,int256,int256]:int256, setPenalizedUpTo:[int256,int256,int256]:int256, setPeriodBalance:[int256,int256,int256]:int256, setRefund:[int256,int256]:int256, setRepCollected:[int256,int256,int256]:int256, setSlashed:[int256,int256,int256]:int256]

BRANCHES = Controller.lookup('branches')
extern branches: [addCurrency:[int256,int256,int256,int256]:int256, addMarketToBranch:[int256,int256]:int256, disableCurrency:[int256,int256]:int256, getBaseReporters:[int256]:int256, getBranchByNum:[int256]:int256, getBranches:[]:int256[], getBranchesStartingAt:[int256]:int256[], getCreationDate:[int256]:int256, getBranchCurrency:[int256,int256]:int256, getCurrencyActive:[int256,int256]:int256, getCurrencyByContract:[int256,int256]:int256, getCurrencyRate:[int256,int256]:int256, getEventForkedOver:[int256]:int256, getForkPeriod:[int256]:int256, getForkTime:[int256]:int256, getInitialBalance:[int256,int256,int256]:int256, getMarketIDsInBranch:[int256,int256,int256]:int256[], getMinTradingFee:[int256]:int256, getMostRecentChild:[int256]:int256, getNumBranches:[]:int256, getNumCurrencies:[int256]:int256, getNumMarketsBranch:[int256]:int256, getOracleOnly:[int256]:int256, getParent:[int256]:int256, getParentPeriod:[int256]:int256, getPeriodLength:[int256]:int256, getVotePeriod:[int256]:int256, getBranchWallet:[int256,int256]:int256, incrementPeriod:[int256]:int256, initializeBranch:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, reactivateCurrency:[int256,int256]:int256, removeLastCurrency:[int256]:int256, replaceCurrency:[int256,int256,int256,int256,int256]:int256, setBaseReporters:[int256,int256]:int256, setEventForkedOver:[int256,int256]:int256, setForkPeriod:[int256]:int256, setInitialBalance:[int256,int256,int256,int256]:int256, setMostRecentChild:[int256,int256]:int256, updateCurrencyRate:[int256,int256,int256,int256]:int256, updateNumCurrencies:[int256,int256]:_]

EXPEVENTS = Controller.lookup('expiringEvents')
extern expiringEvents: [addEvent:[int256,int256,int256,int256,int256,int256,int256]:int256, addReportToReportsSubmitted:[int256,int256,int256]:int256, addRoundTwo:[int256,int256]:int256, addToWeightOfReport:[int256,int256,int256,int256]:int256, adjustPeriodFeeValue:[int256,int256,int256]:int256, countReportAsSubmitted:[int256,int256,int256,int256,int256]:int256, deleteEvent:[int256,int256,int256]:int256, getActiveReporters:[int256,int256,int256,int256]:int256[], getAfterFork:[int256,int256]:int256, getAfterRep:[int256,int256,int256]:int256, getBeforeRep:[int256,int256,int256]:int256, getCurrentMode:[int256,int256]:int256, getCurrentModeItems:[int256,int256]:int256, getEthicReport:[int256,int256,int256,int256]:int256, getEvent:[int256,int256,int256]:int256, getEventIndex:[int256,int256,int256]:int256, getEventWeight:[int256,int256,int256]:int256, getEvents:[int256,int256]:int256[], getEventsRange:[int256,int256,int256,int256]:int256[], getFeeValue:[int256,int256]:int256, getLesserReportNum:[int256,int256,int256]:int256, getNumActiveReporters:[int256,int256]:int256, getNumEventsToReportOn:[int256,int256]:int256, getNumRemoved:[int256,int256]:int256, getNumReportsSubmitted:[int256,int256,int256]:int256, getNumRequired:[int256,int256]:int256, getNumRoundTwo:[int256,int256]:int256, getNumberEvents:[int256,int256]:int256, getPeriodDormantRep:[int256,int256,int256]:int256, getPeriodRepWeight:[int256,int256,int256]:int256, getReport:[int256,int256,int256,int256]:int256, getReportHash:[int256,int256,int256,int256]:int256, getReportsCommitted:[int256,int256,int256]:int256, getRequired:[int256,int256,int256]:int256, getSaltyEncryptedHash:[int256,int256,int256,int256]:int256, getSubsidy:[int256,int256,int256]:int256, getWeightOfReport:[int256,int256,int256]:int256, moveEvent:[int256,int256]:int256, refundCost:[int256,int256,int256,int256]:int256, removeEvent:[int256,int256]:int256, setAfterRep:[int256,int256,int256,int256]:int256, setBeforeRep:[int256,int256,int256,int256]:int256, setCurrentMode:[int256,int256,int256]:int256, setCurrentModeItems:[int256,int256,int256]:int256, setEthicReport:[int256,int256,int256,int256,int256]:int256, setEventRequired:[int256,int256,int256]:int256, setEventWeight:[int256,int256,int256,int256]:int256, setLesserReportNum:[int256,int256,int256,int256]:int256, setNumEventsToReportOn:[int256]:int256, setPeriodDormantRep:[int256,int256,int256,int256]:int256, setPeriodRepWeight:[int256,int256,int256,int256]:int256, setReport:[int256,int256,int256,int256,int256]:int256, setReportHash:[int256,int256,int256,int256,int256]:int256, setSaltyEncryptedHash:[int256,int256,int256,int256,int256]:int256]

BACKSTOPS = Controller.lookup('backstops')
extern backstops: [adjForkBondPaid:[int256,int256]:int256, doRoundTwoRefund:[int256,int256]:int256, getBondAmount:[int256]:int256, getBondPaid:[int256]:int256, getBondPoster:[int256]:int256, getBondReturned:[int256]:int256, getDisputedOverEthics:[int256]:int256, getFinal:[int256]:int256, getForkBondPaid:[int256]:int256, getForkBondPoster:[int256]:int256, getForkedOverEthicality:[int256]:int256, getMoved:[int256]:int256, getOriginalBranch:[int256]:int256, getOriginalEthicality:[int256]:int256, getOriginalOutcome:[int256]:int256, getOriginalVotePeriod:[int256]:int256, getResolved:[int256,int256]:int256, getRoundTwo:[int256]:int256, increaseBondPaid:[int256,int256]:int256, setBondAmount:[int256,int256]:int256, setBondPoster:[int256,int256]:int256, setBondReturned:[int256]:int256, setDisputedOverEthics:[int256]:int256, setFinal:[int256]:int256, setForkBondPoster:[int256,int256]:int256, setForkedOverEthicality:[int256]:int256, setMoved:[int256]:int256, setOriginalBranch:[int256,int256]:int256, setOriginalEthicality:[int256,int256]:int256, setOriginalOutcome:[int256,int256]:int256, setOriginalVotePeriod:[int256,int256]:int256, setResolved:[int256,int256,int256]:int256, setRoundTwo:[int256,int256]:int256, setRoundTwoRefund:[int256,int256]:int256]

CONSENSUSFUNCTIONS = Controller.lookup('consensus')
extern consensus.se: [incrementPeriodAfterReporting:[int256]:int256, penalizeWrong:[int256,int256]:_]

CATCHUP = Controller.lookup('penalizationCatchup')
extern penalizationCatchup.se: [penalizationCatchup:[int256,int256]:int256]

MUTEX = Controller.lookup('mutex')
extern mutex: [getMutex:[]:int256, setMutex:[]:int256, unsetMutex:[]:int256]


### Faucets - get ~free rep + cash!

extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

inset('../data_api/refund.se')

inset('eventHelpers.se')

event fundedAccount(branch: indexed, sender: indexed, cashBalance, repBalance, timestamp)

macro POINT_ZERO_ONE: 10000000000000000
macro ONE_MONTH: 2592000
macro POINT_SIX: 600000000000000000

# Error -1: Hey, you're not broke!
def cashFaucet():
    refund()
    if(CASH.balanceOf(msg.sender) > 5 * ONE):
        return(-1)
    CASH.setCash(msg.sender, 10000 * ONE)
    return(1)

def reputationFaucet(branch):
    refund()
    if REPORTING.repIDToIndex(branch, msg.sender) != 0 or REPORTING.getReporterID(branch, 0) == msg.sender:
        index = REPORTING.repIDToIndex(branch, msg.sender)
    else:
        index = REPORTING.getNumberReporters(branch)
        REPORTING.addReporter(branch, msg.sender, 0, 0, 0)
    REPORTING.setRep(branch, index, 47*ONE)
    periodLength = BRANCHES.getPeriodLength(branch)
    if block.timestamp % periodLength <= periodLength / 2:
        penalizedUpTo = BRANCHES.getVotePeriod(branch) - 1
    else:
        penalizedUpTo = BRANCHES.getVotePeriod(branch)
    CONSENSUS.setPenalizedUpTo(branch, msg.sender, penalizedUpTo)
    CONSENSUS.setRepCollected(branch, msg.sender, penalizedUpTo)
    return(1)

def fundNewAccount(branch):
    self.reputationFaucet(branch, call=delegate)
    CASH.setCash(msg.sender, 10000*ONE)
    log(type=fundedAccount, branch, msg.sender, 10000*ONE, 47*ONE, block.timestamp)
    return(1)

# Used to claim rep on a fork or on a new branch
# Returns 1 if successful, 0 if already claimed/too late
# Error:
    # -1: parent isn't the actual parent
    # -2: penalization catchup failed
    # -3: only behind one period and not caught up / penalized yet
def claimInitialRep(parent, branch):
    refund()
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()
    # auto increment vote period if needed
    CONSENSUSFUNCTIONS.incrementPeriodAfterReporting(parent)
    parentPeriod = BRANCHES.getParentPeriod(branch)
    forkPeriod = BRANCHES.getForkPeriod(parent)
    fork = REPORTING.getFork(parent)
    forkEvent = BRANCHES.getEventForkedOver(parent)
    outcome = EVENTS.getUncaughtOutcome(forkEvent)
    if(binary(forkEvent)):
        outcome = catch(outcome)
    report = EXPEVENTS.getReport(parent, forkPeriod, forkEvent, msg.sender)
    ethical = ethicCatch(EVENTS.getEthics(forkEvent))
    ethicReport = EXPEVENTS.getEthicReport(parent, forkPeriod, forkEvent, msg.sender)
    dormantRep = EXPEVENTS.getPeriodDormantRep(parent, parentPeriod, msg.sender)
    # if this wasn't set then use reg. dormant rep balance
    if(dormantRep == 0):
        dormantRep = REPORTING.balanceOfReporter(parent, msg.sender)
    # if this wasn't set then use reg. rep balance after catching reporter up
    rep = EXPEVENTS.getBeforeRep(parent, parentPeriod, msg.sender)
    checkRepClaimPreconditions()

    if(rep == 0):
        rep = REPORTING.getRepBalance(parent, msg.sender)
    repDecrease = 0
    # if forked and (reported with original consensus or didn't report or (reported with original ethicality and forked over ethicality))
    reportedWithOriginalConsensus = ((outcome - POINT_ZERO_ONE) <= report <= (outcome + POINT_ZERO_ONE))
    reportedWrongEthicality = (BACKSTOPS.getForkedOverEthicality(forkEvent) and ethical == ethicReport)
    reportedWrongly = (reportedWithOriginalConsensus or !report or reportedWrongEthicality)
    if(fork and reportedWrongly):
        removeRepFromThoseWhoReportedWrong()
    if(fork):
        CONSENSUS.setPenalizedUpTo(branch, msg.sender, forkPeriod)
        CONSENSUS.setRepCollected(branch, msg.sender, forkPeriod)
    else:
        CONSENSUS.setPenalizedUpTo(branch, msg.sender, (BRANCHES.getVotePeriod(branch) - 1))
        CONSENSUS.setRepCollected(branch, msg.sender, (BRANCHES.getVotePeriod(branch) - 1))
    REPORTING.addReporter(branch, msg.sender, rep, dormantRep, repDecrease)
    MUTEX.unsetMutex()
    return(1)

macro checkRepClaimPreconditions():
    branchDoesntExist = (!parent or !branch)
    if((BRANCHES.getParent(branch) != parent && parent && branch) or branchDoesntExist):
        MUTEX.unsetMutex()
        return(-1)
    tooLate = block.timestamp > (BRANCHES.getCreationDate(branch) + ONE_MONTH)
    alreadyClaimed = REPORTING.repIDToIndex(branch, msg.sender)
    if(alreadyClaimed or tooLate):
        MUTEX.unsetMutex()
        return(0)
    lastPeriodPenalized = CONSENSUS.getPenalizedUpTo(parent, msg.sender)
    lastPeriod = BRANCHES.getVotePeriod(parent) - 1
    delta = lastPeriod - lastPeriodPenalized
    if(delta > 1):
        if(CATCHUP.penalizationCatchup(parent, msg.sender) != 1):
            MUTEX.unsetMutex()
            return(-2)
    if(!CONSENSUS.getRepRedistributionDone(parent, msg.sender)):
        MUTEX.unsetMutex()
        return(-3)

macro removeRepFromThoseWhoReportedWrong():
    # take away 40% of rep from liars and those who didn't report
    repDecrease = rep - safeFxpMul(rep, POINT_SIX)
    rep = safeSub(rep, repDecrease)
    amountLeftToPayBonder = BACKSTOPS.getBondAmount(forkEvent) - BACKSTOPS.getForkBondPaid(forkEvent)
    if(repDecrease < amountLeftToPayBonder):
        # send all the redistributed rep to the fork bond poster
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getForkBondPoster(forkEvent)), repDecrease)
    # send amountLeftToPayBonder [if positive] to the fork bond poster
    elif(amountLeftToPayBonder > 0):
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getForkBondPoster(forkEvent)), amountLeftToPayBonder)
        # send the rest to the new branch's redistribution pool
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), (repDecrease - amountLeftToPayBonder))
    else:
        # send to new branch's redistribution pool
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), repDecrease)
