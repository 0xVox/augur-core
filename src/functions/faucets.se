# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2015 Forecast Foundation OU
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you have questions, please contact jack@augur.net or joey@augur.net.

import reporting as REPORTING
import events as EVENTS
import cash as CASH
import consensusData as CONSENSUS
import branches as BRANCHES
import expiringEvents as EXPEVENTS
import backstops as BACKSTOPS
extern subcurrency: [allowance:[int256,int256]:int256, approve:[int256,int256]:int256, balance:[]:int256, balanceOf:[int256]:int256, transfer:[int256,int256]:int256, transferFrom:[int256,int256,int256]:int256]
inset('refund.se')
inset('eventHelpers.se')

macro POINTSEVEN: 12912720851596685312
macro POINTZEROONE: 184467440737095520

# Error -1: Hey, you're not broke!
def cashFaucet():
    refund()
    if(CASH.balanceOf(msg.sender) > 5 * ONE):
        return(-1)
    CASH.setCash(msg.sender, 10000 * ONE)
    return(1)

def reputationFaucet(branch):
    refund()
    if(REPORTING.repIDToIndex(branch, tx.origin) != 0 or REPORTING.getReporterID(branch, 0) == tx.origin):
        index = REPORTING.repIDToIndex(branch, tx.origin)
    else:
        index = REPORTING.getNumberReporters(branch)
        REPORTING.addReporter(branch, tx.origin, 0, 0, 0)
    REPORTING.setRep(branch, index, 47 * ONE)
    CONSENSUS.setPenalizedUpTo(branch, tx.origin, (BRANCHES.getVotePeriod(branch) - 1))
    return(1)

def fundNewAccount(branch):
    self.reputationFaucet(branch)
    CASH.setCash(msg.sender, 10000 * 2 ** 64)
    return(1)

# Used to claim rep on a fork or on a new branch
# Returns 1 if successful, 0 if already claimed
# Error:
    # -1: parent isn't the actual parent
    # -2: penalization catchup failed
    # -3: only behind one period and not caught up / penalized yet
def claimInitialRep(parent, branch):
    refund()
    if(BRANCHES.getParent(branch) != parent):
        return(-1)
    # have 1 month to claim
    if(!REPORTING.repIDToIndex(branch, msg.sender) and block.timestamp < (BRANCHES.getCreationDate(branch) + TWENTYFOURHR * 30)):
        # auto increment vote period if needed
        INCREMENTPERIOD.incrementPeriodAfterReporting(parent)
        parentPeriod = BRANCHES.getParentPeriod(branch)
        forkPeriod = BRANCHES.getForkPeriod(parent)
        fork = REPORTING.getFork(parent)
        forkEvent = BRANCHES.getEventForkedOver(parent)
        outcome = EVENTS.getUncaughtOutcome(forkEvent)
        if(binary(forkEvent)):
            outcome = catch(outcome)
        report = EXPEVENTS.getReport(parent, forkPeriod, forkEvent, msg.sender)
        ethical = ethicCatch(EVENTS.getEthics(forkEvent))
        ethicReport = EXPEVENTS.getEthicReport(parent, forkPeriod, forkEvent, msg.sender)
        dormantRep = EXPEVENTS.getPeriodDormantRep(parent, parentPeriod, msg.sender)
        # if this wasn't set then use reg. dormant rep balance
        if(dormantRep == 0):
            dormantRep = REPORTING.balanceOf(parent, msg.sender)
        # if this wasn't set then use reg. rep balance after catching reporter up
        rep = EXPEVENTS.getBeforeRep(parent, parentPeriod, msg.sender)
        lastPeriodPenalized = CONSENSUS.getPenalizedUpTo(parent, msg.sender)
        lastPeriod = BRANCHES.getVotePeriod(parent) - 1
        delta = lastPeriod - lastPeriodPenalized
        if(delta > 1):
            if(CATCHUP.penalizationCatchup(parent, msg.sender) != 1):
                return(-2)
        if(!CONSENSUS.getRepRedistributionDone(parent, msg.sender)):
            return(-3)
        if(rep == 0):
            rep = REPORTING.getRepBalance(parent, msg.sender)
        repDecrease = 0
        # if forked and (reported with original consensus or didn't report or (reported with original ethicality and forked over ethicality))
        if(fork and ((report >= (outcome - POINTZEROONE) and report <= (outcome + POINTZEROONE)) or !report or (BACKSTOPS.getForkedOverEthicality(forkEvent) and ethical == ethicReport))):
            # take away 30% of rep from liars and those who didn't report
            repDecrease = rep - rep * POINTSEVEN / ONE
            rep = rep - repDecrease
            amountLeftToPayBonder = BACKSTOPS.getBondAmount(forkEvent) - BACKSTOPS.getForkBondPaid(forkEvent)
            if(repDecrease < amountLeftToPayBonder):
                # send all the redistributed rep to the fork bond poster
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getForkBondPoster(forkEvent)), repDecrease)
            else:
                # send amountLeftToPayBonder [if positive] to the fork bond poster
                if(amountLeftToPayBonder > 0):
                    REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getForkBondPoster(forkEvent)), amountLeftToPayBonder)
                    # send the rest to the new branch's redistribution pool
                    REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), (repDecrease - amountLeftToPayBonder))
                else:
                    # send to new branch's redistribution pool
                    REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), repDecrease)
        if(fork):
            CONSENSUS.setPenalizedUpTo(branch, msg.sender, forkPeriod)
        else:
            CONSENSUS.setPenalizedUpTo(branch, msg.sender, (BRANCHES.getVotePeriod(branch) - 1))
        REPORTING.addReporter(branch, msg.sender, rep, dormantRep, repDecrease)
        return(1)
    else:
        # already claimed or too late
        return(0)
