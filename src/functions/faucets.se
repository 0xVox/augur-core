# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2015 Forecast Foundation OU
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you have questions, please contact jack@augur.net or joey@augur.net.

import reporting as REPORTING
import cash as CASH
import consensus as CONSENSUS
import branches as BRANCHES
import expiringEvents as EXPEVENTS
inset('refund.se')

# Error -1: Hey, you're not broke!
def cashFaucet():
    refund()
    if CASH.balance(msg.sender) > 5*ONE:
        return(-1)
    CASH.setCash(msg.sender, 10000*ONE)
    return(1)

def reputationFaucet(branch):
    refund()
    if REPORTING.repIDToIndex(branch, msg.sender) != 0 or REPORTING.getReporterID(branch, 0) == msg.sender:
        index = REPORTING.repIDToIndex(branch, msg.sender)
    else:
        index = REPORTING.getNumberReporters(branch)
        REPORTING.addReporter(branch, msg.sender)
    REPORTING.setRep(branch, index, 47*ONE)
    CONSENSUS.initialPenalizedSetting(branch, msg.sender, (BRANCHES.getVotePeriod(branch)-1))
    return(1)

def fundNewAccount(branch):
    CASH.send(self, 0)
    self.reputationFaucet(branch)
    CASH.setCash(msg.sender, 10000*2^64)
    return(1)

def claimInitialRep(parent, branchID):
    refund()
    if(BRANCHES.getParent(branchID)!=parent):
        return(0)
    # have 1 month to claim
    # make sure user can only claim once, use before rep of period where fork was initiated in todo
    if(REPORTING.repIDToIndex(branchID, msg.sender)==0 && block.timestamp < (BRANCHES.getCreationDate(branchID) + TWENTYFOURHR*30)):
        i = REPORTING.getNumberReporters(branchID)
        parentPeriod = BRANCHES.getParentPeriod(branchID)
        # is this the right before rep so user hasn't lost round 2 bond if they made one
        rep = EXPEVENTS.getBeforeRep(parent, parentPeriod, msg.sender)
        reporterID = msg.sender
        self.Reporting[branchID].reputation[i].reporterID = reporterID
        if(self.Reporting[branchID].fork && (userReportedOutcomeEqualToOutcomePreFork || userDidntReportOnForkedEvent || (forkedOverEthicality && userReportedOnEthicalityEqualToPreFork))):
            # take away 30% of rep from liars and those who didn't report
            repDecrease = rep*12912720851596685312/ONE
            rep = rep - repDecrease
            amountLeftToPayBonder = doubleOfTheBond - bondDoubledThusFar
            if(repDecrease < amountLeftToPayBonder):
                # send all the rep to the fork bond poster
            else:
                # send amountLeftToPayBonder [if positive] to the fork bond poster
                # send the rest to the new branch's redistribution pool
        self.Reporting[branchID].reputation[i].repValue = rep
        self.Reporting[branchID].activeRep += rep
        self.Reporting[branchID].repIDtoIndex[reporterID] = i
        if(fork):
            forkPeriod = fetchPeriodWhenForked
            CONSENSUS.initialPenalizedSetting(branch, msg.sender, forkPeriod)
        else:
            CONSENSUS.initialPenalizedSetting(branch, msg.sender, (BRANCHES.getVotePeriod(branch)-1))
        self.Reporting[branchID].dormantRep[i].reporterID = reporterID
        dormantRep = EXPEVENTS.getPeriodDormantRep(parent, BRANCHES.getParentPeriod(branchID), msg.sender)
        self.Reporting[branchID].dormantRep[i].repValue = dormantRep
        self.Reporting[branchID].numberReporters += 1
        self.Reporting[branchID].totalRep += rep + dormantRep
        return(1)
    else:
        # already claimed or too late
        return(0)