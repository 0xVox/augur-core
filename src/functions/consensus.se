import cash as CASH
import expiringEvents as EXPIRING
import reporting as REPORTING
import events as EVENTS
import fxpFunctions as FXP
import makeReports as MAKEREPORTS
import branches as BRANCHES
import markets as MARKETS
import backstops as BACKSTOPS


# round two consensus data [note/todo: UI should show round 2 events first / up top]
data bondPaid[]
data roundTwo[](roundTwo, originalVotePeriod, originalOutcome, final)
data baseReportersLastPeriod
data periodBalance[][]
data feeFirst

def init():
    self.baseReportersLastPeriod = 3

# branch takes a branchID
    # denominator takes a vote period
    # penalized takes for a given period a user / address reported for a certain event and num of events they reported on in that period in total
    # penalizedUpTo is the latest period a user has done the penalization for
    # fees collected states whether for a given period a user collected fees
    # rep collected states whether for a given period a user collected rep
data branch[](denominator[], penalized[][](event[], num, notEnoughReportsPenalized), penalizedUpTo[], feesCollected[][])

def initialPenalizedSetting(branch, reporter, upto):
    self.branch[branch].penalizedUpTo[reporter] = upto
    return(1)
    
macro YES: 2^65
macro NO: 2^64
macro BAD: 3 * 2^63
macro CATCH_TOLERANCE: 2^64 / 10

# Bins values to 1, 1.5, 2
macro catch($x):
    if($x < (BAD - CATCH_TOLERANCE)):
        NO
    elif($x > (BAD + CATCH_TOLERANCE)):
        YES
    else:
        BAD

#1. Record rep at start of report period [before rep in make reports]
#2. Penalize for each event
#3. Each reporter needs to do this for all events they reported on, if not get docked
#4. For first half of the new period, people can do penalization for the last period, for the second half users have to claim rep then trading fees
#5. If you don't do it for all events or don't penalize for not reporting enough, autolose 20% rep each period one does this (b/c they're trying to cheat)
# Errors:
    # -1: pushed back event already resolved, so can't redistribute rep based off of its original expected expiration period
    # -2: already past first half of new period and needed to penalize before then
    # -3: need to do not enough reports penalization [or lackthereof]
# roundTwoResolve needs to be called for any event here before can be penalized if it's a backstop 1 event, a la close market for other events before being penalized
# todo finish new penalize wrong
# always use uncaught + caught version as opposed to actual outcome for this to be safe wrt ethicality / diff. for payouts
# make max rep loss 20%, do V way to limit excess cuts
def penalizeWrong(branch, event):
    # remove from num reports actual for a reporter for last period if they reported on it the first time [a round 2 event], prevent them from reporting on it, but still do the rep redistrib. at the end before returning in case this event is the last one a user submits for reporting, only need to call this once that doesn't actually do anything for the original period an event was in simply to remove it from num reports actual, or to instead increment the num b/c it shouldn't be penalized until the next period resolution is over
    repBalance = REPORTING.getRepBalance(branch, msg.sender)
    lastPeriod = BRANCHES.getVotePeriod(branch)-1
    if(!self.branch[branch].penalized[lastPeriod][tx.origin].notEnoughReportsPenalized):
        return(-3)
    # if overruled
    overruled = 0
    if((BACKSTOPS.getOriginalOutcome(event) != EVENTS.getOutcome(event) && BACKSTOPS.getOriginalOutcome(event) != EVENTS.getUncaughtOutcome(event) or BACKSTOPS.getOriginalEthicality(event)!=ethic_catch(EVENTS.getEthical(event)))):
        overruled = 1
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.number % periodLength
    if(residual > periodLength/2):
        return(-2)
    # accounts for if no events in a period
    if(EXPEVENTS.getNumberEvents(branch, lastPeriod)==0):
        self.branch[branch].penalizedUpTo[tx.origin] = lastPeriod
        self.branch[branch].denominator[lastPeriod] += repBalance
        return(1)

    if(EVENTS.getOriginalExpiration(event)!=EVENTS.getExpiration(event) && MARKETS.getPushedForward(market)):
        if(lastPeriod==EVENTS.getOriginalExpiration(event)/BRANCHES.getPeriodLength(branch)):
            return(-1)

    newRep = 0
    outcome = catch(EVENTS.getUncaughtOutcome(event))
    reportValue = MAKEREPORTS.getReport(branch, lastPeriod, event)
    p = self.proportionCorrect(event)
    if(scalar(event) or categorical(event)):
        outcome = EVENTS.getUncaughtOutcome(event)
        # or can do
        outcome = EVENTS.getMode(event)
        # which should be exactly the same
    oldRep = MAKEREPORTS.getBeforeRep(branch, lastPeriod)
    if(!self.branch[branch].penalized[lastPeriod][tx.origin].event[event] && reportValue && outcome!=0):
        # wrong
        #184467440737095520 == 0.01 in fxp
        if(reportValue > outcome+184467440737095520 or reportValue < outcome-184467440737095520):
            if(scalar(event) or categorical(event) or outcome==3*2**64):
                p = -(abs(reportValue - outcome)/2) + 2**64
            newRep = oldRep*(2*p - 2**64)/2**64
        # right
        else:
            if(scalar(event) or categorical(event) or outcome==3*2**64):
                p = -(abs(reportValue - outcome)/2) + 2**64
            newRep = oldRep*(2*(2**64-p)**2 / p + 2**64)/2**64
        #smoothedRep = oldRep*.8 + newRep*.2
        smoothedRep = oldRep * 14757395258967642112/2**64 + newRep * 3689348814741910528/2**64
        repChange = smoothedRep - oldRep
        newAfterRep = MAKEREPORTS.getAfterRep(branch, lastPeriod) + repChange
        MAKEREPORTS.setAfterRep(branch, lastPeriod, newAfterRep)
        self.branch[branch].penalized[lastPeriod][tx.origin].event[event] = 1
        self.branch[branch].penalized[lastPeriod][tx.origin].num += 1
        if(MAKEREPORTS.getNumReportsActual(branch, lastPeriod)==self.branch[branch].penalized[lastPeriod][tx.origin].num):
            if(newAfterRep <= 0):
                newAfterRep = 0
                # set after to 0
            self.branch[branch].penalizedUpTo[tx.origin] = lastPeriod
            self.branch[branch].denominator[lastPeriod] += newAfterRep
            totalRepDifference = newAfterRep - oldRep
            if(repBalance + totalRepDifference <= 0):
                totalRepDifference = -1*repBalance
            if(totalRepDifference<0):
                # removes rep from reporter who lost it [those who gained rep will get it in the claim rep phase]
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, tx.origin), totalRepDifference)
                # sends that rep to the branch
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), -totalRepDifference)
    return(1)
                

# So we want to do the rbcr for both period 1 and period 2 at this time
# penalizeWrong for backstop 1
def penalizeRoundTwoWrong(branch, event):
    lastPeriod = BRANCHES.getVotePeriod(branch) - 1
    repBalance = REPORTING.getRepBalance(branch, msg.sender)
    lastPenalizationPeriod = lastPeriod - 1
    oldReport = REPORTS.getReport(branch,lastPeriod, event)
    if(!self.branch[branch].penalized[lastPeriod][tx.origin].notEnoughReportsPenalized):
        return(-3)
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.number % periodLength
    if(residual > periodLength/2):
        return(-2)
    newRep = 0
    # if overruled
    overruled = 0
    if((BACKSTOPS.getOriginalOutcome(event) != EVENTS.getOutcome(event) && BACKSTOPS.getOriginalOutcome(event) != EVENTS.getUncaughtOutcome(event) or BACKSTOPS.getOriginalEthicality(event)!=ethic_catch(EVENTS.getEthical(event)))):
        overruled = 1
    # if appealed don't allow rbcr until after the appeal process is over
    # if it's penalizing in the period it was pushed back to we can do the penalization, should do it for both the first and second period
    reportValue = REPORTS.getReport(branch,period,event)
    if(BACKSTOPS.getRoundTwo(event) && BACKSTOPS.getFinal(event) && !self.branch[branch].penalized[lastPeriod][tx.origin].event[event] && reportValue):
    outcome = catch(EVENTS.getUncaughtOutcome(event))
    if(scalar(event) or categorical(event)):
        outcome = EVENTS.getUncaughtOutcome(event)
        # or can do
        outcome = EVENTS.getMode(event)
        # which should be exactly the same
    oldRep = MAKEREPORTS.getBeforeRep(branch, lastPeriod)
    p = self.proportionCorrect(event)
    newAfterRep = 0
    smoothedRep = 0
    # Do the first rbcr based on first report and final outcome if reported first time
    # for ethicality if diff. appeal then pay back the appeal bond from people who reported the wrong ethicality, but don't take rep beyond that and max at 20% of their rep respectively
	if(oldReport && !self.branch[branch].penalized[lastPeriod][tx.origin].event[event] && outcome!=0):
	    oldEthics = MAKEREPORTS.getEthicReport(branch, lastPenalizationPeriod, event)
	    # wrong
        #184467440737095520 == 0.01 in fxp
        if(oldReport > outcome+184467440737095520 or oldReport < outcome-184467440737095520):
            if(scalar(event) or categorical(event) or outcome==3*2**64):
                p = -(abs(oldReport - outcome)/2) + 2**64
            newRep = oldRep*(2*p - 2**64)/2**64
        # right
        else:
            if(scalar(event) or categorical(event) or outcome==3*2**64):
                p = -(abs(oldReport - outcome)/2) + 2**64
            newRep = oldRep*(2*(2**64-p)**2 / p + 2**64)/2**64
        #smoothedRep = oldRep*.8 + newRep*.2
        smoothedRep = oldRep * 14757395258967642112/2**64 + newRep * 3689348814741910528/2**64
    
        # give rep to bonded challenger
		# only give rep to bonded challenger _if_ it hasn't been paid back 2x yet
        # if overruled: reward the bonded challenger with whatever rep would normally be taken from the liars up to 2x the bond, rest goes to branch as usual
        repChange = smoothedRep - oldRep
        newAfterRep = MAKEREPORTS.getAfterRep(branch, lastPeriod) + repChange
        MAKEREPORTS.setAfterRep(branch, lastPeriod, newAfterRep)
        totalRepDifference = repChange
        if(oldEthics != ethic_catch(EVENTS.getEthical(event)) && totalRepDifference >=0):
            totalRepDifference = -184467440737095520*repBalance / 2**64
        if(newAfterRep <= 0):
            newAfterRep = 0
            # set after to 0
        if(repBalance + totalRepDifference <= 0):
            totalRepDifference = -1*repBalance
	    if(overruled && self.bondPaid[event] < 200 && totalRepDifference < 0):
	        # done instead of sending to redistrib. pool
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, tx.origin), totalRepDifference)
            # sends that rep to the bonded challenger
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getBondPoster(event)), -totalRepDifference)
            self.bondPaid[event] += -1*totalRepDifference

	# ○ Do the second (for each user) based on second report and final outcome
    # for ethicality if diff. appeal then pay back the appeal bond from people who reported the wrong ethicality, but don't take rep beyond that and max at 20% of their rep respectively
	if(reportValue && !self.branch[branch].penalized[lastPeriod][tx.origin].event[event] && outcome!=0):
        ethics = MAKEREPORTS.getEthicReport(branch, lastPeriod, event)
	    # wrong
        #184467440737095520 == 0.01 in fxp
        if(reportValue > outcome+184467440737095520 or reportValue < outcome-184467440737095520):
            if(scalar(event) or categorical(event) or outcome==3*2**64):
                p = -(abs(reportValue - outcome)/2) + 2**64
            newRep = oldRep*(2*p - 2**64)/2**64
        # right
        else:
            if(scalar(event) or categorical(event) or outcome==3*2**64):
                p = -(abs(reportValue - outcome)/2) + 2**64
            newRep = oldRep*(2*(2**64-p)**2 / p + 2**64)/2**64
        #smoothedRep = oldRep*.8 + newRep*.2
        smoothedRep = oldRep * 14757395258967642112/2**64 + newRep * 3689348814741910528/2**64
        repChange = smoothedRep - oldRep
        newAfterRep = MAKEREPORTS.getAfterRep(branch, lastPeriod) + repChange
        MAKEREPORTS.setAfterRep(branch, lastPeriod, newAfterRep)
        totalRepDifference = repChange
        if(ethics != ethic_catch(EVENTS.getEthical(event)) && totalRepDifference >=0):
            totalRepDifference = -184467440737095520*repBalance / 2**64
        if(newAfterRep <= 0):
            newAfterRep = 0
            # set after to 0
        if(repBalance + repChange <= 0):
            totalRepDifference = -1*repBalance
	    if(overruled && self.bondPaid[event] < 200 && totalRepDifference < 0):
	        # done instead of sending to redistrib. pool
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, tx.origin), totalRepDifference)
            # sends that rep to the bonded challenger
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getBondPoster(event)), -totalRepDifference)
            self.bondPaid[event] += -1*totalRepDifference

    self.branch[branch].penalized[lastPeriod][tx.origin].event[event] = 1
    self.branch[branch].penalized[lastPeriod][tx.origin].num += 1

    if(MAKEREPORTS.getNumReportsActual(branch, lastPeriod)==self.branch[branch].penalized[lastPeriod][tx.origin].num):
        if(newAfterRep <= 0):
            newAfterRep = 0
            # set after to 0
        self.branch[branch].penalizedUpTo[tx.origin] = lastPeriod
        self.branch[branch].denominator[lastPeriod] += newAfterRep
        totalRepDifference = newAfterRep - oldRep
        if(repBalance + totalRepDifference <= 0):
            totalRepDifference = -1*repBalance
        if(totalRepDifference<0):
            # removes rep from reporter who lost it [those who gained rep will get it in the claim rep phase]
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, tx.origin), totalRepDifference)
            # sends that rep to the branch
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), -totalRepDifference)
    return(1)



# Basically, if you don't access the account, the rep just sort of sits there, proverbially speaking, it's burned.  If you access the account, it's sent to the branch's rep account and distributed like trading fees.  To prevent double claiming, similarly to trading fees each rep acc. that hadn't claimed rep or trading fees but reported that past period would neither be able to send nor receive rep until they claimed.  You'd get % of people that reported fees / rep
# Errors:
    # -1: already done
    # -2: hasn't reported this period
def penalizeNotEnoughReports(branch):
    lastPeriod = BRANCHES.getVotePeriod(branch)-1
    if(self.branch[branch].penalized[lastPeriod][tx.origin].notEnoughReportsPenalized):
        return(-1)
    # accounts for if no events in a period
    if(EXPEVENTS.getNumberEvents(branch, lastPeriod)==0):
        self.branch[branch].penalized[lastPeriod][tx.origin].notEnoughReportsPenalized = 1
        return(1)
    if(!hasReported(branch, lastPeriod)):
        return(-2)
    numEvents = MAKEREPORTS.getNumEventsToReport(branch, lastPeriod)
    repConstant = REPORTING.getRepBalance(branch, tx.origin)*2**64/REPORTING.getTotalRep(branch)
    logOutput = FXP.fx_log(repConstant)
    exp = FXP.fx_exp(22136092888451461120*logOutput/2**64)
    exp += 18446744073709552
    total = exp*self.baseReportersLastPeriod
    # correction for if people have more than x [4.6% of at 40 min reporters] rep in one account - they report on everything (hence incentive to divy rep into mult. accounts and not pool) i.e. if((exp(ln(rep%)*1.2)+0.001)*40 > 1)
    if(total > 2**64):
        numEvents = (EXPEVENTS.getNumEventsToReportOn(branch, votePeriod)/self.baseReportersLastPeriod)*2**64 + MAKEREPORTS.getNumRequired(branch, votePeriod)
    numReportsActual = MAKEREPORTS.getNumReportsActual(branch, lastPeriod)
    if(numEvents/(2*2**64) > MAKEREPORTS.getNumReportsActual(branch, lastPeriod)):
        originalRep = REPORTING.getRepBalance(branch, tx.origin)
        # penalize people
        # can number reported on be greater than num expected to report on
        newRep = 3689348814741910528*numReportsActual*originalRep / numEvents
        oldRep = originalRep*14757395258967642112 / 2**64
        repChange = (oldRep+newRep) - originalRep
        if(repChange > 0):
            return(1)
        # removes rep from reporter who lost it
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, tx.origin), repChange)
        # sends that rep to the branch rep pool
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), -repChange)
        MAKEREPORTS.setBeforeRep(branch, lastPeriod, oldRep+newRep)
        MAKEREPORTS.setAfterRep(branch, lastPeriod, oldRep+newRep)
    self.branch[branch].penalized[lastPeriod][tx.origin].notEnoughReportsPenalized = 1
    return(1)

# -2: needs to be second half of reporting period to claim rep [1st half is when redistribution is done]
    # after this window, any unclaimed rep is pushed to the next period's redistrib. pool via the first make report submission
def collectFees(branch):
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.number % periodLength
    if(residual < periodLength/2):
        return(-2)
    if(!repRedistributionDone(branch, tx.origin)):
        # need to call penalize for all events and penalize for too lazy to report or catchup if necessary
        return(-1)
    lastPeriod = BRANCHES.getVotePeriod(branch) - 1
    if(!self.branch[branch].feesCollected[lastPeriod][tx.origin] && hasReported(branch, lastPeriod)):
        newRep = MAKEREPORTS.getAfterRep(branch, lastPeriod)
        denominator = self.branch[branch].denominator[lastPeriod]
        if(!self.feeFirst):
            self.feeFirst = 1
            self.periodBalance[branch][lastPeriod] = REPORTING.getRepBalance(branch, branch)
        gainedRep = newRep * 2**64 / denominator * self.periodBalance[branch][lastPeriod] / 2**64
        #if(lostRep) newRep should be == MAKEREPORTS.getAfterRep(branch, period) + gainedRep
        #if(gainedRep) newRep should be == MAKEREPORTS.getBeforeRep(branch, period) + gainedRep
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, tx.origin), gainedRep)
        REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, branch), gainedRep)
        cash = BRANCHES.getInitialBalance(branch, lastPeriod) * newRep / denominator
        CASH.addCash(tx.origin, cash)
        CASH.subtractCash(branch, cash)
        self.branch[branch].feesCollected[lastPeriod][tx.origin] = 1
        return(1)
    else:
        return(0)

# call when a user who hasn't reported for a while wants to start again and needs to catch up on penalizations
# ex:
    #period 0 voteperiod -1 - last period penalized should be -1 or starting vote period
    #add some events to period 0
    #increment
    #period 1 voteperiod 0 - shouldn't be penalizing anything yet
    #increment
    #period 2 voteperiod 1 - penalize voteperiod 0
# ex 2:
    #currently in period 100, voteperiod 99 - last period penalized up to should be 99 or starting vote period
    #add some events to period 100
    #increment to period 101
    #period 101, voteperiod 100 - shouldn't be penalizing anything yet
    #increment
    #period 102, voteperiod 101 - penalize voteperiod 100
def penalizationCatchup(branch):
    # should only be allowed in 1st half of any period b/c rep removal / sending to branch should only be done then
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.number % periodLength
    if(residual > periodLength/2):
        return(-2)
    # find delta between this last period and last penalized up to
    lastPeriodPenalized = self.branch[branch].penalizedUpTo[tx.origin]
    lastPeriod = BRANCHES.getVotePeriod(branch)-1
    delta = lastPeriod - lastPeriodPenalized
    oldRep = REPORTING.getRepBalance(branch, tx.origin)
    if(lastPeriodPenalized!=lastPeriod && !hasReported(branch, lastPeriod)):
        if(delta <= 0):
            return(0)
        # dock 10% for each period they didn't penalize on
        smoothedRep = oldRep*16602069666338596864/2**64
        i = 1
        if(delta>22):
            smoothedRep = smoothedRep*1844674407370955264/2**64
            delta = 0
        while i < delta:
            smoothedRep = smoothedRep*16602069666338596864/2**64
            i += 1
        # and send it to branch for penalty rep collection
        repChange = oldRep - smoothedRep
        # removes rep from reporter who lost it
        REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, tx.origin), repChange)
        # sends that rep to the branch rep pool
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), repChange)
        self.branch[branch].penalizedUpTo[tx.origin] = lastPeriod
        return(1)
    else:
        return(0)

# anti cheat provide ballot and randomNum mechanism steal deposit
# Returns:
    # 0: not a valid claim
    # -2: reporter doesn't exist
def slashRep(branch, salt, report, reporter, eventID):
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.number % periodLength
    if(residual > periodLength/2):
        return(-2)
    votePeriod = BRANCHES.getVotePeriod(branch)
    realHash = EXPEVENTS.getReportHash(branch, votePeriod, reporter, eventID)
    hashInfo = array(4)
    hashInfo[0] = reporter
    hashInfo[1] = salt
    hashInfo[2] = report
    hashInfo[3] = eventID
    reportHash = sha256(hashInfo, chars=32*len(hashInfo))
    if(reportHash!=realHash):
        return(0)
    else:
        reporterIndex = REPORTING.repIDToIndex(branch, reporter)
        trutherIndex = REPORTING.repIDToIndex(branch, tx.origin)
        # if the truther's rep. account doesn't exist, make one
        if(REPORTING.getReporterID(branch, trutherIndex)!=tx.origin):
            trutherIndex = REPORTING.getNumberReporters(branch)
            REPORTING.addReporter(branch, tx.origin)
        if(REPORTING.getReporterID(branch, reporterIndex)!=reporter):
            return(-2)
        reporterBalance = REPORTING.getRepBalance(branch, reporter)
        REPORTING.setRep(branch, reporterIndex, 0)
        trutherBalance = REPORTING.getRepBalance(branch, tx.origin)
        REPORTING.setRep(branch, trutherIndex, (trutherBalance + reporterBalance*2**63 / 2**64))
    return(reporterBalance)

def incrementPeriodAfterReporting(branch):
    # do this after reporting is finished
    if(periodOver(branch)):
        period = block.number / BRANCHES.getPeriodLength($branch) - 1
        lastPeriod = period - 1
        percentAppealed = (EXPIRING.getRoundTwo(branch, period)*2**64/EXPIRING.getNumberEvents(branch, period) + EXPIRING.getRoundTwo(branch, lastPeriod)*2**64/EXPIRING.getNumberEvents(branch, lastPeriod)) / 2
        BRANCHES.incrementPeriod(branch)
        base_reporter_quantity = (3*2**64 + ((333*2**64 * Percent_Appealed/2**64)**3 / 2**128))/2**64
        self.baseReportersLastPeriod = BRANCHES.getBaseReporters(branch)
        BRANCHES.setBaseReporters(branch, base_reporter_quantity)
        return(1)
    else:
        return(0)
        
### Helper functions:

macro abs($a):
    if($a<0):
        $a = -$a
    $a
    
def proportionCorrect(event, branch, period):
    p = 0
    outcome = catch(EVENTS.getUncaughtOutcome(event))
    if(outcome!=0):
        # binary
        if(EVENTS.getNumOutcomes(event)==2 and 2**64*EVENTS.getMaxValue(event)==2**65 and 2**64*EVENTS.getMinValue(event)==2**64):
            # subtract 1 to get it from 0 to 1
            avgOutcome = EVENTS.getUncaughtOutcome(event) - 2**64
            # say we have outcome of 0, avg is .4, what is p?
            # p is .6 or 60%
            if(outcome == 2**64):
                p = 2**64 - avgOutcome
            # say we have outcome of 1, avg is .8, what is p (proportion correct)?
            # p is .8 or 80%
            if(outcome == 2 * 2**64):
                p = avgOutcome
            if(outcome == 3 * 2**63):
                return(0)
        return(p)
    else:
        return(0)

macro periodOver($branch):
    # what the current vote period should be
    currentVotePeriod = block.number / BRANCHES.getPeriodLength($branch) - 1
    # if actual vote period is less than what the current one should be, return 1, it can be incremented
    if(BRANCHES.getVotePeriod($branch) < currentVotePeriod):
        1
    else:
        0
    
macro hasReported($branch, $period):
    MAKEREPORTS.getReportedPeriod($branch, $period, tx.origin)

macro repRedistributionDone($branch, $reporter):
    lastPeriodPenalized = self.branch[$branch].penalizedUpTo[$reporter]
    lastPeriod = BRANCHES.getVotePeriod($branch)-1
    if(lastPeriod==lastPeriodPenalized):
        1
    else:
        0

def getRRDone(branch, reporter):
    return(repRedistributionDone(branch, reporter))


macro scalar($event):
    ((EVENTS.getMaxValue($event)!=2 || EVENTS.getMinValue($event)!=1) && EVENTS.getNumOutcomes($event)==2)
        
macro binary($event):
    (EVENTS.getNumOutcomes($event)==2 and 2**64*EVENTS.getMaxValue($event)==2**65 and EVENTS.getMinValue($event)==1)
        
macro categorical($event):
    (EVENTS.getNumOutcomes($event)>2)

# test bonded pushed forward event/market though not ready to be resolved
    # code in penalize for that:
        #elif(rejected && rejectedPeriodOver && && actuallyrejected && MAKEREPORTS.getReport(branch, lastPeriodperiod, event) && !self.penalized[lastPeriod][tx.origin].event[event] && outcome):
        #  outcome = 2**63
        #  mode = 2**63
        #   p = self.proportionCorrect(event, rejected)
        #   oldRep = MAKEREPORTS.getBeforeRep(branch, period)
        #   # wrong
        #   if(reportValue > outcome+.01 or reportValue < outcome-.01):
        #       if(scalar or categorical or .5):
        #         # scalar/cat are 0 - 1, binary .5 are 1-2 and 1.5
        #     # should be outcome since mode is the same
        #           p = -(abs(reportValue - mode)/2) + 1
        #       newRep = oldRep*(2*p -1)
        #   # right
        #   else:
        #       if(scalar or categorical or .5):
        #           p = -(abs(reportValue - mode)/2) + 1
        #       newRep = oldRep*(2*(1-p)**2 / p + 1)
        #   smoothedRep = oldRep*.8 + newRep*.2
        #   MAKEREPORTS.setAfterRep(branch, period, oldRep + (smoothedRep - oldRep))
        # repChange = smoothedRep - oldRep
        # if(repChange < 0):
        #   sendToRedistribPool
        # # need to except round two events from this when added
        # if(MAKEREPORTS.getNumReportsActual(branch, lastPeriod)==self.penalized[lastPeriod][tx.origin].num):
        #   self.totalRepPenalized[period] += oldRep
        #   self.denominator[branch][period] = self.totalRepPenalized[period] + (smoothedRep - oldRep)
        # self.penalized[lastPeriod][tx.origin].event[event] = 1
        # self.penalized[lastPeriod][tx.origin].num += 1
        #   return(1)
# test .99 resolve push forward