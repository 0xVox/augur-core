### Handles the default consensus cases: redistributions during reporting on the first round and incrementing the branch's period

import reporting as REPORTING
import branches as BRANCHES
import expiringEvents as EXPEVENTS
import events as EVENTS
import backstops as BACKSTOPS
import closeMarket as CLOSEMARKET
import consensusData as CONSENSUS

inset('../data_api/refund.se')
inset('eventHelpers.se')
inset('redistributeRep.se')
inset('proportionCorrect.se')
inset('repChange.se')

event penalize(user:indexed, outcome, oldrep, repchange, newafterrep, p, reportValue)

macro POINT_ZERO_ONE: 184467440737095520
macro POINT_EIGHT: 14757395258967642112
macro POINT_TWO: 1844674407370955264

macro periodOver($branch):
    # what the current vote period should be
    currentVotePeriod = block.timestamp / BRANCHES.getPeriodLength($branch) - 1
    # if actual vote period is less than what the current one should be, return 1, it can be incremented
    if(BRANCHES.getVotePeriod($branch) < currentVotePeriod):
        1
    else:
        0

# Penalizes a reporter for reporting wrongly on an event
    # examples from the start of a new branch:
        # ex:
            # period 0 voteperiod -1 - last period penalized should be -1 or starting vote period
            # add some events to period 0
            # increment
            # period 1 voteperiod 0 - shouldn't be penalizing anything yet b/c still reporting on period 0
            # increment
            # period 2 voteperiod 1 - penalize on events in voteperiod 0
        # ex 2:
            # currently in period 100, voteperiod 99 - last period penalized up to should be 99 or starting vote period
            # add some events to period 100
            # increment to period 101
            # period 101, voteperiod 100 - shouldn't be penalizing anything yet
            # increment
            # period 102, voteperiod 101 - penalize on events in voteperiod 100
# 1. Record rep at start of report period [before rep in make reports]
# 2. Penalize for each event
# 3. Each reporter needs to do this for all events they reported on, if not get docked
# 4. For first half of the new period, people can do penalization for the last period, for the second half users have to claim rep then trading fees
# 5. If a reporter doesn't do it for all events, they autolose 10% rep each period one doesn't do it (b/c they're trying to cheat)
# Errors:
    #  0: user has <1 rep
    # -1: need to penalize in round 2 penalize function
    # -2: already past first half of new period and needed to penalize before then
    # -3: in fork period only thing that rep redistribution is done on is the round 2 event in the original branch via round 2 penalize
    # -4: already done for all events in this period
    # -5: forked events should be penalized using the fork penalization function
    # -6: no outcome
    # -7: needed to collect fees last period [but didn't] which sets the before/after rep so now have to call penalizationCatchup - todo fix this, maybe call pencatchup or let anyone call pencatchup
    # -8: invalid branch
# force event to be resolved first if it can be
# call with branch, 0 if no events
def penalizeWrong(branch, event):
    refund()
    # todo perhaps increment period by default if not done
    repBalance = REPORTING.getRepBalance(branch, msg.sender)
    lastPeriod = BRANCHES.getVotePeriod(branch) - 1
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    newRep = 0
    rejected = EVENTS.getRejected(event)
    newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender)
    oldRep = EXPEVENTS.getBeforeRep(branch, lastPeriod, msg.sender)
    roundTwo = BACKSTOPS.getRoundTwo(event)
    uncaught = EVENTS.getUncaughtOutcome(event)
    outcome = catch(uncaught)
    checkPenalizeWrongPreconditions()

    repChange = 0
    reportValue = EXPEVENTS.getReport(branch, lastPeriod, event, msg.sender)
    numReportedOn = EXPEVENTS.getNumReportsSubmitted(branch, lastPeriod, msg.sender)
    penalizedOnEvent = CONSENSUS.getPenalized(branch, lastPeriod, msg.sender, event)
    # lastperiod is where people who originally voted on a round 2 event voted the first time - want num events penalized to go up but not to actually be penalized for it yet
        # shouldn't be penalized until the next period resolution is over [since it's a round 2 event]
    # if a person reported on a round 2 event, they cannot convert their rep to dormant or send rep until they've finished the resolution process for that round 2 event todo
    # unless this just happened to them last period and they reported correctly then - todo clarify / fix this if statement
    if(roundTwo and !penalizedOnEvent and reportValue):
        CONSENSUS.setPenalized(branch, lastPeriod, msg.sender, event)
        CONSENSUS.increasePenalizedNum(branch, lastPeriod, msg.sender, 1)
    # if this event was a pushed forward event that got rejected, don't penalize on it, only penalize on the final reporting, i.e. don't allow rep redistribution until the original period it was supposed to resolve in - todo clarify / fix this if statement
    elif(!penalizedOnEvent and reportValue and rejected and EVENTS.getRejectedPeriod(event) == lastPeriod):
        CONSENSUS.setPenalized(branch, lastPeriod, msg.sender, event)
        CONSENSUS.increasePenalizedNum(branch, lastPeriod, msg.sender, 1)
    # penalization on a regular event if not already penalized, it has outcome, and user reported on it
    elif(!penalizedOnEvent and reportValue and outcome != 0):
        calculateRepChange(reportValue, POINT_ONE)
        newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender) + repChange
        log(type = penalize, msg.sender, outcome, oldRep, repChange, newAfterRep, p, reportValue)
        EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
        CONSENSUS.setPenalized(branch, lastPeriod, msg.sender, event)
        CONSENSUS.increasePenalizedNum(branch, lastPeriod, msg.sender, 1)
    # once penalized for all events actually get rid of net rep lost and send it to the branch for redistribution
    if(numReportedOn == CONSENSUS.getPenalizedNum(branch, lastPeriod, msg.sender)):
        sendRedistributedRepToBranch()
    return(1)

# Increments the period after reporting
# ui has to call this to stay cheap / not check it elsewhere
def incrementPeriodAfterReporting(branch):
    refund()
    # do this after reporting is finished
    if(!periodOver(branch)):
        return(0)
    period = block.timestamp / BRANCHES.getPeriodLength($branch) - 1
    lastPeriod = period - 1
    amountAppealedThisPeriod = EXPEVENTS.getNumRoundTwo(branch, period) * ONE / EXPEVENTS.getNumberEvents(branch, period)
    amountAppealedLastPeriod = EXPEVENTS.getNumRoundTwo(branch, lastPeriod) * ONE / EXPEVENTS.getNumberEvents(branch, lastPeriod)
    percentAppealed = (amountAppealedThisPeriod + amountAppealedLastPeriod) / 2
    BRANCHES.incrementPeriod(branch)
    # mult. by 2 b/c reporters only have to report on half the things they're selected to report on
    baseReporterQuantity = 2 * (3 * ONE + ((333 * ONE * percentAppealed / ONE) ** 3 / 2 ** 128)) / ONE
    CONSENSUS.setBaseReportersLastPeriod(branch, BRANCHES.getBaseReporters(branch))
    BRANCHES.setBaseReporters(branch, baseReporterQuantity)
    return(1)

macro checkPenalizeWrongPreconditions():
    if(EVENTS.getEventBranch(event) != branch):
        return(-8)
    if(repBalance < ONE):
        return(0)
    if(scalar(event) or categorical(event)):
        outcome = uncaught
    p = proportionCorrect(event, 0)
    if(roundTwo and outcome != 0):
        return(-1)
    tooLateToPenalize = (residual > periodLength / 2 or (block.timestamp / periodLength - 2) != lastPeriod)
    if(tooLateToPenalize):
        return(-2)
    justForked = BRANCHES.getForkPeriod(branch) == lastPeriod
    if(justForked):
        return(-3)
    if(CONSENSUS.getPenalizedUpTo(branch, msg.sender) == lastPeriod):
        return(-4)
    if(EVENTS.getForked(event)):
        return(-5)
    # if no outcome / event not resolved yet, resolve it [as long as it wasn't an event that was pushed fwd and got rejected and thus hasn't actually resolved yet]
    # todo fix getoutcome
    eventNotResolvedAndNeedsToBe = !EVENTS.getOutcome(event) and !(rejected and EVENTS.getRejectedPeriod(event) == lastPeriod)
    if(eventNotResolvedAndNeedsToBe and CLOSEMARKET.closeMarket(EVENTS.getMarket(event, 0), msg.sender) != 1):
            return(-6)
    if(!CONSENSUS.getFeesCollected(branch, msg.sender, lastPeriod - 1)):
        return(-7)
