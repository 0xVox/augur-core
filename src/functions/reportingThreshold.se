import branches as BRANCHES
import events as EVENTS
import expiringEvents as EXPEVENTS
import fxpFunctions as FXP
import reporting as REPORTING
inset('refund.se')

macro ONEPOINTTWO: 1200000000000000000
macro POINTZEROONE: 10000000000000000
macro MAX_THRESHOLD: 10^54

# eventsExpected == (numberReportEstimate*((reporterList[n]/totalRep)**1.2))
    # exp(1.2*ln(repbal)) / exp(1.2*ln(totalrep)) is == (reporterList[n]/totalRep)**1.2
    # a^b=exp(b*ln(a))=e^(b*ln(a)).
def calculateReportingThreshold(branch, eventID, votePeriod, sender):
    repConstant = EXPEVENTS.getPeriodRepConstant(branch, votePeriod, sender)
    if(repConstant==0):
        repConstant = FXP.fx_exp(ONEPOINTTWO*FXP.fx_log(REPORTING.getRepBalance(branch, sender))/ONE)*ONE/FXP.fx_exp(ONEPOINTTWO*FXP.fx_log(REPORTING.getActiveRep(branch))/ONE)
        numEventsToReportOn = EXPEVENTS.getNumEventsToReportOn(branch, votePeriod)
        expectedEventsForReporter = repConstant * numEventsToReportOn
        total = expectedEventsForReporter
        eventsInPeriod = EXPEVENTS.getNumberEvents(branch, expDateIndex)-EXPEVENTS.getNumRemoved(branch, votePeriod)
        numRequiredEvents = EXPEVENTS.getNumRequired(branch, votePeriod)
        if(repFraction >= POINTZEROONE):
            minimum = min(30-numRequiredEvents, eventsInPeriod-numRequiredEvents)
            if(total/ONE < minimum):
                total = minimum*ONE
                repConstant = total / numEventsToReportOn
        EXPEVENTS.setPeriodRepConstant(branch, votePeriod, sender, repConstant)
    # 1 is 10**54 here, lesserreportnum, repconstant, and one are all base 10**18
    reportingThreshold = EXPEVENTS.getLesserReportNum(branch, votePeriod, eventID)*repConstant*ONE
    return(reportingThreshold)

# 0, event means calculateReportTargetForEvent(branch, eventID, votePeriod, sender) in make reports should be called for that event
def getEventsToReportOn(branch, expDateIndex, sender):
    refund()
    numEvents = EXPEVENTS.getNumberEvents(branch, expDateIndex)
    events = array(numEvents*2)
    i = 0
    while i < numEvents:
        # todo or just calculate report target for event here for purposes of computing this
        if(EXPEVENTS.getLesserReportNum(branch, votePeriod, event)==0):
            return([0, event]: arr)
        events[i] = EXPEVENTS.getEvent(branch, expDateIndex, i)
        reportingThreshold = self.calculateReportingThreshold(branch, events[i], expDateIndex, sender)
        # do abs then mult by 2 to ensure pos. and between 0 and 1
        shaHash = sha3(sender + events[i])
        shaHash = abs(shaHash) / 115792089237316195423571
        if((shaHash < reportingThreshold || shaHash<EVENTS.getReportingThreshold(events[i]) || EXPEVENTS.getRequired(events[i])) && !EVENTS.getOutcome(events[i])):
            events[i+1] = 1
        else:
            events[i+1] = 0
        i += 2
    return(events: arr)

def getEventCanReportOn(branch, expDateIndex, reporter, event):
    refund()
    reportingThreshold = self.calculateReportingThreshold(branch, event, expDateIndex, reporter)
    # do abs then mult by 2 to ensure pos. and between 0 and 1
    shaHash = sha3(reporter + event)
    shaHash = abs(shaHash) / 115792089237316195423571
    if(shaHash < reportingThreshold || shaHash<EVENTS.getReportingThreshold(event) || EXPEVENTS.getRequired(events)):
        return(1)
    else:
        return(0)

#In the rare possibility that no one gets randomly selected to report on a market in a given period, on the last day, we can change the sha3 threshold.
def setReportingThreshold(event):
    refund()
    # first check is if event expDate is in the current vote period and second is if blockNum is near expiration of commit period (within 24 hr.)
    # final check is if no reports on event
    # so if in 24 hr we'd be in the next half of the vote period, we're within 24 hr of the end of this one
    branch = EVENTS.getBranch(event)
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    votePeriod = BRANCHES.getVotePeriod(branch)
    if(votePeriod==EVENTS.getExpiration(event)/periodLength and (((block.timestamp + TWENTYFOURHR) % periodLength) > periodLength/2) and !EVENTS.getUncaughtOutcome(event)):
        EVENTS.setThreshold(event, MAX_THRESHOLD)
        return(1)
    else:
        return(0)

macro abs($a):
    if($a<0):
        $a = -$a
    $a
