### Deals with forking over events

import info as INFO
import branches as BRANCHES
import reporting as REPORTING
import events as EVENTS
import markets as MARKETS
import backstops as BACKSTOPS
import sendReputation as SENDREP
import roundTwo as ROUNDTWO
import expiringEvents as EXPEVENTS
import createBranch as CREATEBRANCH
import consensusData as CONSENSUSDATA
import mutex as MUTEX
extern subcurrency: [allowance:[int256,int256]:int256, approve:[int256,int256]:int256, balance:[]:int256, balanceOf:[int256]:int256, transfer:[int256,int256]:int256, transferFrom:[int256,int256,int256]:int256]
inset('../data_api/refund.se')
inset('eventHelpers.se')
inset('../data_api/float.se')

macro FORK_TEXT: text("fork")
macro POINT_ZERO_ONE: 10000000000000000

# UI has to handle function calls for these

# Notes:
    # Anyone can pay some amount significantly greater than the backstop 1 bond amount to force a branching event, splitting rep into two classes.
    # In one class the reported outcome for whatever event was the cause of dispute is said to be right, and rep is redistributed accordingly.
    # In the other class/branch, the event is readjudicated and remove the outcome on the pre fork branch and rep is redistributed as normal, except people who said the original outcome in the original fork lose rep.
    # Note: Whichever outcome was truly the correct one would determine which branch had rep that actually held value.  This would be akin to a Bitcoin hard fork scenario.  The winning fork, of course, would be the one with the most voluminous markets, which would be determined by the fork that represented reality, which would have a higher market cap.  Markets go to the most popular fork by default after 2 months.

# Period where we forked, at the end of it
    # don't penalize for this period / anything that happened here should be considered to not have happened - done
    # let period be incremented as normal - done
    # no rep redistribution on this period besides for event forked over on original. parent but don't actually resolve the event until later per below - done
    # fork users get a free pass for not reporting on this period - done
# Period after fork where we need to do nothing while waiting for fork to resolve
    # free pass for not reporting during this period in og branch - done, UI needs to call penalizeWrong with a 0 as event param or todo do this contract side after doing penalize wrong
    # no reporting or rep redistribution in this period except for on fork branch we re-report on the forked market and that's it, so no free pass on fork for that one event - done
# Period after fork is resolved
    # markets can't be moved until now - done
    # all markets have early exp disabled until this point - done
    # each event which should've resolved in the past 2 periods and this one is pushed up into this period and voted on in period after this - done
        # stays in parent if it wins, otherwise goes to new fork - done
    # each event resolving further in the future is pushed into the respective period on whichever fork wins - done
# todo if already moved once don't allow again after another fork
def moveEvent(event):
    refund()
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()

    forkPeriod = BRANCHES.getForkPeriod(EVENTS.getEventBranch(event))
    branch = EVENTS.getEventBranch(event)
    eventForkedOver = BRANCHES.getEventForkedOver(branch)
    expPeriod = EVENTS.getExpiration(event) / BRANCHES.getPeriodLength(branch)
    eventIndex = EXPEVENTS.getEventIndex(expPeriod, event)
    currentPeriod = block.timestamp / BRANCHES.getPeriodLength(branch)
    checkMoveEventPreconditions()
    if(event == eventForkedOver):
        MUTEX.unsetMutex()
        return(1)
    # leave event here in same branch
    elif(winner == EVENTS.getEventBranch(event)):
        keepEventInOriginalBranch()
    # event's branch is changed to winning branch
    else:
        moveEventToWinningBranch()
    BACKSTOPS.setMoved(event)
    MUTEX.unsetMutex()
    return(1)

# parent branch is branch here
# todo fork use address picked in market creation to resolve it and have a default fork resolve option
def resolveFork(branch):
    if(MUTEX.getMutex() && !mutexWhitelisted()):
        throw()
    if(!mutexWhitelisted()):
        MUTEX.setMutex()
    
    # do whitelist to only allow call w/ move event - but what if only 1 event and that's the one we fork over, in that case need the ability to call resolve fork manually if it hasn't been done yet within the time parameters which allows a fork to be resolved [2 periods after the start]
    forkPeriod = BRANCHES.getForkPeriod(EVENTS.getEventBranch(event))
    currentPeriod = block.timestamp / BRANCHES.getPeriodLength(branch)
    origCap = self.exchangeRate(branch)
    fork = REPORTING.getFork(branch)
    forkCap = self.exchangeRate(fork)
    if(origCap >= forkCap):
        winner = branch
        BACKSTOPS.setResolved(branch, forkPeriod, winner)
        return(winner)
    else:
        winner = fork
    BACKSTOPS.setResolved(branch, forkPeriod, winner)
    if(!mutexWhitelisted()):
        MUTEX.unsetMutex()
    return(winner)

# Resolve fork method that gets exchange rate
# add contract for choosing this to create market
def exchangeRate(branch):
    # get rep exchange rate from etherex for (branch)
    # return(exchangeRate)
    # for testing we'll just rng the exchange rate :)
    return(sha3(branch))

# Forks a contested event
# In the last 48 hours during period where a round 2 was pushed back to, can be made to fork instead of just round 2, so round 2 bond poster gets bond back and a fork commences
# bond for a fork is 1% of rep
# Errors:
    #  0: not in last 48 hr of period
    # -1: ineligible for forking over, already resolved, forked, or hasn't seen 1st backstop yet
    # -3: no fork allowed for 1 period after a forking event
    # -4: event was pushed forward, not allowed yet
    # -5: invalid branch
def fork(event, branch, forkedOverEthicality):
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()

    forkPeriod = BRANCHES.getForkPeriod(branch)
    currentPeriod = block.timestamp / BRANCHES.getPeriodLength(branch)
    checkForkPreconditions()

    if(!send(CONSENSUSDATA, msg.value)):
        throw()
    bond = safeFxpDiv(POINT_ZERO_ONE, REPORTING.getTotalRep(branch))
    BACKSTOPS.setBondAmount(event, bond)
    # lose fork bond in branch 1
    # results same as roundtwobond, let it resolve as that on original network
    if(!SENDREP.sendRepFrom(branch, msg.sender, event, bond)):
        throw()
    # on branch 2 fork bond isn't lost
    # on fork bond isn't lost, gets paid up to 2x from "liars"
    # make the fork
    makeFork()
    # return round 2 bond on orig. branch
    returnRoundTwoBond()
    MUTEX.unsetMutex()
    return(1)

# once winning fork decided this sets fork done and sets the event outcome to the forkoutcome + ethicality if the fork won, or to the resolved round 2 outcome + ethicality if the original parent won
# branch is orig. branch
# Returns 1
# Errors:
    # 0 fork not done yet
    # -1 event not fork event
    # -2 wrong branch
def resolveForkedEvent(branch, event):
    refund()
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()
    # checks for orig. branch
    if(EVENTS.getEventBranch(event) != branch or BRANCHES.getEventForkedOver(branch) != event or !branch or !event):
        MUTEX.unsetMutex()
        return(0)
    if(!EVENTS.getForked(event)):
        MUTEX.unsetMutex()
        return(-1)
    if(self.resolveForkEvent(branch, event)):
        EVENTS.setForkDone(event)
        CONSENSUSDATA.doRefund(msg.sender, event)
        MUTEX.unsetMutex()
        return(1)
    # fork not done yet
    else:
        MUTEX.unsetMutex()
        return(0)

# once winning fork decided this sets fork done and sets the event outcome to the forkoutcome + ethicality if the fork won, or to the resolved round 2 outcome + ethicality if the original parent won
    # helper function for resolveForkedEvent
# needs whitelist
def resolveForkEvent(branch, event):
    refund()
    # whitelist
    bond = EVENTS.getBond(event)
    winner = BACKSTOPS.getResolved(branch, BRANCHES.getForkPeriod(branch))
    if(!winner):
        return(-5)
    # binary
    if(binary(event)):
        binaryForkResolve()
    # scalar or categorical
    elif(scalar(event) or categorical(event)):
        scalarOrCategoricalForkResolve()
    # (should never be reached)
    else:
        return(0)

macro checkForkPreconditions():
    if(!EVENTS.getRoundTwo(event) or BACKSTOPS.getFinal(event) or EVENTS.getForked(event)):
        MUTEX.unsetMutex()
        return(-1)
    # todo should we really block next two periods here too
    if(forkPeriod == currentPeriod or currentPeriod == (forkPeriod + 1) or currentPeriod == (forkPeriod + 2)):
        MUTEX.unsetMutex()
        return(-3)
    if(EVENTS.getOriginalExpiration(event) != EVENTS.getExpiration(event)):
        MUTEX.unsetMutex()
        return(-4)
    if(EVENTS.getEventBranch(event) != branch or !branch or !event):
        MUTEX.unsetMutex()
        return(-5)
    # todo find actual gas cost for resolution here and charge that
    if(msg.value < 200000 * tx.gasprice):
        MUTEX.unsetMutex()
        return(0)
    CONSENSUSDATA.setRefund(event, msg.value)
    last48HoursOfPeriod = (block.timestamp / BRANCHES.getPeriodLength(branch) != ((block.timestamp + 2 * TWENTY_FOUR_HR) / BRANCHES.getPeriodLength(branch)))
    reportedOnInRoundTwo = EVENTS.getUncaughtOutcome(event)
    if(!last48HoursOfPeriod or !reportedOnInRoundTwo):
        MUTEX.unsetMutex()
        return(0)

macro makeFork():
    newBranch = CREATEBRANCH.createSubbranch(FORK_TEXT, BRANCHES.getPeriodLength(branch), branch, BRANCHES.getMinTradingFee(branch), BRANCHES.getOracleOnly(branch))
    REPORTING.setFork(newBranch)
    period = BRANCHES.getVotePeriod(newBranch)
    EXPEVENTS.setEventRequired(newBranch, period + 1, event)
    EXPEVENTS.addEvent(newBranch, period + 1, event)
    EVENTS.setExpiration(event, block.timestamp)
    BACKSTOPS.setOriginalBranch(event, branch)
    BACKSTOPS.setForkBondPoster(event, msg.sender)
    EVENTS.setForked(event)
    BACKSTOPS.setFinal(event)
    BRANCHES.setForkPeriod(branch)
    BRANCHES.setForkPeriod(newBranch)
    BRANCHES.setEventForkedOver(branch, event)
    if(forkedOverEthicality):
        BACKSTOPS.setForkedOverEthicality(event)

macro returnRoundTwoBond():
    market = EVENTS.getMarket(event, 0)
    averageAdjudicationCost = BRANCHES.getInitialBalance(branch, period - 1) / EXPEVENTS.getNumberEvents(branch, period - 1)
    bond = safeAdd(averageAdjudicationCost, safeFxpMul(MARKETS.getSharesValue(market), (POINT_ZERO_ONE + MARKETS.getTradingFee(market) / 2)))
    minBond = 200 * ONE
    bond = min(bond, minBond)
    REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, event), bond)
    REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getBondPoster(event)), bond)
    BACKSTOPS.setBondReturned(event)

macro checkMoveEventPreconditions():
    # todo getoutcome may not work
    if(!branch or !event or currentPeriod != (forkPeriod + 2) or EVENTS.getOutcome(event) or BACKSTOPS.getMoved(event)):
        MUTEX.unsetMutex()
        return(0)
    winner = BACKSTOPS.getResolved(branch, forkPeriod)
    if(!winner):
        winner = self.resolveFork(branch)

macro keepEventInOriginalBranch():
    # set outcomes to 0
    EVENTS.setOutcome(event, 0)
    EVENTS.setMode(event, 0)
    EVENTS.setEthics(event, 0)
    EVENTS.setUncaughtOutcome(event, 0)
    # return bond if it's a round 2 event and make it not one anymore
    if(!ROUNDTWO.roundTwoResolve(branch, event, eventIndex, msg.sender)):
        throw()
    # if should've resolved in past periods
    if(expPeriod == forkPeriod or expPeriod == (forkPeriod + 1)):
        # push it into next [this] period
        EXPEVENTS.addEvent(branch, currentPeriod, event)
        EVENTS.setExpiration(event, block.timestamp)
    # otherwise it's set to expire in the period it would've expired in as normal, no changes needed

macro moveEventToWinningBranch():
    EVENTS.setBranch(event, winner)
    # set outcomes to 0
    EVENTS.setOutcome(event, 0)
    EVENTS.setMode(event, 0)
    EVENTS.setEthics(event, 0)
    EVENTS.setUncaughtOutcome(event, 0)
    # return bond if it's a round 2 event and make it not one anymore
    if(!ROUNDTWO.roundTwoResolve(branch, event, eventIndex, msg.sender)):
        throw()
    # move event to fork
    # and place it into the next reporting period w/ outcomes to 0
    if(expPeriod == forkPeriod or expPeriod == (forkPeriod + 1)):
        # push it into next [this] period
        EXPEVENTS.addEvent(winner, currentPeriod, event)
        EVENTS.setExpiration(event, block.timestamp)
    else:
        # push into period it wouldve expired in
        EXPEVENTS.addEvent(winner, expPeriod, event)
        # expiration time doesnt need to change

macro binaryForkResolve():
    fxpOutcome = 0
    ethical = 0
    # original parent won
    if(winner == branch):
        fxpOutcome = catch(EVENTS.getUncaughtOutcome(event))
        ethical = ethicCatch(EVENTS.getEthics(event))
    # fork won
    else:
        fxpOutcome = catch(EVENTS.getForkOutcome(event))
        ethical = ethicCatch(EVENTS.getForkEthicality(event))
    EVENTS.setOutcome(event, fxpOutcome)
    EVENTS.setEthics(event, ethical)
    if(fxpOutcome == 3 * ONE_HALF or !ethical):
        # give event bond money to reporters
        branchWallet = BRANCHES.getWallet(branch, INFO.getCurrency(event))
        if(!INFO.getWallet(event).transfer(branchWallet, bond)):
            throw()

        # not ethical is same as .5 outcome
        fxpOutcome = 3 * ONE_HALF
        EVENTS.setOutcome(event, fxpOutcome)
    else:
        # return 
        if(!INFO.getWallet(event).transfer(INFO.getCreator(event), bond)):
            throw()
    EVENTS.setBranch(event, winner)
    BACKSTOPS.setMoved(event)
    return(1)

macro scalarOrCategoricalForkResolve():
    mode = 0
    ethical = 0
    # original parent won
    if(winner == branch):
        mode = EVENTS.getUncaughtOutcome(event)
        ethical = ethicCatch(EVENTS.getEthics(event))
    # fork won
    else:
        mode = EVENTS.getForkOutcome(event)
        ethical = ethicCatch(EVENTS.getForkEthicality(event))
    EVENTS.setMode(event, mode)
    EVENTS.setEthics(event, ethical)
    scaledMax = EVENTS.getMaxValue(event)
    scaledMin = EVENTS.getMinValue(event)
    if(categorical(event)):
        scaledMin = ONE
        scaledMax = ONE * EVENTS.getNumOutcomes(event)
    fxpOutcome = safeFxpMul(mode, (scaledMax - scaledMin)) + scaledMin
    if(categorical(event)):
        fxpOutcome = round(fxpOutcome)
    ethicOutcome = safeFxpMul(ONE_HALF, (scaledMax - scaledMin)) + scaledMin
    EVENTS.setOutcome(event, fxpOutcome)
    if(mode == ONE_HALF or !ethical):
        # give event bond money to reporters
        branchWallet = BRANCHES.getWallet(branch, INFO.getCurrency(event))
        if(!INFO.getWallet(event).transfer(branchWallet, bond)):
            throw()
        # not ethical is same as .5 outcome
        EVENTS.setOutcome(event, ethicOutcome)
    else:
        # return bond
        if(!INFO.getWallet(event).transfer(INFO.getCreator(event), bond)):
            throw()
    EVENTS.setBranch(event, winner)
    BACKSTOPS.setMoved(event)
    return(1)
