#Notes:
    #Anyone can pay some amount significantly greater than the bond amount to force a branching event, splitting rep into two classes.  
    #In one class the reported outcome for whatever event was the cause of dispute is said to be right, and rep is redistributed accordingly.  
    #In the other class/branch, the event is readjudicated and remove the outcome on the pre fork branch and rep is redistributed as normal, except people who said the original outcome in the original fork lose rep.  
    # Note: Whichever outcome was truly the correct one would determine which branch had rep that actually held value.  This would be akin to a Bitcoin hard fork scenario.  The winning fork, of course, would be the one with the most voluminous markets, which would be determined by the fork that represented reality, which would have a higher market cap.  Markets go to the most popular fork by default after 2 months.

import info as INFO
import cash as CASH
import branches as BRANCHES
import reporting as REPORTING
import events as EVENTS
import markets as MARKETS
import backstops as BACKSTOPS
import sendReputation as SENDREP
import roundTwo as ROUNDTWO
import expiringEvents as EXPEVENTS
import createBranch as CREATEBRANCH
inset('refund.se')

# todo move to backstops data_api
# branch and forkperiod and who won
data forkResolved[][]
data eventMoved[]
data forkData[](originalBranch)
data forking[](bondPoster)
data bondPaid[]
data forkedOverEthicality[]
data bondAmount[]


def getForkedOverEthicality(event):
    return(self.forkedOverEthicality[event])
    



# Period where we forked, at the end of it
    # don't penalize for this period / anything that happened here should be considered to not have happened - done
    # let period be incremented as normal - done
    # no rbcr on this period besides for event forked over on original. parent but don't actually resolve the event until later per below - done
    # fork users get a free pass for not reporting on this period - done
# Period after fork where we need to do nothing while waiting for fork to resolve
    # free pass for not reporting during this period in og branch - done
    # no reporting or rbcr in this period except for on fork branch we re-report on the forked market and that's it, so no free pass on fork for that one event - done
# Period after fork is resolved
    # markets can't be moved until now - done
    # all markets have early exp disabled until this point - done
    # each event which should've resolved in the past 2 periods is pushed up into period after this - done
        # stays in parent if it wins, otherwise goes to new fork - done
    # each event resolving further in the future is pushed into the respective period on whichever fork wins - done
def move_event(event):
    forkPeriod = BRANCHES.getForkPeriod(EVENTS.getEventBranch(event))
    branch = EVENTS.getEventBranch(event)
    eventForkedOver = BRANCHES.getEventForkedOver(branch)
    currentPeriod = block.timestamp / BRANCHES.getPeriodLength(branch)
    if(forkPeriod && currentPeriod == (forkPeriod+2) && !EVENTS.getOutcome(event) && !self.eventMoved[event]):
        winner = self.forkResolved[branch][forkPeriod]
        if(winner==0):
            winner = self.resolve_fork(branch)
        EVENTS.setBranch(event, winner)
        self.eventMoved[event] = 1
        if(event == eventForkedOver):
            return(1)
        elif(winner == EVENTS.getEventBranch(event)):
            # set outcomes to 0
            EVENTS.setOutcome(event, 0)
            EVENTS.setmode(event, 0)
            EVENTS.setEthics(event, 0)
            EVENTS.setUncaughtOutcome(event, 0)
            # return bond if it's a round 2 event and make it not one anymore
            ROUNDTWO.roundTwoResolve(branch, event, eventIndex, votePeriod)
            
            # leave event here
            expPeriod = EVENTS.getExpiration(event)/BRANCHES.getPeriodLength(branch)
            # if should've resolved in past periods
            if(expPeriod == forkPeriod or expPeriod == (forkPeriod+1) or expPeriod == (forkPeriod+2)):
                # push it into next [this] period
                EXPEVENTS.addEvent(branch, currentPeriod+1, eventID)
                EVENTS.setExpiration(event, block.timestamp)
            # otherwise it's set to expire in the period it would've expired in as normal, no changes needed
        else:
            # set outcomes to 0
            EVENTS.setOutcome(event, 0)
            EVENTS.setmode(event, 0)
            EVENTS.setEthics(event, 0)
            EVENTS.setUncaughtOutcome(event, 0)
            # return bond if it's a round 2 event and make it not one anymore
            ROUNDTWO.roundTwoResolve(branch, event, eventIndex, votePeriod)

            # move event to fork
            expPeriod = EVENTS.getExpiration(event)/BRANCHES.getPeriodLength(branch)
            # and place it into the next reporting period w/ outcomes to 0
            if(expPeriod == forkPeriod or expPeriod == (forkPeriod+1) or expPeriod == (forkPeriod+2)):
                # push it into next [this] period
                EXPEVENTS.addEvent(branch, currentPeriod+1, eventID)
                EVENTS.setExpiration(event, block.timestamp)
            else:
                # push into period it wouldve expired in
                EXPEVENTS.addEvent(branch, expPeriod, eventID)
                # expiration time doesnt need to change
    else:
        return(0)

# parent branch is branch here
def resolve_fork(branch):
    forkPeriod = BRANCHES.getForkPeriod(EVENTS.getEventBranch(event))
    currentPeriod = block.timestamp / BRANCHES.getPeriodLength(branch)
    # make sure branch forked
    if(currentPeriod != (forkPeriod+2)):
        return(0)
    origCap = self.exchangeRate(branch)
    fork = REPORTING.getFork(branch)
    forkCap = self.exchangeRate(fork)
    if(origcap >= forkCap):
        winner = branch
        self.setWinner(branch, winner)
        return(winner)
    else:
        winner = fork
        self.setWinner(branch, winner)
        return(winner)
    
def setWinner(branch, winner):
    self.forkResolved[branch][winner] = winner
    return(1)

#Resolve fork method that gets exchange rate
def exchangeRate(branch):
    # get rep exchange rate from etherex for (branch)
    #return(exchangeRate)
    # for testing we'll just rng the exchange rate :)
    return(sha256(branch))

# In the last 48 hours during period where a round 2 was pushed back to, can be made to fork instead of just round 2, so round 2 bond poster gets bond back
# bond is 1% of rep
# todo make it so can only push back in last 48 hr of _second_ period
# todo pay back bond poster
# todo fork over ethicality or outcome
# round 2 penalize consensus don't pay back reporter b/c bond already returned.. on orig. branch
# todo make sure branch isn't forking when we make a fork...
def fork(event, branch, forkedOverEthicality):
    if(!EVENTS.getRoundTwo(event) || EVENTS.getFinal(event) || EVENTS.getForked(event)):
        return(-1)
    if(EVENTS.getBranch(event)!=branch):
        return(0)
    # if in last 48 hr of period
    if(block.timestamp/BRANCHES.getPeriodLength(branch)!=((block.timestamp + 2*TWENTYFOURHR)/BRANCHES.getPeriodLength(branch)) && EVENTS.getUncaughtOutcome(event)!=0 && !EVENTS.getForked(event)):
        bond = 184467440737095520*REPORTING.getTotalRep(branch)/ONE
        self.bondAmount[branch] = bond
        # lose fork bond in branch 1
        # results same as roundtwobond, let it resolve as that on original network
        if(SENDREP.sendReputation(branch, event, bond)==0):
            return(-2)

        # on branch 2 fork bond isn't lost
        # on fork bond isn't lost, gets paid up to 2x from "liars"
        # make the fork
        newBranch = CREATEBRANCH.createSubbranch(text("fork"), BRANCHES.getPeriodLength(branch), branch, BRANCHES.getMinTradingFee(branch), 0)
        REPORTING.setFork(newBranch)
        period = BRANCHES.getVotePeriod(newBranch)
        EXPEVENTS.setEventRequired(newBranch, period+1, event)
        EXPEVENTS.addEvent(newBranch, period+1, event)
        EVENTS.setExpiration(event, block.timestamp)
        self.forkData[event].originalBranch = branch
        self.forking[event].bondPoster = msg.sender
        EVENTS.setForked(event)
        BACKSTOPS.setFinal(event)
        self.roundTwo[event].final
        BRANCHES.setForkPeriod(branch)
        BRANCHES.setForkPeriod(newBranch)
        BRANCHES.setEventForkedOver(newBranch, event)
        BRANCHES.setEventForkedOver(branch, event)
        self.forkedOverEthicality[event] = forkedOverEthicality
        # return round 2 bond
        REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, event), 100*ONE)
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, self.roundTwo[event].bondPoster), 100*ONE)
    else:
        return(0)


# once winning fork decided this sets fork done and sets the event outcome to the forkoutcome + ethicality if the fork won, or to the resolved round 2 outcome + ethicality if the original parent won
# branch is orig. branch
# market creator pay for or bond person pay for?
def resolveForkedEvent(branch, event, votePeriod):
    refund()
    bond = 100*ONE
    votedOnAgain = 0
    if(EVENTS.getBranch(event)!=branch):
        return(0)
    if(BRANCHES.getVotePeriod(branch) > (EVENTS.getExpiration(event) / BRANCHES.getPeriodLength(branch))):
        votedOnAgain = 1
    if(!EVENTS.getForked(event)):
        return(-1)
    if(self.resolveForkEvent(branch, event)):
        EVENTS.setForkDone(event)
    # fork not done yet
    else:
        return(0)

# once winning fork decided this sets fork done and sets the event outcome to the forkoutcome + ethicality if the fork won, or to the resolved round 2 outcome + ethicality if the original parent won
def resolveForkEvent(branch, event):
    refund()
    winner = self.forkResolved[branch][forkPeriod]
    if(!winner):
        return(-5)
    
    # binary
    if(binary(event)):
        fxpOutcome = 0
        ethical = 0
        # original parent won
        if(winner==branch):
            fxpOutcome = catch(EVENTS.getUncaughtOutcome(event))
            ethical = ethic_catch(EVENTS.getEthical(event))
        # fork won
        else:
            fxpOutcome = catch(EVENTS.getForkOutcome(event))
            ethical = ethic_catch(EVENTS.getForkEthicality(event))
        
        EVENTS.setOutcome(event, fxpOutcome)
        if(fxpOutcome==3*ONEHALF || !ethical):
            # give event bond money to reporters
            CASH.subtractCash(event, EVENTS.getBond(event))
            CASH.addCash(branch, EVENTS.getBond(event))
            # not ethical is same as .5 outcome
            fxpOutcome = 3*ONEHALF
            EVENTS.setOutcome(event, fxpOutcome)
        else:
            # return bond
            CASH.subtractCash(event, EVENTS.getBond(event))
            CASH.addCash(INFO.getCreator(event), EVENTS.getBond(event))
        return(1)
    # scalar
    elif(scalar(event) or categorical(event)):
        mode = 0
        ethical = 0
        # original parent won
        if(winner==branch):
            mode = EVENTS.getUncaughtOutcome(event)
            ethical = ethic_catch(EVENTS.getEthical(event))
        # fork won
        else:
            mode = EVENTS.getForkOutcome(event)
            ethical = ethic_catch(EVENTS.getForkEthicality(event))

        EVENTS.setmode(event, mode)
        scaled_max = EVENTS.getMaxValue(event)
        scaled_min = EVENTS.getMinValue(event)
        fxpOutcome = mode * (scaled_max - scaled_min)/ONE + scaled_min
        EVENTS.setOutcome(event, fxpOutcome)

        if(fxpOutcome==ONEHALF || !ethical):
            # give event bond money to reporters
            CASH.subtractCash(event, EVENTS.getBond(event))
            CASH.addCash(branch, EVENTS.getBond(event))
            # not ethical is same as .5 outcome
            fxpOutcome = ONEHALF
            EVENTS.setOutcome(event, fxpOutcome)
            EVENTS.setmode(event, fxpOutcome)
        else:
            # return bond
            CASH.subtractCash(event, EVENTS.getBond(event))
            CASH.addCash(INFO.getCreator(event), EVENTS.getBond(event))
        return(1)
    # (should never be reached)
    else:
        return(0)


# rbcr is done as a normal event where everyone reports on it
# only called on the fork not the parent, normal penalization except the values are forkOutcome and forkEthicality as opposed to anything else
# some rep from this goes to bond poster, original / last period report is actually what a user reported on the parent for the round 2 bond vote, they lose rep as well as people this time who report wrong
# branch is fork
def penalizeOnForkedEvent(branch, event):
    if(EVENTS.getForked(event)==0):
        return(-1)
    # means event / fork isn't resolved
    if(EVENTS.getForkedDone(event)==0):
        return(-2)
    repBalance = REPORTING.getRepBalance(branch, msg.sender)
    lastPeriod = BRANCHES.getVotePeriod(branch)-1
    if(!self.branch[branch].penalized[lastPeriod][msg.sender].notEnoughReportsPenalized):
        return(-3)
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    if(residual > periodLength/2):
        return(-2)
    if(EVENTS.getOriginalExpiration(event)!=EVENTS.getExpiration(event) && MARKETS.getPushedForward(market)):
        if(lastPeriod==EVENTS.getOriginalExpiration(event)/BRANCHES.getPeriodLength(branch)):
            return(-1)

    newRep = 0
    newAfterRep = 0
    smoothedRep = 0
    totalRepDifference = 0
    outcome = catch(EVENTS.getForkOutcome(event))
    reportValue = EXPEVENTS.getReport(branch, lastPeriod, event, msg.sender)
    lastPenalizationPeriod = lastPeriod - 1
    oldReport = EXPEVENTS.getReport(BRANCHES.getParent(branch), lastPenalizationPeriod, msg.sender)
    p = self.proportionCorrectForkEvent(event)
    if(scalar(event) or categorical(event)):
        outcome = EVENTS.getForkOutcome(event)
    oldRep = EXPEVENTS.getBeforeRep(branch, lastPeriod, msg.sender)

    # Do the first rbcr based on first report and final outcome if reported first time
    if(oldReport && !self.branch[branch].penalized[lastPeriod][msg.sender].event[event] && outcome!=0):
        oldEthics = EXPEVENTS.getEthicReport(BRANCHES.getParent(branch), lastPenalizationPeriod, event, msg.sender)
        # wrong
        #184467440737095520 == 0.01 in fxp
        if(oldReport > outcome+184467440737095520 or oldReport < outcome-184467440737095520):
            if(scalar(event) or categorical(event) or outcome==3*ONE):
                # makes it so 1.5 penalty isn't super harsh for a scalar / categorical
                if(outcome == 3*ONEHALF && (scalar(event) or categorical(event))):
                    oldReport += ONE
                diff = oldReport - outcome
                p = -(abs(diff)/2) + ONE
            newRep = oldRep*(2*p - ONE)/ONE
        # right
        else:
            if(scalar(event) or categorical(event) or outcome==3*ONE):
                # makes it so 1.5 penalty isn't super harsh for a scalar / categorical
                if(outcome == 3*ONEHALF && (scalar(event) or categorical(event))):
                    oldReport += ONE
                diff = oldReport - outcome
                p = -(abs(diff)/2) + ONE
            newRep = oldRep*(2*(ONE-p)**2 / p + ONE)/ONE
        #smoothedRep = oldRep*.8 + newRep*.2
        smoothedRep = oldRep * 14757395258967642112/ONE + newRep * 3689348814741910528/ONE
        repChange = smoothedRep - oldRep
        newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender) + repChange
        EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
        totalRepDifference = repChange
        # for ethicality if diff. appeal then pay back the fork bond from people who reported the wrong ethicality, but don't take rep beyond that and max at 20% of their rep respectively
        if(oldEthics != ethic_catch(EVENTS.getEthical(event)) && totalRepDifference >=0):
            totalRepDifference = -184467440737095520*repBalance / ONE
        if(repBalance + totalRepDifference <= 0):
            totalRepDifference = -1*repBalance
        # reward the bonded challenger with whatever rep would normally be taken from the liars up to 2x the bond, rest goes to branch as usual later in the process
        if(self.bondPaid[event] < self.bondAmount[branch]*2 && totalRepDifference < 0):
            # done instead of sending to redistrib. pool
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), totalRepDifference)
            # sends that rep to the bonded challenger
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, self.forking[event].bondPoster), -totalRepDifference)
            self.bondPaid[event] += -1*totalRepDifference
    
    # Do the second (for each user) based on second report and final outcome
    if(reportValue && !self.branch[branch].penalized[lastPeriod][msg.sender].event[event] && outcome!=0):
        ethics = EXPEVENTS.getEthicReport(branch, lastPeriod, event, msg.sender)
        # wrong
        #184467440737095520 == 0.01 in fxp
        if(reportValue > outcome+184467440737095520 or reportValue < outcome-184467440737095520):
            if(scalar(event) or categorical(event) or outcome==3*ONE):
                # makes it so 1.5 penalty isn't super harsh for a scalar / categorical
                if(outcome == 3*ONEHALF && (scalar(event) or categorical(event))):
                    reportValue += ONE
                diff = reportValue - outcome
                p = -(abs(diff)/2) + ONE
            newRep = oldRep*(2*p - ONE)/ONE
        # right
        else:
            if(scalar(event) or categorical(event) or outcome==3*ONE):
                # makes it so 1.5 penalty isn't super harsh for a scalar / categorical
                if(outcome == 3*ONEHALF && (scalar(event) or categorical(event))):
                    reportValue += ONE
                diff = reportValue - outcome    
                p = -(abs(diff)/2) + ONE
            newRep = oldRep*(2*(ONE-p)**2 / p + ONE)/ONE
        #smoothedRep = oldRep*.8 + newRep*.2
        smoothedRep = oldRep * 14757395258967642112/ONE + newRep * 3689348814741910528/ONE
        repChange = smoothedRep - oldRep
        newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender) + repChange
        EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
        totalRepDifference = repChange
        # for ethicality if diff. appeal then pay back the fork bond from people who reported the wrong ethicality, but don't take rep beyond that and max at 20% of their rep respectively
        if(ethics != ethic_catch(EVENTS.getEthical(event)) && totalRepDifference >=0):
            totalRepDifference = -184467440737095520*repBalance / ONE
        if(repBalance + repChange <= 0):
            totalRepDifference = -1*repBalance
        if(self.bondPaid[event] < self.bondAmount[branch]*2 && totalRepDifference < 0):
            # done instead of sending to redistrib. pool
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), totalRepDifference)
            # sends that rep to the bonded challenger
            REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, self.forking[event].bondPoster), -totalRepDifference)
            self.bondPaid[event] += -1*totalRepDifference
        
        self.branch[branch].penalized[lastPeriod][msg.sender].event[event] = 1
        self.branch[branch].penalized[lastPeriod][msg.sender].num += 1
        if(EXPEVENTS.getNumReportsActual(branch, lastPeriod, msg.sender)==self.branch[branch].penalized[lastPeriod][msg.sender].num):
            if(newAfterRep <= 0):
                newAfterRep = 0
                EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
            self.branch[branch].penalizedUpTo[msg.sender] = lastPeriod
            self.branch[branch].denominator[lastPeriod] += newAfterRep
            totalRepDifference = newAfterRep - oldRep
            if(repBalance + totalRepDifference <= 0):
                totalRepDifference = -1*repBalance
            if(totalRepDifference<0):
                # removes rep from reporter who lost it [those who gained rep will get it in the claim rep phase]
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), totalRepDifference)
                # sends that rep to the branch
                REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), -totalRepDifference)
    return(1)

def proportionCorrectForkEvent(event):
    refund()
    p = 0
    outcome = catch(EVENTS.getForkOutcome(event))
    if(outcome!=0):
        # binary
        if(EVENTS.getNumOutcomes(event)==2 and EVENTS.getMaxValue(event)==TWO and EVENTS.getMinValue(event)==ONE):
            # subtract 1 to get it from 0 to 1
            avgOutcome = EVENTS.getForkOutcome(event) - ONE
            # say we have outcome of 0, avg is .4, what is p?
            # p is .6 or 60%
            if(outcome == ONE):
                p = ONE - avgOutcome
            # say we have outcome of 1, avg is .8, what is p (proportion correct)?
            # p is .8 or 80%
            if(outcome == 2 * ONE):
                p = avgOutcome
            if(outcome == 3 * ONEHALF):
                return(0)
        return(p)
    else:
        return(0)


macro scalar($event):
    ((EVENTS.getMaxValue($event)!=TWO || EVENTS.getMinValue($event)!=ONE) && EVENTS.getNumOutcomes($event)==2)
        
macro binary($event):
    (EVENTS.getNumOutcomes($event)==2 and EVENTS.getMaxValue($event)==TWO and EVENTS.getMinValue($event)==ONE)
        
macro categorical($event):
    (EVENTS.getNumOutcomes($event)>2)
    
macro ethic_catch($x):
    if($x < ONEHALF):
        0
    else:
        ONE

macro abs($a):
    if($a<0):
        $a = -$a
    $a
    
# Bins values to 1, 1.5, 2
macro catch($x):
    if($x < (BAD - CATCH_TOLERANCE)):
        NO
    elif($x > (BAD + CATCH_TOLERANCE)):
        YES
    else:
        BAD
