 import orders as ORDERS
import trade as TRADE

event tradeAvailableOrdersLogArrayReturn(returnArray: arr)

macro logArrayReturn($a):
    log(type = tradeAvailableOrdersLogArrayReturn, $a)
    return($a: arr)

# Minimum gas needed to execute the trade function.
# TODO update with profiled value from the new trade function
macro MINIMUM_GAS_NEEDED_TO_TRADE: 787421

# tradeAvailableOrders [fills the orderIDs in the orderIDs array with a balance at or above fxpMinimumOrderBalance]
# Errors:
#   -6: no available orders found
# @param amountTakerWants Number of shares to take (buy or sell).
# @param orderIDs Array of order IDs from which to pick one to fill.
# @param fxpMinimumOrderBalance Fill the first order that has a balance at or above this value.
# @return array [error code] or [response code, unfilled value, unfilled amount]
def tradeAvailableOrders(orderIDs: arr, amountTakerWants, fxpMinimumOrderBalance):
    numOrders = len(orderIDs)
    originalBalance = fxpMinimumOrderBalance
    i = 0
    while (i < numOrders and tx.gas > MINIMUM_GAS_NEEDED_TO_TRADE and fxpMinimumOrderBalance):
        if(ORDERS.getAmount(orderIDs[i]) > fxpMinimumOrderBalance):
            tradeReturn = array(2)
            tradeReturn = TRADE.trade(orderIDs[i], amountTakerWants, call = delegate, outitems = 2)
            fxpMinimumOrderBalance = tradeReturn[1]
        i += 1
    if(originalBalance == fxpMinimumOrderBalance):
        logArrayReturn([-6])
    else:
        logArrayReturn([1, fxpMinimumOrderBalance])
