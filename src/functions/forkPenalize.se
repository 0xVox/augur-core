### Handles reporter penalization on forked events

import branches as BRANCHES
import reporting as REPORTING
import events as EVENTS
import backstops as BACKSTOPS
import expiringEvents as EXPEVENTS
import consensusData as CONSENSUS
import mutex as MUTEX

inset('../data_api/refund.se')
inset('eventHelpers.se')
inset('redistributeRep.se')
inset('proportionCorrect.se')
inset('repChange.se')
inset('../data_api/periodStage.se')

macro POINT_ZERO_ONE: 184467440737095520
macro MIN_BOND: 200 * ONE

# Penalizes a reporter for reporting wrongly on a forked event / backstop 2
# Notes:
    # essentially penalizeWrong for backstop 2 [where everyone reports on a forked event on the new branch]
    # only called on the fork not the parent, normal penalization except the outcome values are forkOutcome and forkEthicality as opposed to anything else
    # some rep from this goes to bond poster
    # branch is the fork, not the parent
    # fork event needs to be resolved first before this can be called
# perhaps prevent people from calling this on parent [to prevent user error]
# todo should check for no report here or not
# Errors:
    #  0: not enough rep to report/penalize
    # -1: period shouldve been incremented
    # -2: already past 1st half of period
    # -3: fork event isn't resolved yet
    # -4: already done for all events in this period
    # -5: needed to collect fees last period which sets the before/after rep
    # -6: event branch is invalid/doesn't match
def penalizeOnForkedEvent(branch, event):
    refund()
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()

    # todo perhaps increment period by default if not done
    repBalance = REPORTING.getRepBalance(branch, msg.sender)
    lastPeriodVotedOn = BRANCHES.getVotePeriod(branch) - 1
    periodLength = BRANCHES.getPeriodLength(branch)
    newRep = 0
    newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriodVotedOn, msg.sender)
    oldRep = EXPEVENTS.getBeforeRep(branch, lastPeriodVotedOn, msg.sender)
    forkOutcome = EVENTS.getForkOutcome(event)
    outcome = catch(forkOutcome)
    if(scalar(event) or categorical(event)):
        outcome = forkOutcome
    p = proportionCorrect(event, 1)
    reportValue = EXPEVENTS.getReport(branch, lastPeriodVotedOn, event, msg.sender)
    ethics = EXPEVENTS.getEthicReport(branch, lastPeriodVotedOn, event, msg.sender)
    bond = BACKSTOPS.getBondAmount(event)
    numReportedOn = EXPEVENTS.getNumReportsSubmitted(branch, lastPeriodVotedOn, msg.sender)
    checkForkPenalizationPreconditions()

    penalizeOrRewardReporter()
    # once penalized for all events actually get rid of net rep lost
    if(numReportedOn == CONSENSUS.getPenalizedNum(branch, lastPeriodVotedOn, msg.sender)):
        sendRedistributedRepToBranch()
    MUTEX.unsetMutex()
    return(1)

macro checkForkPenalizationPreconditions():
    if(repBalance < ONE):
        MUTEX.unsetMutex()
        return(0)
    if((block.timestamp / periodLength - 2) != lastPeriodVotedOn):
        # todo why not auto increment period
        MUTEX.unsetMutex()
        return(-1)
    atFirstHalfOfPeriod()
    # means event / fork isn't resolved
    if(!EVENTS.getForkedDone(event)):
        MUTEX.unsetMutex()
        return(-3)
    if(CONSENSUS.getPenalizedUpTo(branch, msg.sender) == lastPeriodVotedOn):
        MUTEX.unsetMutex()
        return(-4)
    if(!CONSENSUS.getFeesCollected(branch, msg.sender, lastPeriodVotedOn - 1)):
        MUTEX.unsetMutex()
        return(-5)
    if(EVENTS.getEventBranch(event) != branch):
        MUTEX.unsetMutex()
        return(-6)

macro penalizeOrRewardReporter():
    # penalization on a forked event
    # if didn't report [reportValue of 0] then it's a bad report here
    # Do (for each user) based on forking report and final outcome
    if(!CONSENSUS.getPenalized(branch, lastPeriodVotedOn, msg.sender, event) and outcome != 0):
        calculateRepChange(reportValue, ONE)
        handleEthicsAndBondRepRedistribution(numReportedOn)
        CONSENSUS.setPenalized(branch, lastPeriodVotedOn, msg.sender, event)
        CONSENSUS.increasePenalizedNum(branch, lastPeriodVotedOn, msg.sender, 1)

macro handleEthicsAndBondRepRedistribution($numReportedOn):
    # for ethicality if diff. appeal then pay back the fork bond from people who reported the wrong ethicality
    if(ethics != ethicCatch(EVENTS.getEthics(event)) and repChange >= 0 and BACKSTOPS.getForkedOverEthicality(event)):
        if($numReportedOn < 10):
            # allows max penalty to be 10% per event
            $penalty = -ONE / 10
            repChange = $penalty * repBalance / ONE
        else:
            $penalty = -ONE / $numReportedOn
            repChange = $penalty * repBalance / ONE
    # can only lose max of current balance
    if(repBalance + repChange <= 0):
        repChange = -1 * repBalance
    # todo fix for this can go over 2x bond, not supposed to: we don't want the rep to go to the branch here so don't deduct from after rep [since that gets redistributed to the branch, only want to penalize once / event, not 2x]
    if(BACKSTOPS.getForkBondPaid(event) < BACKSTOPS.getBondAmount(event) * 2 and repChange < 0):
        # done instead of sending to redistrib. pool
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), repChange)
        # sends that rep to the bonded challenger
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getForkBondPoster(event)), -repChange)
        BACKSTOPS.adjForkBondPaid(event, -1 * repChange)
    # no need to pay bond poster
    else:
        newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriodVotedOn, msg.sender) + repChange
        EXPEVENTS.setAfterRep(branch, lastPeriodVotedOn, newAfterRep, msg.sender)
    repBalance = REPORTING.getRepBalance(branch, msg.sender)
