import branches as BRANCHES
import reporting as REPORTING
import events as EVENTS
import backstops as BACKSTOPS
import expiringEvents as EXPEVENTS
import consensusData as CONSENSUS

inset('refund.se')
inset('eventHelpers.se')
inset('redistributeRep.se')
inset('proportionCorrect.se')
inset('repChange.se')

# Penalizes a reporter for reporting wrongly on a forked event / backstop 2
# Notes:
    # essentially penalizeWrong for backstop 2 [where everyone reports on a forked event on the new branch]
    # only called on the fork not the parent, normal penalization except the outcome values are forkOutcome and forkEthicality as opposed to anything else
    # some rep from this goes to bond poster
    # branch is the fork, not the parent
    # fork event needs to be resolved first before this can be called
# Errors:
    #  0: not enough rep to report/penalize
    # -1: already past first half of new period and needed to penalize before then
    # -2: fork event isn't resolved yet
    # -3: already done for all events in this period
    # -4: needed to collect fees last period which sets the before/after rep
def penalizeOnForkedEvent(branch, event):
    refund()
    repBalance = REPORTING.getRepBalance(branch, msg.sender)
    lastPeriod = BRANCHES.getVotePeriod(branch)-1
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    newRep = 0
    newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender)
    oldRep = EXPEVENTS.getBeforeRep(branch, lastPeriod, msg.sender)
    if(repBalance < ONE):
        return(0)
    forkOutcome = EVENTS.getForkOutcome(event)
    outcome = catch(forkOutcome)
    if(scalar(event) or categorical(event)):
        outcome = forkOutcome
    p = proportionCorrect(event, 1)
    reportValue = EXPEVENTS.getReport(branch, lastPeriod, event, msg.sender)
    ethics = EXPEVENTS.getEthicReport(branch, lastPeriod, event, msg.sender)
    bond = BACKSTOPS.getBondAmount(event)
    # makes sure we're actually still able to report on the last vote period and that we're in 1st half of current period
    if(residual > periodLength/2 or (block.timestamp / periodLength - 2)!=lastPeriod):
        return(-1)
    # means event / fork isn't resolved
    if(EVENTS.getForkedDone(event)==0):
        return(-2)
    if(CONSENSUS.getPenalizedUpTo(branch, msg.sender)==lastPeriod):
        return(-3)
    if(!CONSENSUS.getFeesCollected(branch, msg.sender, lastPeriod)):
        return(-4)
    numReportedOn = EXPEVENTS.getNumReportsSubmitted(branch, lastPeriod, msg.sender)
    # penalization on a forked event
    # if didn't report [reportValue of 0] then it's a bad report here
    # Do (for each user) based on forking report and final outcome
    if(!CONSENSUS.getPenalized(branch, lastPeriod, msg.sender, event)):
        if(outcome!=0):
            calculateRepChange(reportValue, ONE)
            handleEthicsAndBondRepRedistribution(numReportedOn)
        CONSENSUS.setPenalized(branch, lastPeriod, msg.sender, event)
        CONSENSUS.increasePenalizedNum(branch, lastPeriod, msg.sender, 1)
    # once penalized for all events actually get rid of net rep lost
    if(numReportedOn==CONSENSUS.getPenalizedNum(branch, lastPeriod, msg.sender)):
        sendRedistributedRepToBranch()
    return(1)
    
macro handleEthicsAndBondRepRedistribution($numReportedOn):
    # for ethicality if diff. appeal then pay back the fork bond from people who reported the wrong ethicality
    if(ethics != ethic_catch(EVENTS.getEthics(event)) && repChange >=0 && BACKSTOPS.getForkedOverEthicality(event)):
        if($numReportedOn<10):
            repChange = -ONE/10*repBalance / ONE
        else:
            repChange = -ONE/$numReportedOn*repBalance / ONE
    if(repBalance + repChange <= 0):
        repChange = -1*repBalance
    if(BACKSTOPS.getForkBondPaid(event) < BACKSTOPS.getBondAmount(event)*2 && repChange < 0):
        # done instead of sending to redistrib. pool
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, msg.sender), repChange)
        # sends that rep to the bonded challenger
        REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getForkBondPoster(event)), -repChange)
        BACKSTOPS.adjForkBondPaid(event, -1*repChange)
    else:
        newAfterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, msg.sender) + repChange
        EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, msg.sender)
