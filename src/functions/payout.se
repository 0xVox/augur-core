import markets as MARKETS
import cash as CASH
import events as EVENTS
inset('refund.se')

event payout(sender:indexed, market:indexed, payoutValue, shares)

# Payout a trader in a market with one winning outcome [so not scalar]
# Error:
    # -1: sender doesn't exist / match up with the participant given participant number [this is used as a check to make sure participant #0 is really #0]
def oneOutcome(market, winningOutcome, sender, categoricalPointFive, numOutcomes):
    cumScale = MARKETS.getCumScale(market)
    # if it's an indeterminate categorical market resolve with all outcomes having an equal value
    if(categoricalPointFive):
        i = 0
        while(i < numOutcomes):
            sharesOwned = MARKETS.getParticipantSharesPurchased(market, sender, i+1)
            MARKETS.modifyParticipantShares(market, sender, i+1, -sharesOwned)
            cashPayout = sharesOwned*MARKETS.getCumScale(market)/(numOutcomes*ONE)
            CASH.subtractCash(market, cashPayout)
            CASH.addCash(participant, cashPayout)
            i+=1
    else:
        # distribute profit to the people who won money by holding winning shares
        sharesOwned = MARKETS.getParticipantSharesPurchased(market, sender, winningOutcome)
        MARKETS.modifyParticipantShares(market, sender, winningOutcome, -sharesOwned)
        cashPayout = sharesOwned*cumScale/ONE
        CASH.subtractCash(market, cashPayout)
        CASH.addCash(participant, cashPayout)
    log(type=payout, sender, market, cashPayout, sharesOwned)
    return(1)

# Payout traders in markets with number of winningOutcomes of 2 [one scalar with any combination of binary + categorical for the other 2 dimensions, or just 1D with a scalar]
# Error:
    # -1: sender doesn't exist / match up with the participant given participant number [this is used as a check to make sure participant #0 is really #0]
def twoOutcomes(market, winningOutcome: arr, event, sender):
    refund()
    # fetch outcome and min/max values for the scalar
    outcome = EVENTS.getOutcome(event)
    minValue = EVENTS.getMinValue(event)
    maxValue = EVENTS.getMaxValue(event)
    # price is in fixed point
    # share two goes with the high/long side
    pricePerShare2 = ONE*(outcome - minValue) / (maxValue - minValue)
    # share one goes with the low/short side of the calc
    pricePerShare1 = ONE - pricePerShare1
    # for each winning outcome get rid of shares and send money to the trader
    n = 0
    cumScale = MARKETS.getCumScale(market)
    while(winningOutcome[n]!=0):
        sharesOwned = MARKETS.getParticipantSharesPurchased(market, sender, winningOutcome[n])
        MARKETS.modifyParticipantShares(market, sender, winningOutcome[n], -sharesOwned)
        # low side
        if(n==0):
            cashPayout = sharesOwned*cumScale/ONE*pricePerShare1/ONE
            CASH.subtractCash(market, cashPayout)
            CASH.addCash(participant, cashPayout)
        # high side (of the scalar part)
        elif(n==1):
            cashPayout = sharesOwned*cumScale/ONE*pricePerShare2/ONE
            CASH.subtractCash(market, cashPayout)
            CASH.addCash(participant, cashPayout)
        n+=1
    log(type=payout, sender, market, cashPayout, sharesOwned)
    return(1)
