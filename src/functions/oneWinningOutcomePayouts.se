### This pays out on binary or categorical markets

import markets as MARKETS
import info as INFO
import branches as BRANCHES
extern subcurrency: [allowance:[uint256,uint256]:uint256, approve:[uint256,uint256]:uint256, balance:[]:uint256, balanceOf:[uint256]:uint256, transfer:[uint256,uint256]:uint256, transferFrom:[uint256,uint256,uint256]:uint256]
inset('../data_api/refund.se')

# Payout a trader in a market with one winning outcome [so not scalar or determinate categoricals]
# whitelist this
def oneOutcome(market, winningOutcome, sender, categoricalPointFive, numOutcomes):
    callstackCheck()
    currency = INFO.getCurrency(market)
    branch = MARKETS.getBranch(market)
    # if it's an indeterminate categorical market resolve with all outcomes having an equal value
    if(categoricalPointFive):
        i = 0
        while(i < numOutcomes):
            payoutIndeterminateCategorical()
        i += 1
    else:
        payoutRegularOneOutcomeMarket()
    return(1)

macro payoutIndeterminateCategorical():
    sharesOwned = MARKETS.getParticipantSharesPurchased(market, sender, i + 1)
    MARKETS.modifyParticipantShares(market, sender, i + 1, -sharesOwned, 0)
    value = sharesOwned / numOutcomes
    fee = MARKETS.getTradingFee(market) * value / ONE
    if(!INFO.getWallet(market).transfer(BRANCHES.getWallet(branch, currency), fee / 2) or !INFO.getWallet(market).transfer(INFO.getCreator(market), fee / 2)):
        throw()
    if(!INFO.getWallet(market).transfer(sender, value - fee)):
        throw()

macro payoutRegularOneOutcomeMarket():
    # distribute profit to the people who won money by holding winning shares
    sharesOwned = MARKETS.getParticipantSharesPurchased(market, sender, winningOutcome)
    MARKETS.modifyParticipantShares(market, sender, winningOutcome, -sharesOwned, 0)
    value = sharesOwned
    fee = MARKETS.getTradingFee(market) * value / ONE
    if(!INFO.getWallet(market).transfer(BRANCHES.getWallet(branch, currency), fee / 2) or !INFO.getWallet(market).transfer(INFO.getCreator(market), fee / 2)):
        throw()
    if(!INFO.getWallet(market).transfer(sender, value - fee)):
        throw()
