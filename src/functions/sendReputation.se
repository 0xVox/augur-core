#    so if user hasn't claimed rep on the branch yet and it's a fork scenario, don't allow sending rep on the parent branch until they [receiver] claim 
#    should also perhaps make sender claim too

# also perhaps should just do sendFrom only here too

# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import expiringEvents as EXPEVENTS
import reporting as REPORTING
import makeReports as REPORTS
import penalizationCatchup as CATCHUP
import consensusData as CONSENSUS
import repContract as REPCONTRACT
inset('refund.se')

# sender/owner, then spender
data amountCanSpend[][](branch[])

event Transfer(_from:indexed, _to:indexed, _value)
event Approval(_owner:indexed, _spender:indexed, value)

def any():
    refund()

# send active reputation
# @return value of reputation sent, 0 if not enough reputation
# error messages otherwise
    # -1: "Your reputation account was just created, earn some rep. before you can send to others"
    # -2: "Receiving address doesn't exist"
def sendRepFrom(branch, from, recver, value):
    refund()
    # need to check all this for the person it's being sent to as well
    votePeriod = BRANCHES.getVotePeriod(branch)
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    lastPeriod = BRANCHES.getVotePeriod(branch)-1
    lastPeriodPenalized = CONSENSUS.getPenalizedUpTo(branch, msg.sender)
    delta = lastPeriod - lastPeriodPenalized
    # Rep cannot be simultaneously spent (transferred) and used to vote
    if(residual > periodLength/2):
        return(-2)
    if(delta > 1):
        if(CATCHUP.penalizationCatchup(branch, msg.sender)!=1):
            return(0)
    if(!CONSENSUS.getRepRedistributionDone(branch, msg.sender)):
        return(0)

    # todo auto increment vote period if needed
    sender = from
    senderIndex = REPORTING.repIDToIndex(branch, sender)
    receiverIndex = REPORTING.repIDToIndex(branch, recver)

    # if the sender's rep. account doesn't exist, make one, only if in first half of period and not a fork scenario
    if(REPORTING.getReporterID(branch, senderIndex)!=from && from==msg.sender):
        CONSENSUS.setPenalizedUpTo(branch, from, (BRANCHES.getVotePeriod(branch)-1))
        REPORTING.addReporter(branch, sender)
        return(-1)
    if(REPORTING.getReporterID(branch, receiverIndex)!=recver):
        return(-2)

    senderBalance = REPORTING.getRepBalance(branch, sender)
    if(senderBalance >= value && value > 0 && (self.amountCanSpend[from][msg.sender].branch[branch] >= value or from==msg.sender)):
        if(from!=msg.sender)
            self.amountCanSpend[from][msg.sender].branch[branch] -= value
        if(REPORTING.subtractRep(branch, senderIndex, value) && REPORTING.addRep(branch, receiverIndex, value)):
            log(type=Transfer, from, recver, value)
            return(value)
        else:
            return(0)
    else:
        return(0)


# Transfer dormant rep
# @return value of reputation sent, 0 if not enough reputation
# error messages otherwise
    # -1: "Your reputation account was just created, earn some rep. before you can send to others"
    # -2: "Receiving address doesn't exist"
# fails unless from has authorized sender [either contract which was approved or the from address is the msg.sender]
def transferFrom(branch, from, recver, value):
    refund()
    currentVotePeriod = BRANCHES.getVotePeriod(branch)
    if(value<=0):
        return(0)
    sender = from
    senderIndex = REPORTING.repIDToIndex(branch, sender)
    receiverIndex = REPORTING.repIDToIndex(branch, recver)

    # if the sender's rep. account doesn't exist, make one
    if(REPORTING.getReporterID(branch, senderIndex)!=from && from==msg.sender):
        CONSENSUS.setPenalizedUpTo(branch, from, (BRANCHES.getVotePeriod(branch)-1))
        REPORTING.addReporter(branch, sender)
        return(-1)

    if(REPORTING.getReporterID(branch, receiverIndex)!=recver):
        return(-2)

    senderBalance = REPORTING.balanceOf(branch, sender)
    if(senderBalance >= value && value > 0 && (self.amountCanSpend[from][msg.sender].branch[branch] >= value or from==msg.sender)):
        if(from!=msg.sender)
            self.amountCanSpend[from][msg.sender].branch[branch] -= value
        if(REPORTING.subtractDormantRep(branch, senderIndex, value) && REPORTING.addDormantRep(branch, receiverIndex, value)):
            log(type=Transfer, from, recver, value)
            return(value)
        else:
            return(0)
    else:
        return(0)

# Convert active rep to dormant rep
# error messages
    # -1: not in first half of reporting period
# shouldn't be penalized for dormant rep when converting back to active due to not reporting beyond the dormant penalization
# todo when handling dormant rep stuff:
# if a person reported on a round 2 event, they cannot convert their rep to dormant or send rep until they've finished the resolution process for that round 2 event
# unless this just happened to them last period and they reported correctly then
def convertToDormantRep(branch, value):
    refund()
    # if not in first half of reporting period
    periodLength = BRANCHES.getPeriodLength(branch)
    if(!CONSENSUS.getRepRedistributionDone(branch, msg.sender)):
        return(0)
    residual = block.timestamp % periodLength
    if(residual > periodLength/2):
      return(-1)
    if(value<=0):
        return(0)
    
    lastPeriodPenalized = CONSENSUS.getPenalizedUpTo(branch, msg.sender)
    lastPeriod = BRANCHES.getVotePeriod(branch)-1
    delta = lastPeriod - lastPeriodPenalized
    if(delta > 1):
        if(CATCHUP.penalizationCatchup(branch, msg.sender)!=1):
            return(0)

    #if(REPORTS.getRRUpToDate()!=1):
    #    doIt()

    #if(hasReported(lastPeriod) && periodOver):
        #CONSENSUS.collectFees(lastPeriod)

    sender = msg.sender
    senderIndex = REPORTING.repIDToIndex(branch, sender)

    # if the sender's rep. account doesn't exist, make one, only if in first half of period and not a fork scenario
    if(REPORTING.getReporterID(branch, senderIndex)!=msg.sender):
        REPORTING.addReporter(branch, sender)
        CONSENSUS.setPenalizedUpTo(branch, msg.sender, (BRANCHES.getVotePeriod(branch)-1))
        return(-1)

    senderBalance = REPORTING.getRepBalance(branch, sender)
    if(senderBalance >= value):
        if(REPORTING.subtractRep(branch, senderIndex, value) && REPORTING.addDormantRep(branch, senderIndex, value)):
            REPORTING.adjustActiveRep(branch, -value)
            return(value)
        else:
            return(0)
    else:
        return(0)

# Convert dormant rep to active rep
# error messages
    # -1: not in first half of reporting period
def convertToActiveRep(branch, value):
    refund()
    # if not in first half of reporting period
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.timestamp % periodLength
    if(residual > periodLength/2):
      return(-1)
      
    lastPeriodPenalized = CONSENSUS.getPenalizedUpTo(branch, msg.sender)
    lastPeriod = BRANCHES.getVotePeriod(branch)-1
    delta = lastPeriod - lastPeriodPenalized
    if(delta > 1):
        if(CATCHUP.penalizationCatchup(branch, msg.sender)!=1):
            return(0)
    if(!CONSENSUS.getRepRedistributionDone(branch, msg.sender)):
        return(0)
    if(value<=0):
        return(0)

    #if(REPORTS.getRRUpToDate()):
        #doIt()
    #if(hasReported(lastPeriod) && periodOver):
        #CONSENSUS.collectFees(lastPeriod)

    sender = msg.sender
    senderIndex = REPORTING.repIDToIndex(branch, sender)

    # if the sender's rep. account doesn't exist, make one
    # if the sender's rep. account doesn't exist, make one, only if in first half of period and not a fork scenario
    if(REPORTING.getReporterID(branch, senderIndex)!=msg.sender):
        REPORTING.addReporter(branch, sender)
        CONSENSUS.setPenalizedUpTo(branch, msg.sender, (BRANCHES.getVotePeriod(branch)-1))
        return(-1)

    senderBalance = REPORTING.balanceOf(branch, sender)
    if(senderBalance >= value):
        if(REPORTING.subtractDormantRep(branch, senderIndex, value) && REPORTING.addRep(branch, senderIndex, value)):
            REPORTING.adjustActiveRep(branch, value)
            return(value)
        else:
            return(0)
    else:
        return(0)
        
def claimRep():
    balance = REPCONTRACT.balanceOf(msg.sender)
    if(REPCONTRACT.transferFrom(msg.sender, 0, balance) && REPORTING.addReporter(1010101, msg.sender, 0, balance, 0)):
        return(1)
    else:
        throw()

# Allows spender to withdraw from your dormant rep account
# fix to be branch specific todo
def approve(branch, spender, value):
    self.amountCanSpend[msg.sender][spender].branch[branch] = value
    log(type=Approval, msg.sender, spender, value)
    return(1)

# Returns amount spender can withdraw from owner
def allowance(branch, owner, spender):
    return(self.amountCanSpend[owner][spender].branch[branch])

macro hasReported($branch, $period):
    EXPEVENTS.getNumReportsSubmitted($branch, $period, msg.sender)