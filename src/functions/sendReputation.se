# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import expiringEvents as EXPEVENTS
import cash as CASH
import reporting as REPORTING

# @return value of reputation sent, 0 if not enough reputation
# error messages otherwise
    # -1: "Your reputation account was just created, earn some rep. before you can send to others"
    # -2: "Receiving address doesn't exist"
def sendReputation(branch, recver, value):
    # VoteCoins cannot be simultaneously spent (transferred) and used to vote
    currentVotePeriod = BRANCHES.getVotePeriod(branch)
    if(value<=0 || !CASH.send(branch, 5*2^64) || EXPEVENTS.getReport(branch, currentVotePeriod, tx.origin, 0) != 0 || EXPEVENTS.getReport(branch, currentVotePeriod, msg.sender, 0) != 0 || EXPEVENTS.getReport(branch, currentVotePeriod, recver, 0) != 0):
        return(0)
    if(hasntDoneRRForEventsAndWrongAns):
        doIt()
        self.RRDone = true

    sender = tx.origin
    senderIndex = REPORTING.repIDToIndex(branch, sender)
    receiverIndex = REPORTING.repIDToIndex(branch, recver)

    # if the sender's rep. account doesn't exist, make one
    if(REPORTING.getReporterID(branch, senderIndex)!=tx.origin):
        REPORTING.addReporter(branch, sender)
        return(-1)

    if(REPORTING.getReporterID(branch, receiverIndex)!=recver):
        return(-2)

    senderBalance = REPORTING.getRepBalance(branch, sender)
    if(senderBalance >= value):
        if(REPORTING.subtractRep(branch, senderIndex, value) && REPORTING.addRep(branch, receiverIndex, value)):
            return(value)
        else:
            return(0)
    else:
        return(0)
