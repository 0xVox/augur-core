# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

### Token wrapper for eth, which allows eth deposits and faucet usage for testing

inset('../data_api/refund.se')

data accounts[2**160](balance, spenders[2**160](maxValue))

data totalSupply
# token name for display
data name
# token symbol for display
data symbol
# amount of decimals per unit of rep
data decimals

event Transfer(from:indexed, to:indexed, value)
event Approval(owner:indexed, spender:indexed, value)

# 18 decimals
macro ONE:
    10 ** 18

def init():
    self.accounts[msg.sender].balance = 100000 * 10 ** 20
    self.name = "Cash"
    self.symbol = "CASH"
    self.decimals = 18

def transfer(to: address, value: uint256):
    refund()
    senderBalance = self.accounts[msg.sender].balance
    if(senderBalance < value):
        throw()
    if(!safeToSubtract(senderBalance, value) or !safeToAdd(self.accounts[to].balance, value)):
        throw()
    # Update balances
    self.accounts[msg.sender].balance -= value
    self.accounts[to].balance += value
    log(type = Transfer, msg.sender, to, value)
    return(1)

def transferFrom(from: address, to: address, value: uint256):
    refund()
    senderBalance = self.accounts[from].balance
    if(senderBalance < value or value > self.accounts[from].spenders[msg.sender].maxValue):
        throw()
    if(!safeToSubtract(senderBalance, value) or !safeToAdd(self.accounts[to].balance, value)):
        throw()
    self.accounts[from].spenders[msg.sender].maxValue -= value
    # Update balances
    self.accounts[from].balance -= value
    self.accounts[to].balance += value
    log(type = Transfer, from, to, value)
    return(1)

def approve(spender: address, value: uint256):
    refund()
    self.accounts[msg.sender].spenders[spender].maxValue = value
    log(type=Approval, msg.sender, spender, value)
    return(1)

# used for faucets
def setCash(address: address, balance: uint256):
    refund()
    # if !self.whitelist.check(msg.sender):
    #    return(-1)
    delta = balance - self.accounts[address].balance
    self.accounts[address].balance = balance
    self.totalSupply += delta
    return(1)

def depositEther():
    amount = msg.value * ONE / WEI_TO_ETH
    self.accounts[msg.sender].balance += amount
    self.totalSupply += amount
    return(1)

# Withdraw ether to an address
# Returns 2 if withdrawal is initiated [then must wait 3 days]
# Returns 1 if withdrawal is successful
# Errors:
    # 0: Not enough money
def withdrawEther(to: address, value: uint256):
    refund()
    if(self.accounts[msg.sender].balance < value):
        return(0)
    self.accounts[msg.sender].balance -= value
    self.totalSupply -= value
    if(!send(to, value)):
        throw()
    return(1)

# Returns amount spender can withdraw from owner
def allowance(owner: address, spender: address):
    return(self.accounts[address].spenders[spender].maxValue)

def totalSupply():
    return(self.totalSupply)

# @return reputation fxpValue
def balanceOf(address: address):
    return(self.accounts[msg.sender].balance)

def getName():
    return(self.name)
    
def getDecimals():
    return(self.decimals)
    
def getSymbol():
    return(self.symbol)

# safe adders idea pulled from piper merriam's btcrelay audit
macro safeToAdd($a, $b):
    (($a + $b) >= $a)

macro safeToSubtract($a, $b):
    ($b <= $a)
