# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import expiringEvents as EXPEVENTS
import info as INFO
import cash as CASH
import reporting as REPORTING
import fxpFunctions as FXP
import markets as MARKETS
import events as EVENTS

event updatePrice(user:indexed, market:indexed, outcome:indexed, price, cost)

data trades[2^160](id, type, market, amount, price, owner, block, refhash)
data last_market

event log_price(market:indexed, type, price, amount, timestamp)
event log_add_tx(market:indexed, sender, type, price, amount, tradeid)
event log_fill_tx(market:indexed, sender:indexed, owner:indexed, type, price, amount, tradeid)
event log_cancel(market:indexed, sender, price, amount, tradeid)

# market, reporter
data trades[][](hash, block)


# Trade types
macro BID: 1
macro ASK: 2

# Field counts
macro TRADE_FIELDS: 8

# Boolean success/failure
macro SUCCESS: 1
macro FAILURE: 0


#
# Error codes
#

# Trades
macro MISSING_AMOUNT: 2
macro MISSING_PRICE: 3
macro MISSING_MARKET_ID: 4

macro INSUFFICIENT_BALANCE: 10
macro INSUFFICIENT_TRADE_AMOUNT: 11
macro INSUFFICIENT_VALUE: 12

macro TRADE_AMOUNT_MISMATCH: 20
macro TRADE_ALREADY_EXISTS: 21
macro TRADE_SAME_BLOCK_PROHIBITED: 22

def commitTrade(market, hash):
    self.trades[market][tx.origin].hash = hash
    self.trades[market][tx.origin].block = block.number
    return(1)
    
def makeMarketHash(market, outcome, amount, limit):
    buyInfo = array(4)
    buyInfo[0] = market
    buyInfo[1] = outcome
    buyInfo[2] = amount
    buyInfo[3] = limit
    buyHash = sha256(buyInfo, items=4)
    return(buyHash)
    
# buys amount of every outcome
def buyCompleteSets(branch, market, amount):
    if(BRANCHES.getOracleOnly(branch)):
        return(-6)
    # make it so trader has locked in fee from buy, so if they sell and they bought when fee was low, they can sell with that low fee as opposed to a high one
    numEvents = MARKETS.getNumEvents(market)
    events = MARKETS.getMarketEvents(market, outitems=numEvents)
    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    n = 0
    #if event gets pushed back people can still buy / sell
    pushedBack = 0
    while n < numEvents:
        #if(EVENTS.getPushedBack(events[n])==0):
        if(1):
            n += 1
        # pushed back and not resolved
        elif(EVENTS.getOutcome(events[n])==0):
            pushedBack = 1
            n = numEvents
        else:
          n += 1
    ### TODO: check for .99 market here
    if (outcome==0 || (BRANCHES.getVotePeriod(branch)>MARKETS.getTradingPeriod(market) && !pushedBack) || MARKETS.getBranchID(market) != branch):
        return(-1)
    price = amount
    if(CASH.balance(tx.origin) < price*(MARKETS.getTradingFee(market) + 2^64)/2^64):
        return(-3)

    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)

    # if participant doesn't exist in market, add them
    if(tx.origin != MARKETS.getParticipantID(market, participantNumber)):
        participantNumber = MARKETS.addParticipant(market, tx.origin)

    i = 0
    # send shares of the event to user address
    while i <= numOutcomes:
        MARKETS.modifyShares(market, i, amount)
        MARKETS.modifyParticipantShares(branch, market, participantNumber, i, amount)
        i += 1
    # send money from user acc. to market address/account
    # cost for shares
    CASH.send(market, price)
    # half of fees to market creator
    fee = MARKETS.getTradingFee(market)*price/2^64
    CASH.send(INFO.getCreator(market), fee/2)
    # other half go to branch
    CASH.send(branch, fee/2)
    # log new price & avg price paid/share
    log(type=updatePrice, tx.origin, market, outcome, MARKETS.price(market, outcome), -(price+fee)*2^64/amount)
    return(1)

    
# sells amount of every outcome [if user owns it]
def sellCompleteSets(branch, market, amount):
    if(BRANCHES.getOracleOnly(branch)):
        return(-6)

    # can trade up until the event has started to be voted on (e.g. currentVotePeriod is >= to the latest expDate/periodLength)
    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)
    numEvents = MARKETS.getNumEvents(market)
    events = MARKETS.getMarketEvents(market, outitems=numEvents)
    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    n = 0
    #if event gets pushed back people can still buy / sell
    pushedBack = 0
    while n < numEvents:
        #if(EVENTS.getPushedBack(events[n])==0):
        if(1):
            n += 1
        # pushed back and not resolved
        elif(EVENTS.getOutcome(events[n])==0):
            pushedBack = 1
            n = numEvents
        else:
          n += 1
    if (MARKETS.getParticipantID(market, participantNumber) != tx.origin || outcome==0 || (BRANCHES.getVotePeriod(branch)>MARKETS.getTradingPeriod(market) && !pushedBack) || MARKETS.getBranchID(market) != branch):
        return(-1)

    # these prices are in fixed point
    price = amount
    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)
    # remove shares from the user's account
    i = 0
    while i <= numOutcomes:
        if(MARKETS.getParticipantSharesPurchased(market, participantNumber, i) < amount):
            return(-3)
        i += 1
    i = 0
    # send shares of the event to user address
    while i <= numOutcomes:
        MARKETS.modifyShares(market, i, -amount)
        MARKETS.modifyParticipantShares(branch, market, participantNumber, i, -amount)
        i += 1
    
    # send bitcoin from the market to the user acc.
    CASH.subtractCash(market, price)
    fee = MARKETS.getTradingFee(market)*price/2^64
    # half of fees go to market creator
    CASH.addCash(INFO.getCreator(market), fee/2)
    # half go to branch
    CASH.addCash(branch, fee/2)
    price -= fee
    CASH.addCash(tx.origin, price)
    # log new price and avg. price sold / share
    log(type=updatePrice, tx.origin, market, outcome, MARKETS.price(market, outcome), (price)*2^64/amount)
    return(1)


# amount of shares should be fixed point
# @return return price + fee to buy shares
# Error messages otherwise
    # -1: invalid outcome or trading closed
    # -2: entered a -amt of shares
    # -3: not enough money / limit order too low
    # -4: invalid outcome
    # -5: bad commitment or no commitment
    # -6: oracle only branch, no trading
def buyShares(branch, market, outcome, amount, limit):
    # can trade up until the event has started to be voted on (e.g. currentVotePeriod is >= to the latest expDate/periodLength)

    if(BRANCHES.getOracleOnly(branch)):
        return(-6)

    buyInfo = array(4)
    buyInfo[0] = market
    buyInfo[1] = outcome
    buyInfo[2] = amount
    buyInfo[3] = limit
    buyHash = sha256(buyInfo, items=4)
    if(self.trades[market][tx.origin].hash != buyHash || block.number == self.trades[market][tx.origin].block):
        return(-5)
    self.trades[market][tx.origin].hash = 0
    # make it so trader has locked in fee from buy, so if they sell and they bought when fee was low, they can sell with that low fee as opposed to a high one
    numEvents = MARKETS.getNumEvents(market)
    events = MARKETS.getMarketEvents(market, outitems=numEvents)
    if(outcome > MARKETS.getMarketNumOutcomes(market) or outcome < 1):
        return(-4)
    n = 0
    #if event gets pushed back people can still buy / sell
    pushedBack = 0
    while n < numEvents:
        #if(EVENTS.getPushedBack(events[n])==0):
        if(1):
            n += 1
        # pushed back and not resolved
        elif(EVENTS.getOutcome(events[n])==0):
            pushedBack = 1
            n = numEvents
        else:
          n += 1
    ### TODO: check for .99 market here
    if (outcome==0 || (BRANCHES.getVotePeriod(branch)>MARKETS.getTradingPeriod(market) && !pushedBack) || MARKETS.getBranchID(market) != branch):
        return(-1)
    # lmsr cost calcs
    oldCost = MARKETS.lsLmsr(market)
    MARKETS.modifyShares(market, outcome, amount)
    newCost = MARKETS.lsLmsr(market)
    if newCost <= oldCost:
        MARKETS.modifyShares(market, outcome, -amount)
        return(0)
    price = (newCost - oldCost)

    if(CASH.balance(tx.origin) < price*(MARKETS.getTradingFee(market) + 2^64)/2^64 or (limit!=0 and (price*2^64/amount)>limit)):
        MARKETS.modifyShares(market, outcome, -amount)
        return(-3)

    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)

    # if participant doesn't exist in market, add them
    if(tx.origin != MARKETS.getParticipantID(market, participantNumber)):
        participantNumber = MARKETS.addParticipant(market, tx.origin)

    MARKETS.modifyParticipantShares(branch, market, participantNumber, outcome, amount)
    # send shares of the event to user address
    # if user doesn't have enough money, revert
    # send money from user acc. to market address/account
    # cost for shares
    CASH.send(market, price)
    # half of fees to market creator
    fee = MARKETS.getTradingFee(market)*price/2^64
    CASH.send(INFO.getCreator(market), fee/2)
    # other half go to branch
    CASH.send(branch, fee/2)
    # log new price & avg price paid/share
    log(type=updatePrice, tx.origin, market, outcome, MARKETS.price(market, outcome), -(price+fee)*2^64/amount)
    return(1)

# amount is amount of shares to sell
# instead of inputting particip. num could just loop through array if dont have it
# @return error msg if fail, returns amount you get paid if success
# Error messages otherwise
    # -1: invalid outcome, trading closed, or you haven't traded in this market
    # -2: entered a -amt of shares
    # -3: you own no shares / limit price too high
    
    # -5: bad commitment or no commitment
    # -6: oracle only branch, no trading
def sellShares(branch, market, outcome, amount, limit):
    if(BRANCHES.getOracleOnly(branch)):
        return(-6)
    sellInfo = array(4)
    sellInfo[0] = market
    sellInfo[1] = outcome
    sellInfo[2] = amount
    sellInfo[3] = limit
    sellHash = sha256(sellInfo, items=4)
    if(self.trades[market][tx.origin].hash != sellHash || block.number == self.trades[market][tx.origin].block):
        return(-5)
        
    self.trades[market][tx.origin].hash = 0

    # can trade up until the event has started to be voted on (e.g. currentVotePeriod is >= to the latest expDate/periodLength)
    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)
    numEvents = MARKETS.getNumEvents(market)
    events = MARKETS.getMarketEvents(market, outitems=numEvents)
    if(outcome > MARKETS.getMarketNumOutcomes(market) or outcome < 1):
        return(-4)
    n = 0
    #if event gets pushed back people can still buy / sell
    pushedBack = 0
    while n < numEvents:
        #if(EVENTS.getPushedBack(events[n])==0):
        if(1):
            n += 1
        # pushed back and not resolved
        elif(EVENTS.getOutcome(events[n])==0):
            pushedBack = 1
            n = numEvents
        else:
          n += 1
    if (MARKETS.getParticipantID(market, participantNumber) != tx.origin || outcome==0 || (BRANCHES.getVotePeriod(branch)>MARKETS.getTradingPeriod(market) && !pushedBack) || MARKETS.getBranchID(market) != branch):
        return(-1)
    # lmsr cost calcs
    oldCost = MARKETS.lsLmsr(market)
    MARKETS.modifyShares(market, outcome, -amount)
    newCost = MARKETS.lsLmsr(market)
    if oldCost <= newCost:
        MARKETS.modifyShares(market, outcome, amount)
        return(-2)
    # these prices are in fixed point
    price = oldCost - newCost
    # remove shares from the user's account
    # if user actually doesn't have the shares, revert
    if (MARKETS.getParticipantSharesPurchased(market, participantNumber, outcome) < amount or (limit!=0 and (price*2^64/amount)<limit)):
        MARKETS.modifyShares(market, outcome, amount)
        return(-3)
    else:
        # send bitcoin from the market to the user acc.
        CASH.subtractCash(market, price)
        fee = MARKETS.getTradingFee(market)*price/2^64
        # half of fees go to market creator
        CASH.addCash(INFO.getCreator(market), fee/2)
        # half go to branch
        CASH.addCash(branch, fee/2)
        price -= fee
        CASH.addCash(tx.origin, price)
        MARKETS.modifyParticipantShares(branch, market, participantNumber, outcome, -amount)
        # log new price and avg. price sold / share
        log(type=updatePrice, tx.origin, market, outcome, MARKETS.price(market, outcome), (price)*2^64/amount)
        return(1)


macro save_trade($type, $amount, $price, $market_id):
    trade = [$type, $market_id, $amount, $price, msg.sender, block.number]
    trade_id = sha3(trade:arr)

    # Save trade
    if !self.trades[trade_id].id:
        self.trades[trade_id].id = trade_id
        self.trades[trade_id].type = $type
        self.trades[trade_id].market = $market_id
        self.trades[trade_id].amount = $amount
        self.trades[trade_id].price = $price
        self.trades[trade_id].owner = msg.sender
        self.trades[trade_id].block = block.number
        self.trades[trade_id].refhash = ref(self.trades[trade_id].id)

        # Update market
        last_id = self.markets[$market_id].last_trade
        self.markets[$market_id].trade_ids[last_id].next_id = trade_id
        self.markets[$market_id].trade_ids[trade_id].prev_id = last_id
        self.markets[$market_id].trade_ids[trade_id].id = trade_id
        self.markets[$market_id].last_trade = trade_id
        self.markets[$market_id].total_trades += 1

        # Update available and trading amounts for asks
        if $type == ASK:
            self.balances[msg.sender][$market_id].available -= $amount
            self.balances[msg.sender][$market_id].trading += $amount
    else:
        return(TRADE_ALREADY_EXISTS)

    # Log transaction
    log(type=log_add_tx, $market_id, msg.sender, $type, $price, $amount, trade_id)
    log(type=log_add_tx, $market_id, msg.sender, $type, $price, $amount, $outcome, trade_id)

    return(trade_id)

macro remove_trade($trade_id, $market_id):
    self.trades[$trade_id].id = 0
    self.trades[$trade_id].type = 0
    self.trades[$trade_id].market = 0
    self.trades[$trade_id].amount = 0
    self.trades[$trade_id].price = 0
    self.trades[$trade_id].owner = 0
    self.trades[$trade_id].block = 0
    self.trades[$trade_id].refhash = 0

    prev_id = self.markets[$market_id].trade_ids[$trade_id].prev_id
    next_id = self.markets[$market_id].trade_ids[$trade_id].next_id
    if prev_id and next_id:
        self.markets[$market_id].trade_ids[prev_id].next_id = next_id
        self.markets[$market_id].trade_ids[next_id].prev_id = prev_id
    elif prev_id:
        self.markets[$market_id].last_trade = prev_id
        self.markets[$market_id].trade_ids[prev_id].next_id = 0

    if next_id:
        self.markets[$market_id].trade_ids[$trade_id].next_id = 0
    if prev_id:
        self.markets[$market_id].trade_ids[$trade_id].prev_id = 0
    self.markets[$market_id].trade_ids[$trade_id].id = 0
    self.markets[$market_id].total_trades -= 1


#
# Buy / Sell actions
#
def buy(amount, price, market_id):
    check_trade(amount, price, market_id)
    if price <= 0:
        return(MISSING_PRICE)

    # Calculate ETH value
    value = ((amount * price) / (self.markets[market_id].precision * 10 ^ self.markets[market_id].decimals)) * 10 ^ 18

    #
    # Check buy value
    #
    if msg.value < self.markets[market_id].minimum:
        refund()
        return(INSUFFICIENT_TRADE_AMOUNT)

    # Check msg.value and value match
    if msg.value < value:
        refund()
        return(TRADE_AMOUNT_MISMATCH)

    # Refund excess value
    if msg.value > value:
        send(msg.sender, msg.value - value)

    save_trade(BID, amount, price, market_id)

    return(FAILURE)


def sell(amount, price, market_id):
    check_trade(amount, price, market_id)
    if price <= 0:
        return(MISSING_PRICE)

    # Calculate ETH value
    value = ((amount * price) / (self.markets[market_id].precision * 10 ^ self.markets[market_id].decimals)) * 10 ^ 18

    #
    # Check sell value
    #
    if value < self.markets[market_id].minimum:
        refund()
        return(INSUFFICIENT_TRADE_AMOUNT)

    # Check balance of subcurrency
    balance = self.balances[msg.sender][market_id].available
    if balance >= amount:
        save_trade(ASK, amount, price, market_id)

    return(FAILURE)

#
# Trade
#
#Exchange(Market, outcome, sender, amount, receiver, payment) – transfers amount shares from sender to receiver for payment amount
def trade(max_amount, trade_ids:arr):
    # Set max_value from initial msg.value
    max_value = msg.value

    # Try to fulfill each trade passed
    t = 0
    while t < len(trade_ids):
        trade_id = trade_ids[t]

        # Make sure the trade has been mined, obvious HFT prevention
        if block.number <= self.trades[trade_id].block:
            return(TRADE_SAME_BLOCK_PROHIBITED)

        # Get market
        market_id = self.trades[trade_id].market
        contract = self.markets[market_id].contract
        decimals = self.markets[market_id].decimals
        precision = self.markets[market_id].precision
        minimum = self.markets[market_id].minimum

        # Get trade
        type = self.trades[trade_id].type
        amount = self.trades[trade_id].amount
        price = self.trades[trade_id].price
        owner = self.trades[trade_id].owner

        # Fill buy order
        if type == BID:

            # Get available balance
            balance = self.balances[msg.sender][market_id].available

            if balance > 0:

                # Determine fill amount
                fill = min(amount, min(balance, max_amount))

                # Calculate value
                value = ((fill * price) * 10 ^ 18) / (precision * 10 ^ decimals)

                # Check buy value
                if value < minimum:
                    if max_value > 0:
                        send(msg.sender, max_value)
                    return(INSUFFICIENT_VALUE)

                # Update trade amount or remove
                if fill < amount:
                    self.trades[trade_id].amount -= fill
                else:
                    remove_trade(trade_id, market_id)

                # Update balances
                self.balances[msg.sender][market_id].available -= fill
                self.balances[owner][market_id].available += fill

                # Transfer ETH
                send(msg.sender, value)

                # Log transaction
                log(type=log_fill_tx, market_id, msg.sender, owner, ASK, price, fill, trade_id)
            else:
                return(INSUFFICIENT_BALANCE)

        elif type == ASK:

            if max_value > 0:

                # Check sell value
                if max_value < minimum:
                    if max_value > 0:
                        send(msg.sender, max_value)
                    return(INSUFFICIENT_VALUE)

                # Calculate value of trade
                trade_value = ((amount * price) * 10 ^ 18) / (precision * 10 ^ decimals)

                # Determine fill value
                value = min(max_value, trade_value)

                # Calculate fill amount, update trade amount or remove filled trade
                if value < trade_value:
                    fill = ((value * (precision * 10 ^ decimals)) / price) / 10 ^ 18
                    self.trades[trade_id].amount -= fill
                else:
                    fill = amount
                    remove_trade(trade_id, market_id)

                # Update balances
                self.balances[owner][market_id].trading -= fill
                self.balances[msg.sender][market_id].available += fill

                # Transfer ETH
                send(owner, value)

                # Log transaction
                log(type=log_fill_tx, market_id, msg.sender, owner, BID, price, fill, trade_id)
            else:
                return(INSUFFICIENT_BALANCE)

        # Update market last price
        self.markets[market_id].last_price = price

        # Log price, fill amount, type and timestamp
        log(type=log_price, market_id, type, price, fill, block.timestamp)

        # Update max_amount and max_value
        max_amount -= fill
        max_value -= value

        # Next trade
        t += 1

    # Refund excess value
    if max_value:
        send(msg.sender, max_value)

    return(SUCCESS)
    return(amountUnfilled)

#
# Cancellation
#
def cancel(trade_id):
    # Get trade
    type = self.trades[trade_id].type
    amount = self.trades[trade_id].amount
    price = self.trades[trade_id].price
    owner = self.trades[trade_id].owner

    # Get market
    market_id = self.trades[trade_id].market
    contract = self.markets[market_id].contract
    decimals = self.markets[market_id].decimals
    precision = self.markets[market_id].precision

    # Check the owner
    if msg.sender == owner:

        # Clear the trade first
        remove_trade(trade_id, market_id)

        # Issue refunds
        if type == BID:
            # ETH refund
            value = ((amount * price) / (precision * 10 ^ decimals)) * 10 ^ 18
            send(msg.sender, value)

        elif type == ASK:
            # Subcurrency refund
            self.balances[msg.sender][market_id].trading -= amount
            self.balances[msg.sender][market_id].available += amount

        # Log cancellation
        log(type=log_cancel, market_id, msg.sender, price, amount, trade_id)

        return(SUCCESS)

    return(FAILURE)
# useful
# @return amount of shares transferred
# Error messages otherwise
    # -1: invalid outcome or you haven't traded in this market (or market doesn't exist)
    # -2: user actually doesn't have the shares
    # -3: not enough money to transfer the shares
def transferShares(branch, market, outcome, amount, to):
    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)
    receiverNumber = MARKETS.getParticipantNumber(market, to)
    # make sure outcome exists
    if (outcome==0 || MARKETS.getParticipantID(market, participantNumber) != tx.origin):
        return(-1)
    if(to != MARKETS.getParticipantID(market, receiverNumber)):
        receiverNumber = MARKETS.addParticipant(market, to)
    # remove shares from the user's account
    # if user actually doesn't have the shares, return -2
    if(MARKETS.getParticipantSharesPurchased(market, participantNumber, outcome) < amount):
        return(-2)
    MARKETS.modifyParticipantShares(branch, market, participantNumber, outcome, -amount)
    MARKETS.modifyParticipantShares(branch, market, receiverNumber, outcome, amount)

    # half of fees to market creator
    # other half go to branch
    oldCost = MARKETS.lsLmsr(market)
    MARKETS.modifyShares(market, outcome, 2^32)
    newCost = MARKETS.lsLmsr(market)
    price = 2^32*(newCost - oldCost)
    fee = MARKETS.getTradingFee(market)*price/2^64
    MARKETS.modifyShares(market, outcome, -2^32)
    if((CASH.balance(tx.origin) >= fee) && CASH.send(INFO.getCreator(market), fee/2) && CASH.send(branch, fee/2)):
        return(amount)
    else:
        return(-3)


def get_trade_ids(market_id):
    trades_count = self.markets[market_id].total_trades
    trade_id = self.markets[market_id].last_trade
    trade_ids = array(trades_count)

    i = 0
    while i < trades_count:
        trade_ids[i] = self.markets[market_id].trade_ids[trade_id].id
        trade_id = self.markets[market_id].trade_ids[trade_id].prev_id
        i = i + 1

    if trade_ids:
        return(trade_ids:arr)
    return([FAILURE]:arr)

def get_trade(id):
    trade = array(TRADE_FIELDS)

    trade[0] = self.trades[id].id
    trade[1] = self.trades[id].type
    trade[2] = self.trades[id].market
    trade[3] = self.trades[id].amount
    trade[4] = self.trades[id].price
    trade[5] = self.trades[id].owner
    trade[6] = self.trades[id].block
    trade[7] = self.trades[id].refhash
    trade[8] = self.trades[id].outcome

    if trade:
        return(trade:arr)
    return([FAILURE]:arr)
