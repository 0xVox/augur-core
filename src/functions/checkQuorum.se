# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches

import expiringEvents

# returns whether a quorem has a matured event
# if there aren't enough events in a vote period eventsexpdate, push them to the current period and increment the vote period
# @return 0 if fail, 1 if success
def checkQuorum(branch):
    currentVotePeriod = branches.getVotePeriod(branch)
    currentPeriod = (block.number / branches.getPeriodLength(branch))
    # provided the currentPeriod is >=2 periods past the things we're going to rbcr on
    # we can then conclude it has matured && people have had time to vote
    matured = 0
    enoughEvents = 0
    enoughUpcoming = 0
    if (currentPeriod >= (currentVotePeriod+2)):
        matured = 1

    # min future decisions at stake - 200 - else branch stalls (do same thing we do if min ballot/event size isn't met,
    # push events into current period and hopefully more people will create decisions so it can actually be voted on, else repeat)
    upcomingDecisions = 0
    b = currentPeriod
    while b < (currentPeriod+100):
        upcomingDecisions += expiringEvents.getNumberEvents(branch, b)
        b += 1
    # normally < 30 and < 500 respectively, lowered for testing
    if ((expiringEvents.getNumberEvents(branch, currentVotePeriod) < 5 || upcomingDecisions < 10) && matured):
        branches.incrementPeriod(branch)
        branches.setStep(branch, 0)
        currentVotePeriod = branches.getVotePeriod(branch)
        expiringEvents.moveEventsToCurrentPeriod(branch, currentVotePeriod, currentPeriod)
    else:
        enoughEvents = 1
        enoughUpcoming = 1

    if(matured && enoughEvents && enoughUpcoming):
        return(1)
    else:
        return(0)