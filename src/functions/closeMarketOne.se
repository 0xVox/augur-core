import markets as MARKETS
import cash as CASH
inset('refund.se')

# mutex result non scalar not .5
# one winning outcome
def oneOutcome(market, winningOutcome, sender, categoricalPointFive, numOutcomes):
    participantNumber = MARKETS.getParticipantNumber(market, sender)
    cumScale = MARKETS.getCumScale(market)
    if(categoricalPointFive):
        i = 0
        while(i < numOutcomes):
            sharesOwned = MARKETS.getParticipantSharesPurchased(market, participantNumber, i+1)
            MARKETS.modifyParticipantShares(market, participantNumber, i+1, -sharesOwned)
            CASH.subtractCash(market, sharesOwned*MARKETS.getCumScale(market)/(numOutcomes*ONE))
            CASH.addCash(participant, sharesOwned*MARKETS.getCumScale(market)/(numOutcomes*ONE))
            i+=1
    else:
        # distribute cashcoin to the people who won money by holding winning shares
        sharesOwned = MARKETS.getParticipantSharesPurchased(market, participantNumber, winningOutcome)
        participant = MARKETS.getParticipantID(market, participantNumber)
        MARKETS.modifyParticipantShares(market, participantNumber, winningOutcome, -sharesOwned)
        CASH.subtractCash(market, sharesOwned*cumScale/ONE)
        CASH.addCash(participant, sharesOwned*cumScale/ONE)
    return(1)