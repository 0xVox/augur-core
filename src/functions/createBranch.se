# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

### Allows creation of a new branch

import branches as BRANCHES
import info as INFO
import reporting as REPORTING
import mutex as MUTEX
extern subcurrency: [allowance:[int256,int256]:int256, approve:[int256,int256]:int256, balance:[]:int256, balanceOf:[int256]:int256, transfer:[int256,int256]:int256, transferFrom:[int256,int256,int256]:int256]
inset('../data_api/refund.se')
inset('../data_api/float.se')

data ethContract

macro MAX_FEE: 2 ** 62

macro checkSubcurrencyIsValid(contract):
    allowance = $contract.allowance(msg.sender, self)
    balance = $contract.balanceOf(self)
    transfer = $contract.transfer(msg.sender, 0)
    transferFrom = $contract.transferFrom(self, msg.sender, 0)
    approve = $contract.approve(self, 0)

def init():
    # whatever the eth subcurrency contract is goes here
    self.ethContract = 0

# Create a new branch given a parent branch - a branch is essentially a fork of rep where new markets can be created
# period length is given in seconds
# @return branch if success
# error messages otherwise
    # -1: bad input or parent doesn't exist
    # -2: branch already exists
def createSubbranch(description:str, periodLength, parent, fxpMinTradingFee, oracleOnly):
    refund()
    if(MUTEX.getMutex() && !mutexWhitelisted()):
        throw()

    if(!mutexWhitelisted()):
        MUTEX.setMutex()

    checkBranchCreationPreconditions()
    parentPeriod = BRANCHES.getVotePeriod(parent)
    branchInfo = string(7 * 32 + len(description))
    branchInfo[0] = msg.sender
    # creation fee
    branchInfo[1] = 47 * ONE
    # length of voting cycle
    branchInfo[2] = periodLength
    branchInfo[3] = block.timestamp
    branchInfo[4] = parent
    branchInfo[5] = fxpMinTradingFee
    branchInfo[6] = oracleOnly
    mcopy(branchInfo + 7 * 32, description, len(description))
    # people can check that these characteristics hash to the ID if they want
    # people can hand a friend their new branch hash and characteristics and say, "don't trust me? check"
    branch = ripemd160(branchInfo, chars = len(branchInfo))
    currentVotePeriod = (block.timestamp / periodLength) - 1
    # provided event doesn't already exist, create it
    wallet = 0
    if(INFO.getCreator(branch)):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(-2)
    checkSubcurrencyIsValid(self.ethContract)
    wallet = create('wallet.se')
    if(!wallet.initialize(self.ethContract)):
        throw()
    BRANCHES.initializeBranch(branch, currentVotePeriod, periodLength, fxpMinTradingFee, oracleOnly, parentPeriod, parent, 47 * ONE, self.ethContract, wallet)
    # pay creation fee, initialize branch info
    feePaid = self.ethContract.transferFrom(msg.sender, BRANCHES.getWallet(parent, self.ethContract), 47 * ONE)
    if(!feePaid or !INFO.setInfo(branch, description, msg.sender, 47 * ONE, 0, 0) or !REPORTING.setInitialReporters(branch)):
        throw()
    if(!mutexWhitelisted()):
        MUTEX.unsetMutex()
    return(branch)

# make minimum period len 24 hr
macro checkBranchCreationPreconditions():
    if(periodLength <= 0 or !BRANCHES.getPeriodLength(parent) or !len(description)):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(-1)
    if(fxpMinTradingFee <= 0 or fxpMinTradingFee > MAX_FEE or (oracleOnly != 0 and oracleOnly != 1)):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        return(-1)
