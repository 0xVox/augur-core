# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

### Allows users to take orders off the book (i.e. fill trades)

# Trade scenarios:
    # Note: all [] scenarios are typical, if a user somehow gets an extra complete set it'll also be sold when doing a trade, typically complete sets only sold when closing out a position or closing out a short

    # - Buying and have all but one and bidding, seller doesn't have outcome and is taking [complete set fee charged on buyer b/c selling complete sets].

    # - Buying and have all but one and bidding, seller has outcome and is taking [complete set fee charged on buyer].

    # - Buying and don't own anything and bidding, seller doesn't have outcome and is taking [no complete set fee charged b/c none sold].

    # - Buying and don't own anything and bidding, seller has outcome and is taking [no complete set fee charged b/c none sold].

    # - Buying and have all but one and taking, seller doesn't have outcome and is asking [complete set fee charged on buyer].

    # - Buying and have all but one and taking, seller has outcome and is asking [complete set fee charged on buyer].

    # - Buying and don't own anything and taking, seller doesn't have outcome and is asking [no complete set fee charged].

    # - Buying and don't own anything and taking, seller has outcome and is asking [no complete set fee charged].

import branches as BRANCHES
import info as INFO
import markets as MARKETS
import events as EVENTS
import trades as TRADES
import expiringEvents as EXPEVENTS
import mutex as MUTEX
extern subcurrency: [allowance:[uint256,uint256]:uint256, approve:[uint256,uint256]:uint256, balance:[]:uint256, balanceOf:[uint256]:uint256, transfer:[uint256,uint256]:uint256, transferFrom:[uint256,uint256,uint256]:uint256]
inset('../data_api/refund.se')
inset('logReturn.se')
inset('../data_api/float.se')

event logPrice(market:indexed, sender:indexed, owner:indexed, type, price, amount, timestamp, tradeid, outcome, askerSharesFilled, askerMoneyFilled, bidderSharesFilled, bidderMoneyFilled)

event tradeLogReturn(returnValue)
event tradeLogArrayReturn(returnArray: arr)

macro logArrayReturn($a):
    log(type=tradeLogArrayReturn, $a)
    return($a: arr)

macro ONE_POINT_FIVE: 1500000000000000000

macro MIN_TRADE_VALUE: 10000000000

macro ONEPOINTFIVE: 1500000000000000000
# Trade types
macro BID: 1
macro ASK: 2
# Field counts
macro TRADE_FIELDS: 10
# Boolean success/failure
macro SUCCESS: 1
# Error codes
macro INSUFFICIENT_BALANCE: -4
macro TRADE_SAME_BLOCK_PROHIBITED: -5

# removes a trade from the book
macro removeTrade($tradeID, $market):
    TRADES.removeTrade($tradeID)
    MARKETS.removeTradeFromMarket($market, $tradeID)

# 
# Trade [allows a user to pick up/fill orders off the book]
# 
# Errors:
    # 0: trade doesn't exist
    # -1: bad trade hash
    # -2: must buy at least .00000001 in
    # -3: can't pick up your own trade
    # -4: insufficient balance
    # -5: trade in same block prohibited
# amountTakerWants is amount of shares the taker wants to fill
# picks orders off the book
# @return fxp
def trade(tradeID, amountTakerWants):
    refund()
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()
    if(amountTakerWants <= 0):
        throw()

    tradeInfo = array(2)
    tradeInfo[0] = orderID
    tradeInfo[1] = amountTakerWants
    tradeHash = sha3(tradeInfo, items = 2)
    if(TRADES.checkHash(tradeHash, msg.sender) == -1):
        MUTEX.unsetMutex()
        logArrayReturn([-1])
    # Get trade
    trade = array(TRADE_FIELDS)
    trade = TRADES.getTrade(tradeID, outitems = TRADE_FIELDS)
    if(!trade[0]):
        MUTEX.unsetMutex()
        logArrayReturn([0])
    type = trade[1]
    market = trade[2]
    creator = INFO.getCreator(market)
    amount = trade[3]
    price = trade[4]
    owner = trade[5]
    outcome = trade[7]
    moneyEscrowed = trade[8]
    sharesEscrowed = trade[9]
    checkTradePreconditions()
    branch = MARKETS.getBranch(market)
        
    cumulativeScale = MARKETS.getCumulativeScale(market)
    maxValue = EVENTS.getMaxValue(MARKETS.getMarketEvent($market, 0))
    minValue = EVENTS.getMinValue(MARKETS.getMarketEvent($market, 0))

    # Fill buy order
    if(type == BID):
        fillBid()
    elif(type == ASK):
        fillAsk()
    else:
        throw()

    # Log price, fill amount, type and timestamp
    MARKETS.setPrice(market, outcome, price)
    MUTEX.unsetMutex()
    logArrayReturn([SUCCESS, amountTakerWants])

macro checkTradePreconditions():
    if(owner == msg.sender):
        MUTEX.unsetMutex()
        logArrayReturn([-3])
    # Make sure the trade has been mined, obvious HFT prevention
    if(block.number <= trade[6]):
        MUTEX.unsetMutex()
        logArrayReturn([TRADE_SAME_BLOCK_PROHIBITED])


# Filling a bid [aka selling shares]
# Users need to have approved markets to spend their money, simulate trade client side to check in case an order is invalid due to someone not having approved
# Scenarios:
    # Asker has maxValue - price and expects complete set minus the one theyre selling
    # Or asker has shares and expects to be paid price - minValue for them
    # Bidder owns all shares except the one theyre buying and has escrowed them and wants to pay price - minValue for the share and then sell the complete set for range thus getting maxValue - price at the end
    # Or bidder has escrowed price - minValue for their shares
macro fillBid():
    sumOfFills = 0
    # all in shares including the money here
    askerSharesFilled = 0
    askerMoneyFilled = 0
    bidderSharesFilled = 0
    bidderMoneyFilled = 0

    if(sharesEscrowed):
        fill = min(sharesEscrowed, amountTakerWants)
        amountTakerWants = safeSub(amountTakerWants, fill)
        sumOfFills = safeAdd(sumOfFills, fill)
        bidderSharesFilled = fill
        # send shares [amount is fill] escrowed by bidder back to bidder
        i = 1
        while i < MARKETS.getNumOutcomes(market):
            if(i != outcome):
                MARKETS.modifyParticipantShares(market, owner, i, fill, 0)
            i += 1
    if(amountTakerWants && moneyEscrowed):
        fill = min(safeFxpDiv(moneyEscrowed, safeSub(price, minValue)), amountTakerWants)
        amountTakerWants = safeSub(amountTakerWants, fill)
        sumOfFills = safeAdd(sumOfFills, fill)
        bidderMoneyFilled = fill

    remainderToFill = sumOfFills
    # Calculate value
    value = safeFxpMul(sumOfFills, price)
    # must trade at least 0.00000001 in value
    if(value < MIN_TRADE_VALUE):
        throw()

    balance = MARKETS.getParticipantSharesPurchased(market, msg.sender, outcome)        
    # msg.sender owns shares of outcome
    if(balance):
        fill = min(balance, remainderToFill)
        askerSharesFilled = fill
        remainderToFill = safeSub(remainderToFill, fill)
    if(remainderToFill):
        # issue asker complete sets for remainder amount and dont charge yet
        i = 1
        while i < MARKETS.getNumOutcomes($market):
            MARKETS.modifyShares(market, i, remainderToFill)
            MARKETS.modifyParticipantShares(market, msg.sender, i, remainderToFill, 0)
            i += 1
        askerMoneyFilled = remainderToFill
        remainderToFill = safeSub(remainderToFill, remainderToFill)
        # if still before voting period has started count the share value
        notVotingOnYet = BRANCHES.getVotePeriod(branch) < MARKETS.getTradingPeriod(market)
        if(notVotingOnYet):
            MARKETS.modifySharesValue(market, safeFxpMul(askerMoneyFilled, cumulativeScale))
            fee = safeFxpMul(safeFxpMul(MARKETS.getTradingFee(market), askerMoneyFilled), cumulativeScale)
            feesInWei = safeFxpMul(BRANCHES.getCurrencyRate(branch, INFO.getCurrency(market)), safeDiv(fee, 2))
            if(!feesInWei):
                throw()
            MARKETS.addFees(market, feesInWei)
            EXPEVENTS.adjustPeriodFeeValue(branch, MARKETS.getTradingPeriod(market), feesInWei)

    # send bidder shares from asker
    MARKETS.modifyParticipantShares(market, msg.sender, outcome, -sumOfFills, 1)
    MARKETS.modifyParticipantShares(market, owner, outcome, sumOfFills, 0)
    sellBidderCompleteSetsIfTheyHaveAnyAndGiveMoneyToBidder()
    # transfer (price - minValue) * bidderSharesFilled to market from bidder since market hasnt been paid yet after complete sets selling
    if(bidderSharesFilled && !INFO.getCurrency(market).transferFrom(owner, market, safeFxpMul(safeSub(price, minValue), bidderSharesFilled))):
        throw()
    # Transfer money from person who bid to the person here who is selling/asker [bidder has already sent/escrowed the cash to/with the market when submitting bid so this comes from the market]
    if(!INFO.getWallet(market).transfer(msg.sender, safeFxpMul(safeSub(price, minValue), sumOfFills))):
        throw()
    # transfer range * askerMoneyFilled to the market from asker for the amount of shares in askerMoneyFilled
    if(askerMoneyFilled && !INFO.getCurrency(market).transferFrom(msg.sender, market, safeFxpMul(cumulativeScale, askerMoneyFilled))):
        throw()
    
    MAX_INT = 57896044618658097711785492504343953926634992332820282019728792003956564819967L
    sharesHeld = MAX_INT
    i = 1
    while i < MARKETS.getMarketNumOutcomes(market):
        sharesHeld = min(MARKETS.getParticipantSharesPurchased(market, msg.sender, i), sharesHeld)
        i += 1
    # Sell the asker's [msg.sender] complete sets if they have any
    if(sharesHeld):
        COMPLETESETS.sellCompleteSets(market, sharesHeld, call = delegate)
    
    # Update trade amount or remove
    if(sumOfFills < amount):
        TRADES.fillTrade(tradeIDs[t], sumOfFills, safeFxpMul(bidderMoneyFilled, safeSub(price, minValue)), bidderSharesFilled)
    else:
        removeTrade(tradeIDs[t], market)

    # Log transaction [ASK b/c it's filling a bid so from trader's perspective they're asking]
    log(type = logPrice, market, msg.sender, owner, ASK, price, sumOfFills, block.timestamp, tradeID, outcome, askerSharesFilled, askerMoneyFilled, bidderSharesFilled, bidderMoneyFilled)



# Filling an ask [aka buying shares]
# Scenarios:
    # Asker either escrowed maxValue - price and expects complete set minus the one they're selling
    # Or asker had shares and escrowed them and expects to be paid price - minValue for them
    # Bidder owns all shares except the one they're buying and will pay price - minValue for the shares they're buying
    # Or bidder will pay price - minValue for their shares
macro fillAsk():
    sumOfFills = 0
    # all in shares including the money here
    askerSharesFilled = 0
    askerMoneyFilled = 0
    bidderSharesFilled = 0
    bidderMoneyFilled = 0

    if(sharesEscrowed):
        fill = min(sharesEscrowed, amountTakerWants)
        amountTakerWants = safeSub(amountTakerWants, fill)
        sumOfFills = safeAdd(sumOfFills, fill)
        askerSharesFilled = fill

    if(amountTakerWants && moneyEscrowed):
        fill = min(safeFxpDiv(moneyEscrowed, safeSub(maxValue, price)), amountTakerWants)
        amountTakerWants = safeSub(amountTakerWants, fill)
        sumOfFills = safeAdd(sumOfFills, fill)
        askerMoneyFilled = fill
        # issue asker complete sets for fill amount and dont charge because already paid
        i = 1
        while i < MARKETS.getNumOutcomes(market):
            if(i != outcome):
                MARKETS.modifyShares(market, i, fill)
                MARKETS.modifyParticipantShares(market, owner, i, fill, 0)
            i += 1
        # if still before voting period has started count the share value
        notVotingOnYet = BRANCHES.getVotePeriod(branch) < MARKETS.getTradingPeriod(market)
        if(notVotingOnYet):
            MARKETS.modifySharesValue(market, safeFxpMul(askerMoneyFilled, cumulativeScale))
            fee = safeFxpMul(safeFxpMul(MARKETS.getTradingFee(market), askerMoneyFilled), cumulativeScale)
            feesInWei = safeFxpMul(BRANCHES.getCurrencyRate(branch, INFO.getCurrency(market)), safeDiv(fee, 2))
            if(!feesInWei):
                throw()
            MARKETS.addFees(market, feesInWei)
            EXPEVENTS.adjustPeriodFeeValue(branch, MARKETS.getTradingPeriod(market), feesInWei)

    remainderToFill = sumOfFills
    # Calculate value
    value = safeFxpMul(sumOfFills, price)
    # must trade at least 0.00000001 in value
    if(value < MIN_TRADE_VALUE):
        MUTEX.unsetMutex()
        throw()

    # Transfer cash from user to person who has ask order
    payMaker = INFO.getCurrency(market).transferFrom(msg.sender, owner, valueToSpend)
    if(!payMaker):
        throw()
                
    if(msg.sender owns shares of all outcomes besides the one theyre buying):
        fill = min(sharesOwned, remainderToFill)
        bidderSharesFilled = fill
        remainderToFill = safeSub(remainderToFill, fill)

    if(remainderToFill):
        bidderMoneyFilled = remainderToFill
        remainderToFill = safeSub(remainderToFill, remainderToFill)

    # send bidder sumOfFills shares by just creating them and giving them to them
    MARKETS.modifyParticipantShares(market, msg.sender, outcome, sumOfFills, 1)

    
    MAX_INT = 57896044618658097711785492504343953926634992332820282019728792003956564819967L
    sharesHeld = MAX_INT
    i = 1
    while i < MARKETS.getMarketNumOutcomes(market):
        sharesHeld = min(MARKETS.getParticipantSharesPurchased(market, msg.sender, i), sharesHeld)
        i += 1
    # Sell the bidder's [msg.sender] complete sets if they have any
    if(sharesHeld):
        COMPLETESETS.sellCompleteSets(market, sharesHeld, call = delegate)

    # Transfer (price - minValue) * (bidderSharesFilled + bidderMoneyFilled) to market from bidder since market hasnt been paid yet
    if((bidderMoneyFilled or bidderSharesFilled) and !INFO.getCurrency(market).transferFrom(msg.sender, market, safeFxpMul(safeSub(price, minValue), safeAdd(bidderSharesFilled, bidderMoneyFilled)))):
        throw()

    # Transfer (price - minValue) * askerSharesFilled from the market to the asker, dont need to send for askerMoneyFilled because asker only escrowed maxValue - price and thus has "already been paid" for those shares.  Note: bidder has already sent their money to the market so this money comes from the market    
    if(askerSharesFilled and !INFO.getWallet(market).transfer(owner, safeFxpMul(safeSub(price, minValue), askerSharesFilled))):
        throw()

    sellAskerCompleteSetsIfTheyHaveAnyAndGiveMoneyToAsker()

    # Update trade amount or remove
    if(sumOfFills < amount):
        TRADES.fillTrade(tradeIDs[t], sumOfFills, safeFxpMul(askerMoneyFilled, safeSub(maxValue, price)), askerSharesFilled)
    else:
        removeTrade(tradeIDs[t], market)

    # Log transaction [BID b/c it's filling an ask so from trader's perspective they're bidding]
    log(type = logPrice, market, msg.sender, owner, BID, price, sumOfFills, block.timestamp, tradeID, outcome, askerSharesFilled, askerMoneyFilled, bidderSharesFilled, bidderMoneyFilled)


macro sellBidderCompleteSetsIfTheyHaveAnyAndGiveMoneyToBidder():
    MAX_INT = 57896044618658097711785492504343953926634992332820282019728792003956564819967L
    sharesHeld = MAX_INT
    i = 1
    while i < MARKETS.getMarketNumOutcomes(market):
        sharesHeld = min(MARKETS.getParticipantSharesPurchased(market, owner, i), sharesHeld)
        i += 1
    if(sharesHeld):
        i = 1
        while i < MARKETS.getMarketNumOutcomes(market):
            MARKETS.modifyShares(market, i, -sharesHeld)
            MARKETS.modifyParticipantShares(market, owner, i, -sharesHeld, 0)
        cost = safeFxpMul(sharesHeld, cumulativeScale)
        # send funds from the market to the user acc.
        fee = safeFxpMul(safeFxpMul(MARKETS.getTradingFee(market), sharesHeld), cumulativeScale)
        if(!INFO.getWallet(market).transfer(owner, safeSub(cost, fee))):
            throw()
        # if still before voting period has started count it in the share value for the period and market to target # of reporters to be higher in markets w/ more outstanding value
        notVotingOnYet = BRANCHES.getVotePeriod(branch) < MARKETS.getTradingPeriod(market)
        if(notVotingOnYet):
            MARKETS.modifySharesValue(market, safeFxpMul(-sharesHeld, cumulativeScale))
                currency = INFO.getCurrency(market)
        if(!INFO.getWallet(market).transfer(BRANCHES.getWallet(branch, currency), safeDiv(fee, 2)) or !INFO.getWallet(market).transfer(INFO.getCreator(market), safeDiv(fee, 2))):
            throw()


macro sellAskerCompleteSetsIfTheyHaveAnyAndGiveMoneyToAsker():
    MAX_INT = 57896044618658097711785492504343953926634992332820282019728792003956564819967L
    sharesHeld = MAX_INT
    i = 1
    while i < MARKETS.getMarketNumOutcomes(market):
        sharesHeld = min(MARKETS.getParticipantSharesPurchased(market, owner, i), sharesHeld)
        i += 1
    if(sharesHeld):
        i = 1
        while i < MARKETS.getMarketNumOutcomes(market):
            MARKETS.modifyShares(market, i, -sharesHeld)
            MARKETS.modifyParticipantShares(market, owner, i, -sharesHeld, 0)
        cost = safeFxpMul(sharesHeld, cumulativeScale)
        # send funds from the market to the user acc.
        fee = safeFxpMul(safeFxpMul(MARKETS.getTradingFee(market), sharesHeld), cumulativeScale)
        if(!INFO.getWallet(market).transfer(owner, safeSub(cost, fee))):
            throw()
        # if still before voting period has started count it in the share value for the period and market to target # of reporters to be higher in markets w/ more outstanding value
        notVotingOnYet = BRANCHES.getVotePeriod(branch) < MARKETS.getTradingPeriod(market)
        if(notVotingOnYet):
            MARKETS.modifySharesValue(market, safeFxpMul(-sharesHeld, cumulativeScale))
        if(!INFO.getWallet(market).transfer(BRANCHES.getWallet(branch, currency), safeDiv(fee, 2)) or !INFO.getWallet(market).transfer(INFO.getCreator(market), safeDiv(fee, 2))):
            throw()
