# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

### Allows users to take orders off the book and short sell

import branches as BRANCHES
import info as INFO
import markets as MARKETS
import trades as TRADES
import expiringEvents as EXPEVENTS
import mutex as MUTEX
extern subcurrency: [allowance:[uint256,uint256]:uint256, approve:[uint256,uint256]:uint256, balance:[]:uint256, balanceOf:[uint256]:uint256, transfer:[uint256,uint256]:uint256, transferFrom:[uint256,uint256,uint256]:uint256]
inset('../data_api/refund.se')

event logPrice(market:indexed, sender:indexed, owner:indexed, type, price, amount, timestamp, tradeid, outcome)
event logPriceShort(market:indexed, sender:indexed, owner:indexed, type, price, amount, timestamp, tradeid, outcome)

macro ONE_POINT_FIVE: 27670116110564327424

macro MIN_TRADE_VALUE: 184467440738

# Trade types
macro BID: 1
macro ASK: 2
macro SHORT_OFFER: 3
# Field counts
macro TRADE_FIELDS: 10
# Boolean success/failure
macro SUCCESS: 1
# Error codes
macro INSUFFICIENT_BALANCE: -4
macro TRADE_SAME_BLOCK_PROHIBITED: -5

# removes a trade from the book
macro removeTrade($tradeID, $market):
    TRADES.removeTrade($tradeID)
    MARKETS.removeTradeFromMarket($market, $tradeID)

# 
# Trade [allows a user to pick up/fill orders off the book]
# 
# Errors:
    # 0: trade doesn't exist
    # -1: bad trade hash
    # -2: must buy at least .00000001 in
    # -3: can't pick up your own trade
    # -4: insufficient balance
    # -5: trade in same block prohibited
# max value is max money to spend to buy filling ask orders
# max amount is max shares to sell filling bid orders
# 500k gas cost
# picks orders off the book
# needs to continue if a trade is filled / removed by the time we get here, not return, issues with insufficient balance ending when it should continue filling other order types
# @return fxp
def trade(fxpMaxValue, fxpMaxAmount, tradeIDs: arr):
    refund()
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()

    i = 0
    trades = 0
    while(i < len(tradeIDs)):
        trades += tradeIDs[i]
        i += 1
    tradeInfo = array(3)
    tradeInfo[0] = trades
    tradeInfo[1] = fxpMaxAmount
    tradeInfo[2] = fxpMaxValue
    tradeHash = sha3(tradeInfo, items = 3)
    if(TRADES.checkHash(tradeHash, msg.sender) == -1):
        MUTEX.unsetMutex()
        return([-1]: arr)
    # Try to fulfill each trade passed
    t = 0
    while(t < len(tradeIDs)):
        # Get trade
        trade = array(TRADE_FIELDS)
        trade = TRADES.getTrade(tradeIDs[t], outitems = TRADE_FIELDS)
        if(!trade[0]):
            MUTEX.unsetMutex()
            return([0]: arr)
        type = trade[1]
        market = trade[2]
        creator = INFO.getCreator(market)
        amount = trade[3]
        price = trade[4]
        owner = trade[5]
        outcome = trade[7]
        fill = 0
        checkTradePreconditions()
        branch = MARKETS.getBranch(market)
        
        cumulativeScale = MARKETS.getCumulativeScale(market)

        # Fill buy order
        if(type == BID):
            fillBid()
        elif(type == ASK):
            fillAsk()
        elif(type == SHORT_OFFER):
            fillShortOffer()
        else:
            throw()

        # Log price, fill amount, type and timestamp
        MARKETS.setPrice(market, outcome, price)
        # Next trade
        t += 1
    MUTEX.unsetMutex()
    return([SUCCESS, fxpMaxValue, fxpMaxAmount]: arr)

# Allows a user to "short" by buying n complete sets and selling n shares of the unwanted outcome to a bid on the book in one tx
# Example:
    # buyer gives up say 20
    # complete set cost is say 100
    # market should lose 20 from buyer's escrowed money
    # market should gain 100 from complete set
    # person short selling should give the market 80 [complete set cost less shares sold]
# Errors:
    # 0: trade doesn't exist
    # -1: invalid trade hash/commitment
    # -2: not a large enough trade
    # -3: can't pickup your own trade
    # -4: insufficient balance
    # -5: trade in same block prohibited
    # -6: must be a bid, not an ask
# @return fxp
def shortSell(buyerTradeIDs: arr, fxpMaxAmount):
    refund()
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()
    i = 0
    trades = 0
    while(i < len(buyerTradeIDs)):
        trades += buyerTradeIDs[i]
        i += 1
    tradeInfo = array(3)
    tradeInfo[0] = trades
    tradeInfo[1] = fxpMaxAmount
    tradeInfo[2] = 0
    tradeHash = sha3(tradeInfo, items = 3)
    if(TRADES.checkHash(tradeHash, msg.sender) == -1):
        MUTEX.unsetMutex()
        return([-1]: arr)
    # Try to fulfill each trade passed
    t = 0
    while(t < len(buyerTradeIDs)):
        # Get trade
        trade = array(TRADE_FIELDS)
        trade = TRADES.getTrade(buyerTradeIDs[t], outitems = TRADE_FIELDS)
        if(!trade[0]):
            MUTEX.unsetMutex()
            return([0]: arr)
        # Get market
        type = trade[1]
        if(type != BID):
            MUTEX.unsetMutex()
            return([-6]: arr)
        market = trade[2]
        origAmount = trade[3]
        price = trade[4]
        owner = trade[5]
        outcome = trade[7]
        branch = MARKETS.getBranch(market)
        checkTradePreconditions()
        fillShort()
        MARKETS.setPrice(market, outcome, price)
        t += 1
    MUTEX.unsetMutex()
    return([SUCCESS, fxpMaxAmount, fill, price]: arr)

macro checkTradePreconditions():
    if(owner == msg.sender):
        MUTEX.unsetMutex()
        return([-3]: arr)
    # Make sure the trade has been mined, obvious HFT prevention
    if(block.number <= trade[6]):
        MUTEX.unsetMutex()
        return([TRADE_SAME_BLOCK_PROHIBITED]: arr)

macro fillBid():
    # Get available balance of shares
    balance = MARKETS.getParticipantSharesPurchased(market, msg.sender, outcome)
    if(balance <= 0 or fxpMaxAmount <= 0):
        MUTEX.unsetMutex()
        return([INSUFFICIENT_BALANCE]: arr)
    # Determine fill amount
    fill = min(amount, min(balance, fxpMaxAmount))
    # Calculate value
    value = (fill * price) / ONE
    # must trade at least 0.00000001 in value
    if(value < MIN_TRADE_VALUE):
        MUTEX.unsetMutex()
        return([-2]: arr)
    # Update trade amount or remove
    if(fill < amount):
        TRADES.fillTrade(tradeIDs[t], fill)
    else:
        removeTrade(tradeIDs[t], market)
    # Update balances
    MARKETS.modifyParticipantShares(market, msg.sender, outcome, -fill, 1)
    MARKETS.modifyParticipantShares(market, owner, outcome, fill, 0)
    # Transfer cash from person who bid to the person here who is selling [bidder has already sent/escrowed the cash to/with the market when submitting bid]

    paySender = INFO.getWallet(market).transfer(msg.sender, value)
    if(!paySender):
        throw()
    # Update fxpMaxAmount
    fxpMaxAmount -= fill
    # Log transaction [ASK b/c it's filling a bid so from trader's perspective they're asking]
    log(type = logPrice, market, msg.sender, owner, ASK, price, fill, block.timestamp, tradeIDs[t], outcome)
    
macro fillAsk():
    balance = INFO.getCurrency(market).balanceOf(msg.sender)
    totalTradeCost = amount * price / ONE
    # trade value to spend is equal to min(moneyUserOwns, moneyUserWantsToSpend, valueOfTradeThatIsUnfilled)
    valueToSpend = min(totalTradeCost, min(fxpMaxValue, balance))
    # Determine fill amount
    fill = valueToSpend * ONE / price
    if(valueToSpend < MIN_TRADE_VALUE):
        MUTEX.unsetMutex()
        return([INSUFFICIENT_BALANCE]: arr)
    # Update trade amount or remove filled trade
    if(fill < amount):
        TRADES.fillTrade(tradeIDs[t], fill)
    else:
        removeTrade(tradeIDs[t], market)
    # Update balances [user asking has already gotten rid of shares in escrow, just need to add them to the buyer]
    MARKETS.modifyParticipantShares(market, msg.sender, outcome, fill, 1)

    # Transfer cash from user to person who has ask order
    payMaker = INFO.getCurrency(market).transferFrom(msg.sender, owner, valueToSpend)
    if(!payMaker):
        throw()
                
    # Update fxpMaxValue
    fxpMaxValue -= valueToSpend
    # Log transaction [BID b/c it's filling an ask so from trader's perspective they're bidding]
    log(type = logPrice, market, msg.sender, owner, BID, price, fill, block.timestamp, tradeIDs[t], outcome)
    
macro fillShort():
    # calculate cost
    creator = INFO.getCreator(market)
    cumulativeScale = MARKETS.getCumulativeScale(market)
    amount = min(origAmount, fxpMaxAmount)
    if(amount <= 0):
        MUTEX.unsetMutex()
        return([INSUFFICIENT_BALANCE]: arr)

    cost = amount * cumulativeScale / ONE - (amount * price / ONE)
    if(INFO.getCurrency(market).balanceOf(msg.sender) < cost):
        MUTEX.unsetMutex()
        return([INSUFFICIENT_BALANCE]: arr)
    if(amount * price / ONE < MIN_TRADE_VALUE):
        MUTEX.unsetMutex()
        return([-2]: arr)
    
    numOutcomes = MARKETS.getMarketNumOutcomes(market)

    i = 1
    # send shares of the event to user address, buying complete sets
    while(i <= numOutcomes):
        MARKETS.modifyShares(market, i, amount)
        MARKETS.modifyParticipantShares(market, msg.sender, i, amount, 0)
        i += 1
    if(BRANCHES.getVotePeriod(branch) < MARKETS.getTradingPeriod(market)):
        MARKETS.modifySharesValue(market, amount * cumulativeScale / ONE)
        EXPEVENTS.adjustPeriodShareValueOutstanding(branch, MARKETS.getTradingPeriod(market), amount * cumulativeScale / ONE)
    # send money from user acc. to market address/account
    # cost for shares
    payTakerCost = INFO.getCurrency(market).transferFrom(msg.sender, market, cost)
    if(!payTakerCost):
        throw()

    # Fill buy order [short selling the outcome user doesn't want]
    # Determine fill amount
    fill = amount
    # Update trade amount or remove
    if(fill < origAmount):
        TRADES.fillTrade(buyerTradeIDs[t], fill)
    else:
        removeTrade(buyerTradeIDs[t], market)
    # Update balances
    MARKETS.modifyParticipantShares(market, msg.sender, outcome, -fill, 1)
    MARKETS.modifyParticipantShares(market, owner, outcome, fill, 0)

    fxpMaxAmount -= fill
    # Log transaction [ASK b/c it's filling a bid so from trader's perspective they're asking]
    log(type = logPriceShort, market, msg.sender, owner, ASK, price, fill, block.timestamp, buyerTradeIDs[t], outcome)

macro fillShortOrder():
    balance = INFO.getCurrency(market).balanceOf(msg.sender)
    totalTradeCost = amount * price / ONE
    # trade value to spend is equal to min(moneyUserOwns, moneyUserWantsToSpend, valueOfTradeThatIsUnfilled)
    valueToSpend = min(totalTradeCost, min(fxpMaxValue, balance))
    # Determine fill amount
    fill = valueToSpend * ONE / price
    if(valueToSpend < MIN_TRADE_VALUE):
        MUTEX.unsetMutex()
        return([INSUFFICIENT_BALANCE]: arr)
    # Update trade amount or remove filled trade
    if(fill < amount):
        TRADES.fillTrade(tradeIDs[t], fill)
    else:
        removeTrade(tradeIDs[t], market)

    # Transfer cash from user to market - purchaser sends price*amount to the market and gets outcome n
    payMaker = INFO.getCurrency(market).transferFrom(msg.sender, market, valueToSpend)
    if(!payMaker):
        throw()
    # Update balances
    MARKETS.modifyParticipantShares(market, msg.sender, outcome, fill, 1)

    
	# account for fees here even though paid upon selling complete sets / resolution so we can assign reporters appropriately [since we're issuing a complete set here to fulfill this trade]
    fee = MARKETS.getTradingFee(market) * fxpAmount / ONE * cumulativeScale / ONE
    MARKETS.addFees(market, fee / 2)
    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    i = 1
    # send shares of the event to user address, buying complete sets - person who placed the order gets amount shares of n-1 outcomes
    while(i <= numOutcomes):
    	if(i != outcome):
	        MARKETS.modifyShares(market, i, fill)
    	    MARKETS.modifyParticipantShares(market, msg.sender, i, fill, 0)
        i += 1
    if(BRANCHES.getVotePeriod(branch) < MARKETS.getTradingPeriod(market)):
        MARKETS.modifySharesValue(market, amount * cumulativeScale / ONE)
        EXPEVENTS.adjustPeriodShareValueOutstanding(branch, MARKETS.getTradingPeriod(market), amount * cumulativeScale / ONE)

    # Update fxpMaxValue
    fxpMaxValue -= valueToSpend
    # Log transaction [BID b/c it's filling an ask so from trader's perspective they're bidding]
    log(type = logPrice, market, msg.sender, owner, BID, price, fill, block.timestamp, tradeIDs[t], outcome)
