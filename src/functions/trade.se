# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

# Note: must spend at least 1 in ONE

import branches as BRANCHES
import info as INFO
import cash as CASH
import markets as MARKETS
import trades as TRADES
import expiringEvents as EXPEVENTS
inset('refund.se')

event log_price(market:indexed, type, price, amount, timestamp, outcome, trader:indexed)
event log_fill_tx(market:indexed, sender:indexed, owner:indexed, type, price, amount, tradeid, outcome)

# Trade types
macro BID: 1
macro ASK: 2
# Field counts
macro TRADE_FIELDS: 8
# Boolean success/failure
macro SUCCESS: 1
# Error codes
macro INSUFFICIENT_BALANCE: 10
macro TRADE_SAME_BLOCK_PROHIBITED: 22

macro fee_percent($market_fee, $price, $cumScale):
    4 * $market_fee * $price * (ONE-$price*2**64/$cumScale) / ($cumScale*ONE)

macro remove_trade($trade_id, $market):
    TRADES.remove_trade($trade_id)
    MARKETS.remove_trade_from_market($market, $trade_id)

#
# Trade
#
# Errors:
    # -1: oracle only branch
    # -2: bad trade hash
    # -3: trader doesn't exist / own shares in this market
    # -4: must buy at least .00000001 in value
    # 10: insufficient balance
#Exchange(Market, outcome, sender, amount, receiver, payment) - transfers amount shares from sender to receiver for payment amount
#max value is max amount to spend to buy [including fees]
#max amount is max shares to sell
# 500k gas
# picks orders off the book
def trade(max_value, max_amount, trade_ids:arr):
    refund()
    if(BRANCHES.getOracleOnly(branch)):
        return([-1]: arr)
    i = 0
    trades = 0
    while i < len(trade_ids):
        trades += trade_ids[i]
        i+=1
    tradeInfo = array(3)
    tradeInfo[0] = trades
    tradeInfo[1] = max_amount
    tradeInfo[2] = max_value
    tradeHash = sha3(tradeInfo, items=3)
    if(TRADES.checkHash(tradeHash, msg.sender)==-1):
        return(-2)
    max_value = max_value
    max_amount = max_amount
    # Try to fulfill each trade passed
    t = 0
    while t < len(trade_ids):
        trade_id = trade_ids[t]
        # Get trade
        trade = array(TRADE_FIELDS)
        trade = TRADES.get_trade(trade_id, outitems=TRADE_FIELDS)
        if !trade:
            return(0)
        # Get market
        type = trade[1]
        market = trade[2]
        creator = INFO.getCreator(market)
        amount = trade[3]
        price = trade[4]
        owner = trade[5]
        outcome = trade[7]
        if(owner == msg.sender or owner == tx.origin):
            return(0)
        # Make sure the trade has been mined, obvious HFT prevention
        if block.number <= trade[6]:
            return(TRADE_SAME_BLOCK_PROHIBITED)
        branch = MARKETS.getBranchID(market)
        trading_fee = MARKETS.getTradingFee(market)
        cumScale = MARKETS.getCumScale(market)
        fee = fee_percent(trading_fee, price, cumScale)

        # Fill buy order
        if type == BID:
            # Get available balance of shares
            participantNumber = MARKETS.getParticipantNumber(market, msg.sender)
            balance = MARKETS.getParticipantSharesPurchased(market, participantNumber, outcome)
            if(balance > 0 and max_amount > 0):
                if(MARKETS.getParticipantID(market, participantNumber) != msg.sender):
                    return(-3)
                makerFeeRate = MARKETS.getMakerFees(market)
                sender = MARKETS.getParticipantNumber(market, msg.sender)
                ownerNum = MARKETS.getParticipantNumber(market, owner)
                # Determine fill amount
                fill = min(amount, min(balance, max_amount))
                # Calculate value
                value = (fill * price)/ONE
                # must trade at least 0.00000001 in value
                if(value < 184467440738):
                    return(-4)
                # Update trade amount or remove
                if fill < amount:
                    TRADES.fill_trade(trade_id, fill)
                else:
                    remove_trade(trade_id, market)
                # Update balances
                MARKETS.modifyParticipantShares(market, sender, outcome, -fill, 0, 0)
                MARKETS.modifyParticipantShares(market, ownerNum, outcome, fill, 0, 0)
                # Transfer cash from person who bid to the person here who is selling [bidder has already sent/escrowed the cash to/with the market when submitting bid]
                fee = value * fee / ONE
                # THREEFOURTHS is 3/4
                branchFees = (THREEFOURTHS+(ONEHALF - makerFeeRate)/2)*fee / ONE
                creatorFees = (ONEFOURTH+(ONEHALF - makerFeeRate)/2)*fee / ONE
                takerFeesTotal = branchFees + creatorFees
                CASH.addCash(msg.sender, value-takerFeesTotal)
                # 75% to branch + .5% more to branch per maker fee 1% decrease 
                CASH.addCash(branch, branchFees)
                # 25% to creator + .5% more to creator per 1% decrease in maker fees
                CASH.addCash(creator, creatorFees)
                CASH.subtractCash(market, value)

                # other party [maker] pay their part of the fee here too
                fee = fee * makerFeeRate / ONE
                CASH.subtractCash(market, fee)
                CASH.addCash(creator, fee/2)
                CASH.addCash(branch, fee/2)
                
                # needed to keep track of how many fees a market has raised
                # only count branch fees here
                MARKETS.addFees(market, fee/2+branchFees)
                # Update max_amount
                max_amount -= fill
                # Log transaction
                log(type=log_fill_tx, market, msg.sender, owner, ASK, price, fill, trade_id, outcome)
            else:
                return(INSUFFICIENT_BALANCE)
        elif type == ASK:
            balance = CASH.balance(msg.sender)
            makerFeeRate = MARKETS.getMakerFees(market)
            feeRate = 3*2**64/2**65 - makerFeeRate
            maxAmountGivenBalance = balance*2**64/(feeRate+2**64)
            max_value = min(maxAmountGivenBalance, max_value)
            if max_value > 0:
                # Calculate value of trade
                trade_value = amount * price / ONE
                # Determine fill value
                value = min(max_value, trade_value)
                if(value < 184467440738):
                    return(-4)
                fee = value * fee / ONE
                branchFees = (THREEFOURTHS+(ONEHALF - makerFeeRate)/2)*fee / ONE
                creatorFees = (ONEFOURTH+(ONEHALF - makerFeeRate)/2)*fee / ONE
                takerFeesTotal = branchFees + creatorFees
                if(balance < (value + takerFeesTotal)):
                    return([INSUFFICIENT_BALANCE]: arr)
                fill = 0
                # Calculate fill amount, update trade amount or remove filled trade
                if value < trade_value:
                    fill = value*ONE / price
                    TRADES.fill_trade(trade_id, fill)
                else:
                    fill = amount
                    remove_trade(trade_id, market)
                participantNumber = MARKETS.getParticipantNumber(market, msg.sender)
                # if participant doesn't exist in market, add them
                if(msg.sender != MARKETS.getParticipantID(market, participantNumber)):
                    participantNumber = MARKETS.addParticipant(market, msg.sender)
                
                # Update balances [user asking has already gotten rid of shares in escrow, just need to add them to the buyer]
                MARKETS.modifyParticipantShares(market, participantNumber, outcome, fill, 0, 0)
                # Transfer cash from user to person who has ask order and pay fee to branch and market creator
                # 75% to branch + .5% more to branch per maker fee 1% decrease 
                CASH.addCash(branch, branchFees)
                # 25% to creator + .5% more to creator per 1% decrease in maker fees
                CASH.addCash(creator, creatorFees)
                cost = value + takerFeesTotal
                CASH.addCash(owner, value)
                CASH.subtractCash(msg.sender, cost)

                # other party [maker] pay their part of the fee here too
                fee = fee * makerFeeRate / ONE
                CASH.subtractCash(market, fee)
                CASH.addCash(creator, fee/2)
                CASH.addCash(branch, fee/2)
                
                # only count branch fees here
                MARKETS.addFees(market, fee/2+branchFees)
                # Update max_value
                max_value -= value
                # Log transaction
                log(type=log_fill_tx, market, msg.sender, owner, BID, price, fill, trade_id, outcome)
            else:
                return(INSUFFICIENT_BALANCE)

        # Log price, fill amount, type and timestamp
        MARKETS.setPrice(market, outcome, price)
        log(type=log_price, market, type, price, fill, block.timestamp, outcome, msg.sender)
        # Next trade
        t += 1
    return([SUCCESS, max_value, max_amount]: arr)

# Example:
    #buyer gives up say 20
    #complete set cost is say 100
    #fee is say 2
    #market should lose 20 from buyer's escrowed money
    #market should gain 100 from complete set
    #person short selling should give the market 80 [complete set cost less shares sold]
    #plus fees
        #1 should go to branch
        #1 should go to creator
def short_sell(buyer_trade_id, max_amount):
    refund()
    # check trade hash
    tradeInfo = array(3)
    tradeInfo[0] = buyer_trade_id
    tradeInfo[1] = max_amount
    tradeInfo[2] = 0
    tradeHash = sha3(tradeInfo, items=3)
    if(TRADES.checkHash(tradeHash, msg.sender)==-1):
        return(-2)
    # Get trade
    trade = array(TRADE_FIELDS)
    trade = TRADES.get_trade(buyer_trade_id, outitems=TRADE_FIELDS)
    if !trade:
        return(3)
    # Get market
    type = trade[1]
    if(type!=BID):
        return(4)
    market = trade[2]
    if(MARKETS.getOneWinningOutcome(market, 0)):
        return(-4)
    orig_amount = trade[3]
    price = trade[4]
    owner = trade[5]
    outcome = trade[7]
    if(owner == msg.sender or owner == tx.origin):
        return(5)
    # Make sure the trade has been mined, obvious HFT prevention
    if block.number <= trade[6]:
        return(TRADE_SAME_BLOCK_PROHIBITED)
    branch = MARKETS.getBranchID(market)
    if(BRANCHES.getOracleOnly(branch)):
        return(-1)
    creator = INFO.getCreator(market)
    trading_fee = MARKETS.getTradingFee(market)
    cumScale = MARKETS.getCumScale(market)
    amount = min(orig_amount, max_amount)
    if(amount < 0):
        return(INSUFFICIENT_BALANCE)
    fee = amount * price * fee_percent(trading_fee, price, cumScale) / ONE^2
    makerFeeRate = MARKETS.getMakerFees(market)
    branchFees = (THREEFOURTHS+(ONEHALF - makerFeeRate)/2)*fee / ONE
    creatorFees = (ONEFOURTH+(ONEHALF - makerFeeRate)/2)*fee / ONE
    takerFeesTotal = branchFees + creatorFees
    cost = amount*cumScale/ONE - (amount*price/ONE - takerFeesTotal)
    if(CASH.balance(msg.sender) < cost):
        return(INSUFFICIENT_BALANCE)

    if(amount*price/ONE < 184467440738):
        return(-4)

    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    participantNumber = MARKETS.getParticipantNumber(market, msg.sender)
    # if participant doesn't exist in market, add them
    if(msg.sender != MARKETS.getParticipantID(market, participantNumber)):
        participantNumber = MARKETS.addParticipant(market, msg.sender)

    i = 1
    # send shares of the event to user address
    while i <= numOutcomes:
        MARKETS.modifyShares(market, i, amount)
        MARKETS.modifyParticipantShares(market, participantNumber, i, amount, 0)
        i += 1
    if(BRANCHES.getVotePeriod(branch)<MARKETS.getTradingPeriod(market)):
        MARKETS.modifySharesValue(market, amount*cumScale/ONE)
        EXPEVENTS.adjustPeriodShareValueOutstanding(branch, MARKETS.getTradingPeriod(market), amount*cumScale/ONE)

    # send money from user acc. to market address/account
    # cost for shares
    CASH.sendFrom(market, cost-takerFeesTotal, msg.sender)

    # Fill buy order
    # Determine fill amount
    fill = amount
    # Update trade amount or remove
    if fill < orig_amount:
        TRADES.fill_trade(trade_id, fill)
    else:
        remove_trade(trade_id, market)
    # Update balances
    ownerNum = MARKETS.getParticipantNumber(market, owner)
    MARKETS.modifyParticipantShares(market, participantNumber, outcome, -fill, 0, 0)
    MARKETS.modifyParticipantShares(market, ownerNum, outcome, fill, 0, 0)
    # Transfer cash from person who bid to the person here who is selling [bidder has already sent/escrowed the cash to/with the market when submitting bid]
    # 75% to branch + .5% more to branch per maker fee 1% decrease 
    CASH.sendFrom(branch, branchFees, msg.sender)
    # 25% to creator + .5% more to creator per 1% decrease in maker fees
    CASH.sendFrom(creator, creatorFees, msg.sender)

    # other party [maker] pay their part of the fee here too
    fee = fee * makerFeeRate / ONE
    CASH.subtractCash(market, fee)
    CASH.addCash(creator, fee/2)
    CASH.addCash(branch, fee/2)
    
    # only count branch fees here
    MARKETS.addFees(market, fee/2+branchFees)

    # Log transaction
    log(type=log_fill_tx, market, msg.sender, owner, ASK, price, fill, trade_id, outcome)
    # Log price, fill amount, type and timestamp
    log(type=log_price, market, type, price, fill, block.timestamp, outcome, msg.sender)
    MARKETS.setPrice(market, outcome, price)
    return([SUCCESS, max_amount, fill, price]: arr)
