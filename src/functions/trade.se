# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import info as INFO
import cash as CASH
import markets as MARKETS
import trades as TRADES
inset('refund.se')

event log_price(market:indexed, type, price, amount, timestamp, outcome, trader:indexed)
event log_fill_tx(market:indexed, sender:indexed, owner:indexed, type, price, amount, tradeid, outcome)

macro ONEPOINTFIVE: 27670116110564327424

# Trade types
macro BID: 1
macro ASK: 2
# Field counts
macro TRADE_FIELDS: 8
# Boolean success/failure
macro SUCCESS: 1
# Error codes
macro INSUFFICIENT_BALANCE: 10
macro TRADE_SAME_BLOCK_PROHIBITED: 22

# calculates trading fee percentage
# 4*fee*price*(1-price/range)/range keeps fees lower at the edges
macro fee_percent($market_fee, $price, $cumScale):
    4 * $market_fee * $price * (ONE-$price*2**64/$cumScale) / ($cumScale*ONE)

# removes a trade from the book
macro remove_trade($trade_id, $market):
    TRADES.remove_trade($trade_id)
    MARKETS.remove_trade_from_market($market, $trade_id)

#
# Trade [allows a user to pick up/fill orders off the book]
#
# Errors:
    # -1: oracle only branch
    # -2: bad trade hash
    # -3: trader doesn't exist / own shares in this market
    # -4: must buy at least .00000001 in 
    # -5: can't pick up your own trade
    # 10: insufficient balance
    # 22: trade in same block prohibited
# max value is max money to spend to buy [including fees] filling ask orders
# max amount is max shares to sell filling bid orders
# 500k gas cost
# picks orders off the book
def trade(max_value, max_amount, trade_ids:arr):
    refund()
    if(BRANCHES.getOracleOnly(branch)):
        return([-1]: arr)
    i = 0
    trades = 0
    while i < len(trade_ids):
        trades += trade_ids[i]
        i+=1
    tradeInfo = array(3)
    tradeInfo[0] = trades
    tradeInfo[1] = max_amount
    tradeInfo[2] = max_value
    tradeHash = sha3(tradeInfo, items=3)
    if(TRADES.checkHash(tradeHash, msg.sender)==-1):
        return([-2]: arr)
    # Try to fulfill each trade passed
    t = 0
    while t < len(trade_ids):
        # Get trade
        trade = array(TRADE_FIELDS)
        trade = TRADES.get_trade(trade_ids[t], outitems=TRADE_FIELDS)
        if !trade:
            return([0]: arr)
        # Get market
        type = trade[1]
        market = trade[2]
        creator = INFO.getCreator(market)
        amount = trade[3]
        price = trade[4]
        owner = trade[5]
        outcome = trade[7]
        if(owner == msg.sender or owner == tx.origin):
            return([-5]: arr)
        # Make sure the trade has been mined, obvious HFT prevention
        if block.number <= trade[6]:
            return([TRADE_SAME_BLOCK_PROHIBITED]: arr)
        branch = MARKETS.getBranchID(market)
        fee = fee_percent(MARKETS.getTradingFee(market), price, MARKETS.getCumScale(market))

        # Fill buy order
        if type == BID:
            # Get available balance of shares
            balance = MARKETS.getParticipantSharesPurchased(market, msg.sender, outcome)
            if(balance > 0 and max_amount > 0):
                makerFeeRate = MARKETS.getMakerFees(market)
                # Determine fill amount
                fill = min(amount, min(balance, max_amount))
                # Calculate value
                value = (fill * price)/ONE
                # must trade at least 0.00000001 in value
                if(value < 184467440738):
                    return([-4]: arr)
                # Update trade amount or remove
                if fill < amount:
                    TRADES.fill_trade(trade_ids[t], fill)
                else:
                    remove_trade(trade_ids[t], market)
                # Update balances
                MARKETS.modifyParticipantShares(market, msg.sender, outcome, -fill, 0)
                MARKETS.modifyParticipantShares(market, owner, outcome, fill, 0)
                # Transfer cash from person who bid to the person here who is selling [bidder has already sent/escrowed the cash to/with the market when submitting bid]
                fee = value * fee / ONE
                branchFees = (THREEFOURTHS+(ONEHALF - makerFeeRate)/2)*fee / ONE
                creatorFees = (ONEFOURTH+(ONEHALF - makerFeeRate)/2)*fee / ONE
                CASH.addCash(msg.sender, value-(branchFees + creatorFees))
                # 75% to branch + .5% more to branch per maker fee 1% decrease
                CASH.addCash(branch, branchFees)
                # 25% to creator + .5% more to creator per 1% decrease in maker fees
                CASH.addCash(creator, creatorFees)
                CASH.subtractCash(market, value)

                # other party [maker] pays their part of the fee here too [they previously escrowed it in the market]
                fee = fee * makerFeeRate / ONE
                CASH.subtractCash(market, fee)
                CASH.addCash(creator, fee/2)
                CASH.addCash(branch, fee/2)
                
                # needed to keep track of how many fees a market has raised
                # only count branch fees here
                MARKETS.addFees(market, fee/2+branchFees)
                # Update max_amount
                max_amount -= fill
                # Log transaction
                log(type=log_fill_tx, market, msg.sender, owner, ASK, price, fill, trade_ids[t], outcome)
            else:
                return([INSUFFICIENT_BALANCE]: arr)
        elif type == ASK:
            balance = CASH.balance(msg.sender)
            makerFeeRate = MARKETS.getMakerFees(market)
            takerFee = (ONEPOINTFIVE - makerFeeRate)*fee / ONE
            total_trade_cost = amount * price * (takerFee+ONE) / ONE**2
            # trade value to spend is equal to min(moneyUserOwns, moneyUserWantsToSpend, valueOfTradeThatIsUnfilledIncludingFees)
            value_to_spend = min(total_trade_cost, min(max_value, balance))
            # Determine fill amount
            fill = value_to_spend*ONE / price * ONE / (takerFee+ONE)
            trade_value_excluding_fees = fill*price/ONE
            if(trade_value_excluding_fees >= 184467440738):
                # Update trade amount or remove filled trade
                if fill < amount:
                    TRADES.fill_trade(trade_ids[t], fill)
                else:
                    remove_trade(trade_ids[t], market)
                # Update balances [user asking has already gotten rid of shares in escrow, just need to add them to the buyer]
                MARKETS.modifyParticipantShares(market, msg.sender, outcome, fill, 0)

                branchFees = (THREEFOURTHS+(ONEHALF - makerFeeRate)/2)*trade_value_excluding_fees/ONE * fee / ONE
                creatorFees = (ONEFOURTH+(ONEHALF - makerFeeRate)/2)*trade_value_excluding_fees/ONE * fee / ONE
                # Transfer cash from user to person who has ask order and pay fee to branch and market creator
                # 75% to branch + .5% more to branch per maker fee 1% decrease 
                CASH.addCash(branch, branchFees)
                # 25% to creator + .5% more to creator per 1% decrease in maker fees
                CASH.addCash(creator, creatorFees)
                CASH.addCash(owner, value_to_spend-(branchFees+creatorFees))
                CASH.subtractCash(msg.sender, value_to_spend)

                # other party [maker] pay their part of the fee here too
                makerFee = trade_value_excluding_fees * makerFeeRate / ONE * fee / ONE
                CASH.subtractCash(market, makerFee)
                CASH.addCash(creator, makerFee/2)
                CASH.addCash(branch, makerFee/2)
                
                # only count branch fees here
                MARKETS.addFees(market, makerFee/2+branchFees)
                # Update max_value
                max_value -= value_to_spend
                # Log transaction
                log(type=log_fill_tx, market, msg.sender, owner, BID, price, fill, trade_ids[t], outcome)
            else:
                return([INSUFFICIENT_BALANCE]: arr)

        # Log price, fill amount, type and timestamp
        MARKETS.setPrice(market, outcome, price)
        log(type=log_price, market, type, price, fill, block.timestamp, outcome, msg.sender)
        # Next trade
        t += 1
    return([SUCCESS, max_value, max_amount]: arr)