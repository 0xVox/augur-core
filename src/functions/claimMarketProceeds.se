# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

### This allows users to claim their money from a market by exchanging their shares which hold value

# todo fix getoutcome stuff 0 is a valid outcome... and anywhere getoutcome is used

import branches as BRANCHES
import markets as MARKETS
import events as EVENTS
import oneWinningOutcomePayouts as CLOSEONE
import twoWinningOutcomePayouts as CLOSETWO
extern subcurrency: [allowance:[int256,int256]:int256, approve:[int256,int256]:int256, balance:[]:int256, balanceOf:[int256]:int256, transfer:[int256,int256]:int256, transferFrom:[int256,int256,int256]:int256]
inset('../data_api/refund.se')

# If ethicality value <.5 it's 0, otherwise it's ethical
macro ethicCatch($x):
    if($x < ONE_HALF):
        0
    else:
        ONE

macro categorical($event):
    (EVENTS.getNumOutcomes($event) > 2)

# Claim trading profits/value per share after a market is resolved
# @returns 1 if successful
# Errors:
    # 0: market not resolved
    # -1: trader doesn't exist
    # -8: invalid branch
#data withdrawInitiated[]
# todo macro THREEDAYS: 259200 add to getting $ for shares
def claimProceeds(branch, market):
    refund()
    if(MARKETS.getBranch(market) != branch):
        return(-8)
    tradingPeriod = MARKETS.getTradingPeriod(market)
    period = BRANCHES.getVotePeriod(branch)
    event = MARKETS.getMarketEvent(market, 0)
    resolved = 1
    if(!EVENTS.getOutcome(event)):
        resolved = 0
    # as long as it's resolved and trading period over money can be collected
    if((period <= tradingPeriod) or !resolved):
        return(0)
    winningOutcomes = array(8)
    winningOutcomes = MARKET.getWinningOutcomes(market, outitems = 8)
    success = 0
    # market not resolved
    if(!winningOutcomes[0]):
        return(0)
    if(!winningOutcomes[1]):
        ethical = ethicCatch(EVENTS.getEthics(event))
        # unethical or .5 categorical 1d market is resolved with all outcomes having equal values
        if(categorical(event) and (EVENTS.getMode(event) == ONE_HALF or !ethical)):
            success = CLOSEONE.oneOutcome(market, winningOutcomes[0], msg.sender, 1, EVENTS.getNumOutcomes(event))
        # resolves a regular binary market
        else:
            success = CLOSEONE.oneOutcome(market, winningOutcomes[0], msg.sender, 0, 0)
    # resolves a scalar market
    elif(winningOutcomes[1]):
        success = CLOSETWO.twoOutcomes(market, winningOutcomes, event, msg.sender)
    else:
        throw()
    return(success)
