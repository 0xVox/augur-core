import branches as BRANCHES
import info as INFO
import markets as MARKETS
import events as EVENTS
import expiringEvents as EXPEVENTS
extern subcurrency: [allowance:[uint256,uint256]:uint256, approve:[uint256,uint256]:uint256, balance:[]:uint256, balanceOf:[uint256]:uint256, transfer:[uint256,uint256]:uint256, transferFrom:[uint256,uint256,uint256]:uint256]
inset('../data_api/refund.se')
inset('eventHelpers.se')

### Serves to resolve eents

## helper function to close an event for resolution
macro closeOut($event, $market, $branch, $votingPeriodEvent, $fxpOutcome, $periodLength, $ethical, $scalarorcat, $mode, $ethicOutcome):
    callstackCheck()
    # In the $event 'Market is not ready to resolve' is found to be the consensus, the early resolution bond is paid to the reporters for their labor.
    # and $market remains with old expiration date
    # UI needs to call penalizeWrong for ones that are pushed back in both pushed back period and regular period with actual reporting
    $indeterminate = ONE_HALF * 3
    $indeterminateAndReadyToResolve = ($fxpOutcome == $indeterminate or $mode == ONE_HALF)
    $indeterminateNotReadyToResolveEarlyEvent = ($fxpOutcome == $indeterminate or $mode == ONE_HALF) and EVENTS.getEventPushedUp($event)
    if($indeterminateNotReadyToResolveEarlyEvent):
        if(MARKETS.getPushedForward($market)):
            # look @ total shares purchase cutoff times for early resolution bonds
            amount = MARKETS.getTradingFee($market) * MARKETS.getTotalSharesPurchased($market) / (2 * ONE)
            branchWallet = BRANCHES.getWallet($branch, INFO.getCurrency($market))
            if(!INFO.getWallet($market).transfer(branchWallet, amount)):
                throw()
        MARKETS.setTradingPeriod($market, MARKETS.getOriginalTradingPeriod($market))
        MARKETS.setPushedForward($market, 0, msg.sender)
        EXPEVENTS.setEventWeight($branch, $votingPeriodEvent, $event, 0)
        # set outcome to 0
        EVENTS.setOutcome($event, 0)
        EVENTS.setMode($event, 0)
        EVENTS.setEthics($event, 0)
        # set uncaughtoutcome to 0
        EVENTS.setUncaughtOutcome($event, 0)
        EVENTS.setEventPushedUp($event, 0)
        # need to store which period it was "rejected" in
        EVENTS.setRejected($event, EVENTS.getExpiration($event) / $periodLength)
        # set $event expiration to be the old date
        EVENTS.setExpiration($event, EVENTS.getOriginalExpiration($event))
        -6
    
    elif($indeterminateAndReadyToResolve or !ethical):
        # give $event bond money to reporters
        branchWallet = BRANCHES.getWallet($branch, INFO.getCurrency($event))
        if(!INFO.getWallet($event).transfer(branchWallet, EVENTS.getBond($event))):
            throw()
        # not $ethical is same as .5 outcome
        if($scalarorcat):
            # the mode is used to compare for reporting accuracy. so still the same as the reported uncaught outcome/mode, but resolving the market as .5 right in the middle of the range so payouts are done right for an unethical [or indeterminate] market
            EVENTS.setOutcome($event, $ethicOutcome)
        else:
            EVENTS.setOutcome($event, $indeterminate)
        1
    else:
        # return bond as a normal event resolution
        if(!INFO.getWallet($event).transfer(INFO.getCreator($event), EVENTS.getBond($event))):
            throw()
        if(MARKETS.getPushedForward($market)):
            amount = MARKETS.getTradingFee($market) * MARKETS.getTotalSharesPurchased($market) / (2 * ONE)
            if(!INFO.getWallet($market).transfer(MARKETS.getBondsMan($market), amount)):
                throw()
        if(EVENTS.getEventPushedUp($event)):
            # delete old $event from future events exp
            $period = EVENTS.getOriginalExpiration($event) / $periodLength
            EXPEVENTS.removeEvent($branch, $period)
            EXPEVENTS.deleteEvent($branch, $period, $event)
            EVENTS.setOriginalExpiration($event, EVENTS.getExpiration($event))
        1

# Resolves a binary market
# whitelist
def resolveBinary(event, market, branch, votingPeriodEvent):
    callstackCheck()
    fxpOutcome = catch(EVENTS.getUncaughtOutcome(event))
    periodLength = BRANCHES.getPeriodLength(branch)
    ethical = ethicCatch(EVENTS.getEthics(event))
    # outcome is set to the binned version of the raw reported outcome
    EVENTS.setOutcome(event, fxpOutcome)
    # ethics is set to the binned version of the raw ethicality outcome
    EVENTS.setEthics(event, ethical)
    val = closeOut(event, market, branch, votingPeriodEvent, fxpOutcome, periodLength, ethical, 0, 0, 0)
    return(val)

# Resolves a categorical or scalar market
# whitelist
def resolveCategoricalOrScalar(fxpScaledMin, fxpScaledMax, event, market, branch, votingPeriodEvent):
    callstackCheck()
    mode = EVENTS.getUncaughtOutcome(event)
    EVENTS.setMode(event, mode)
    fxpOutcome = mode * (fxpScaledMax - fxpScaledMin) / ONE + fxpScaledMin
    # outcome is set to the mode of the reported outcomes
    EVENTS.setOutcome(event, fxpOutcome)
    periodLength = BRANCHES.getPeriodLength(branch)
    # ethics is set to the binned version of the raw ethicality outcome
    ethical = ethicCatch(EVENTS.getEthics(event))
    ethicOutcome = 2 ** 63 * (fxpScaledMax - fxpScaledMin) / ONE + fxpScaledMin
    EVENTS.setEthics(event, ethical)
    val = closeOut(event, market, branch, votingPeriodEvent, fxpOutcome, periodLength, ethical, 1, mode, ethicOutcome)
    return(val)

# Determines the "winning outcomes" for a given market
# Easiest to give examples:
    # 1D Markets:
        # Binary or Categorical will have 1 winning outcome [1 or 2 for binary, 1 thru numOutcomes for categorical is the poss. value for the winning outcome]
def determineWinningOutcomes(event):
    callstackCheck()
    winningOutcomes = array(8)
    fxpOutcome = EVENTS.getOutcome(event)
    outcome = fxpOutcome / ONE
    # scalar or .5
    if(scalar(event) or fxpOutcome == 3 * ONE_HALF):
        winningOutcomes[0] = 1
        winningOutcomes[1] = 2
    # anything besides scalar or .5
    else:
        winningOutcomes[0] += outcome
    return(winningOutcomes: arr)
