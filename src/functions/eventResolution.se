import branches as BRANCHES
import info as INFO
import cash as CASH
import markets as MARKETS
import events as EVENTS
import expiringEvents as EXPEVENTS
import makeReports as MAKEREPORTS


### helper functions:
def resolveBinary(event, market, branch, votingPeriodEvent, period):
    fxpOutcome = catch(EVENTS.getUncaughtOutcome(event))
    pushedBack = EVENTS.getPushedBack(event)
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.number % periodLength
    ethical = ethic_catch(EVENTS.getEthical(event))
    EVENTS.setOutcome(event, fxpOutcome)

    #•In the event 'Market is not ready to resolve' is found to be the consensus, the early resolution bond is paid to the reporters for their labor.
    # and market remains with old expiration date
    if(fxpOutcome == 3*2**63 && MARKETS.getPushedForward(market)):
        #set event expiration to be the old date prior to this bond process
        EVENTS.setExpiration(event, EVENTS.getOriginalExpiration(event))
        MARKETS.setTradingPeriod(market, MARKETS.getOriginalTradingPeriod(market))
        CASH.addCash(branch, MARKETS.getTradingFee(market)*MARKETS.getTotalSharesPurchased(market)/(2*2^64))
        CASH.subtractCash(market, MARKETS.getTradingFee(market)*MARKETS.getTotalSharesPurchased(market)/(2*2^64))
        MARKETS.setPushedForward(market, 0)
        MAKEREPORTS.setNumReportsExpectedEvent(branch, votingPeriodEvent, event, 0)
        MAKEREPORTS.setNumReportsEvent(branch, votingPeriodEvent, event, 0)
        #set outcome to 0
        EVENTS.setOutcome(event, 0)
        EVENTS.setMedian(event, 0)
        EVENTS.setEthics(event, 0)
        #set uncaughtoutcome to 0
        EVENTS.setUncaughtOutcome(event, 0)
        # need to store uncaught outcome for rejectedperiod separately as well as which period it was "rejected" in
        EVENTS.setRejected(event, EVENTS.getExpiration(event)/periodLength, fxpOutcome)
        return(-6)
    # if .5 due to catch param push back once (as .5 outcome), if same on next consensus no more push backs, that's the outcome
    # why residual < periodLength/2?
    if(fxpOutcome==3*2**63 && !pushedBack && residual < periodLength/2):
        #push back event
        MAKEREPORTS.setNumReportsExpectedEvent(branch, votingPeriodEvent, event, 0)
        MAKEREPORTS.setNumReportsEvent(branch, votingPeriodEvent, event, 0)
        EVENTS.setEthics(event, 0)
        EXPEVENTS.addEvent(branch, period+1, event)
        #set outcome to 0
        EVENTS.setOutcome(event, 0)
        #set uncaughtoutcome to 0
        EVENTS.setUncaughtOutcome(event, 0)
        #set pushedback to true
        EVENTS.setPushedBack(event)
        #set event expiration date to be after the current reporting period ends
        EVENTS.setExpiration(event, block.number)
        MARKETS.setTradingPeriod(market, period+1)
        return(-4)
    if((fxpOutcome==3*2**63 && pushedBack) || !ethical):
        # give event bond money to reporters
        CASH.subtractCash(event, 42*2**64)
        CASH.addCash(branch, 42*2**64)
        # not ethical is same as .5 outcome
        fxpOutcome = 3*2**63
        EVENTS.setOutcome(event, fxpOutcome)
    else:
        # return bond
        CASH.subtractCash(event, 42*2**64)
        CASH.addCash(INFO.getCreator(event), 42*2**64)
        if(MARKETS.getPushedForward(market)):
            CASH.addCash(MARKETS.getBondsMan(market), MARKETS.getTradingFee(market)*MARKETS.getTotalSharesPurchased(market)/(2*2^64))
            CASH.subtractCash(market, MARKETS.getTradingFee(market)*MARKETS.getTotalSharesPurchased(market)/(2*2^64))
            # delete old event from future events exp
            EXPEVENTS.removeEvent(branch, EVENTS.getOriginalExpiration(event)/periodLength)
    return(1)
    
def resolveCategoricalOrScalar(scaled_min, scaled_max, event, market, branch, votingPeriodEvent, period):
    #median = MEDIAN.calculateMedian(event)
    EVENTS.setMedian(event, median)
    fxpOutcome = median * (scaled_max - scaled_min) + scaled_min
    EVENTS.setOutcome(event, fxpOutcome)
    pushedBack = EVENTS.getPushedBack(event)
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.number % periodLength
    ethical = ethic_catch(EVENTS.getEthical(event))

    #•In the event 'Market is not ready to resolve' is found to be the consensus, the early resolution bond is paid to the reporters for their labor.
    # and market remains with old expiration date
    if(fxpOutcome == 3*2**63 && MARKETS.getPushedForward(market)):
        #set event expiration to be the old date prior to this bond process
        EVENTS.setExpiration(event, EVENTS.getOriginalExpiration(event))
        MARKETS.setTradingPeriod(market, MARKETS.getOriginalTradingPeriod(market))
        CASH.addCash(branch, MARKETS.getTradingFee(market)*MARKETS.getTotalSharesPurchased(market)/(2*2^64))
        CASH.subtractCash(market, MARKETS.getTradingFee(market)*MARKETS.getTotalSharesPurchased(market)/(2*2^64))
        MARKETS.setPushedForward(market, 0)
        MAKEREPORTS.setNumReportsExpectedEvent(branch, votingPeriodEvent, event, 0)
        MAKEREPORTS.setNumReportsEvent(branch, votingPeriodEvent, event, 0)
        #set outcome to 0
        EVENTS.setOutcome(event, 0)
        EVENTS.setMedian(event, 0)
        EVENTS.setEthics(event, 0)
        #set uncaughtoutcome to 0
        EVENTS.setUncaughtOutcome(event, 0)
        # need to store uncaught outcome for rejectedperiod separately as well as which period it was "rejected" in
        EVENTS.setRejected(event, EVENTS.getExpiration(event)/periodLength, fxpOutcome)
        return(-6)

    # if .5 due to catch param push back once (as .5 outcome), if same on next consensus no more push backs, that's the outcome
    if(fxpOutcome==3*2**63 && !pushedBack && residual < periodLength/2):
        #push back event
        MAKEREPORTS.setNumReportsExpectedEvent(branch, votingPeriodEvent, event, 0)
        MAKEREPORTS.setNumReportsEvent(branch, votingPeriodEvent, event, 0)
        EXPEVENTS.addEvent(branch, period+1, event)
        #set outcome to 0
        EVENTS.setOutcome(event, 0)
        #set pushedback to true
        EVENTS.setPushedBack(event)
        # set median to 0
        EVENTS.setMedian(event, 0)
        EVENTS.setEthics(event, 0)
        EVENTS.setExpiration(event, block.number)
        MARKETS.setTradingPeriod(market, period+1)
        return(-4)
    if((fxpOutcome==3*2**63 && pushedBack) || !ethical):
        # give event bond money to reporters
        CASH.subtractCash(event, 42*2**64)
        CASH.addCash(branch, 42*2**64)
        # not ethical is same as .5 outcome
        fxpOutcome = 3*2**63
        EVENTS.setOutcome(event, fxpOutcome)
        EVENTS.setMedian(event, fxpOutcome)
    else:
        # return bond
        CASH.subtractCash(event, 42*2**64)
        CASH.addCash(INFO.getCreator(event), 42*2**64)
        if(MARKETS.getPushedForward(market)):
            CASH.addCash(MARKETS.getBondsMan(market), MARKETS.getTradingFee(market)*MARKETS.getTotalSharesPurchased(market)/(2*2^64))
            CASH.subtractCash(market, MARKETS.getTradingFee(market)*MARKETS.getTotalSharesPurchased(market)/(2*2^64))
            # delete old event from future events exp
            EXPEVENTS.removeEvent(branch, EVENTS.getOriginalExpiration(event)/periodLength)
            
    return(1)