# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

### This allows you to place orders on the book and cancel them

import branches as BRANCHES
import markets as MARKETS
import events as EVENTS
import trades as TRADES
import info as INFO
import mutex as MUTEX
# Warning: subcurrencies/tokens are untrusted contracts
extern subcurrency: [allowance:[uint256,uint256]:uint256, approve:[uint256,uint256]:uint256, balance:[]:uint256, balanceOf:[uint256]:uint256, transfer:[uint256,uint256]:uint256, transferFrom:[uint256,uint256,uint256]:uint256]
inset('../data_api/refund.se')
inset('logReturn.se')
inset('../data_api/float.se')

event logAddTx(market:indexed, sender:indexed, type, fxpPrice, fxpAmount, outcome, tradeid, moneyEscrowed, sharesEscrowed)
event logCancel(market:indexed, sender:indexed, fxpPrice, fxpAmount, tradeid, outcome, type, money, shares)
event buyAndSellSharesLogReturn(returnValue)

# Trade types
macro BID: 1
macro ASK: 2
# Field counts
macro TRADE_FIELDS: 10
# Boolean success/failure
macro FAILURE: 0
macro SUCCESS: 1
# Error codes
macro INSUFFICIENT_BALANCE: 10
macro TRADE_ALREADY_EXISTS: 21
macro TRADE_SAME_BLOCK_PROHIBITED: 22

macro MIN_ORDER_VALUE: 10000000000
macro MAX_ORDER_VALUE: 1569275433846670190958947355801916604025L

# 
# Buy / Sell actions: puts orders on the book
# Errors:
    #  0: market doesn't exist
    # -1: fxpAmount/fxpPrice bad
    # -2: oracle only branch
# 
# costs 532k gas
# price is always in 10**20 fxp, amount is in the market's currency # of decimals, e.g. for 9 10**9 is 1 share [so buy 10**9 complete sets and it'll cost you 1 full unit of that currency or buy 10**9 at a fxpPrice of 10**20 it'll cost you 1 full unit of the currency]
# smallest trade value is 0.00000001
def placeOrder(type, fxpAmount, fxpPrice, market, outcome):
    refund()
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()

    saveOrder(type, fxpAmount, fxpPrice, market, outcome, msg.sender)
    MUTEX.unsetMutex()
    logReturn(buyAndSellSharesLogReturn, FAILURE)

# 
# Cancellation: cancels an order, if a bid refunds money, if an ask returns shares
# @returns 1 if success, 0 if failure
# 
# 200k gas
def cancel(tradeID):
    refund()
    if(MUTEX.getMutex()):
        throw()
    MUTEX.setMutex()

    # user can cancel anytime
    # Get trade
    fetchTradeCancelInfo()
    # Check the owner
    if(msg.sender != owner):
        MUTEX.unsetMutex()
        logReturn(buyAndSellSharesLogReturn, FAILURE)
    
    # Clear the trade first
    removeTrade(tradeID, market)
    refundTrade()
    # Log cancellation
    log(type = logCancel, market, msg.sender, fxpPrice, fxpAmount, tradeID, outcome, type, moneyEscrowed, sharesEscrowed)
    MUTEX.unsetMutex()
    logReturn(buyAndSellSharesLogReturn, SUCCESS)

macro saveOrder($type, $fxpAmount, $fxpPrice, $market, $outcome, $sender):
    $cumulativeScale = MARKETS.getCumulativeScale(market)
    $branch = MARKETS.getBranch(market)
    checkOrderPreconditions()

    $moneyEscrowed = 0
    $sharesEscrowed = 0
    $initialAmount = $fxpAmount

    if($type == ASK):
        placeAsk()    
    if($type == BID):
        placeBid()
    else:
        throw()

    trade = [$type, $market, $fxpAmount, $fxpPrice, $sender, block.number, $outcome, $moneyEscrowed, $sharesEscrowed]
    tradeID = sha3(trade, items = 9)
    if(TRADES.getID(tradeID)):
        throw()
    TRADES.saveTrade(tradeID, $type, $market, $fxpAmount, $initialAmount, $sender, $outcome, $moneyEscrowed, $sharesEscrowed)
    # Update market
    MARKETS.addTrade($market, tradeID)

    log(type = logAddTx, $market, $sender, $type, $fxpPrice, $initialAmount, $outcome, tradeID, $moneyEscrowed, $sharesEscrowed)
    MUTEX.unsetMutex()
    logReturn(buyAndSellSharesLogReturn, tradeID)

macro refundTrade():
    # Issue refunds
    if(type == BID):
        # Return to user sharesEscrowed that weren't filled yet for all outcomes except the order outcome
        if(sharesEscrowed):
            i = 1
            while i < MARKETS.getNumOutcomes($market):
                if(i != outcome):
                    MARKETS.modifyParticipantShares($market, msg.sender, $outcome, sharesEscrowed, 0)
                i += 1
    elif(type == ASK):
        # shares refund if has shares escrowed for this outcome
        if(sharesEscrowed):
            MARKETS.modifyParticipantShares(market, msg.sender, outcome, sharesEscrowed, 0)
    else:
        throw()
    # Return to user moneyEscrowed that wasn't filled yet
    if(moneyEscrowed):
        refunded = INFO.getWallet(market).transfer(msg.sender, moneyEscrowed)
        if(!refunded):
            throw()

macro removeTrade($tradeID, $market):
    TRADES.removeTrade($trade ID)
    MARKETS.removeTradeFromMarket($market, $tradeID)

macro fetchTradeCancelInfo():
    trade = array(TRADE_FIELDS)
    trade = TRADES.getTrade(tradeID, outitems = TRADE_FIELDS)
    if(!trade[0]):
        MUTEX.unsetMutex()
        return(0)
    type = trade[1]
    market = trade[2]
    fxpAmount = trade[3]
    fxpPrice = trade[4]
    owner = trade[5]
    outcome = trade[7]
    moneyEscrowed = trade[8]
    sharesEscrowed = trade[9]

macro checkOrderPreconditions():
    if(!$branch):
        MUTEX.unsetMutex()
        return(0)
    if(BRANCHES.getOracleOnly($branch)):
        MUTEX.unsetMutex()
        return(-2)

macro placeAsk():
    # Take shares in escrow if user has shares
    sharesHeld = MARKETS.getParticipantSharesPurchased($market, msg.sender, $outcome)
    if(sharesHeld):
        $minValue = 0
        if(EVENTS.getNumOutcomes(MARKETS.getMarketEvent($market, 0)) > 2):
            $minValue = ONE
        else:
            $minValue = EVENTS.getMinValue(MARKETS.getMarketEvent($market, 0))
        price = $fxpPrice - $minValue
        cost = safeFxpMul($fxpAmount, price)
        if(price > cumulativeScale or cost < MIN_ORDER_VALUE or cost >= MAX_ORDER_VALUE):
            MUTEX.unsetMutex()
            return(-1)
        fill = min(sharesHeld, $fxpAmount)
        $fxpAmount -= fill
        $sharesEscrowed += fill
        MARKETS.modifyParticipantShares($market, msg.sender, $outcome, -fill, 0)
        
    # Take max minus price they want to sell at for the remainder of the amount that wasn't able to be used up above
    if($fxpAmount):
        $maxValue = 0
        if(EVENTS.getNumOutcomes(MARKETS.getMarketEvent($market, 0)) > 2):
            $maxValue = ONE
        else:
            $maxValue = EVENTS.getMaxValue(MARKETS.getMarketEvent($market, 0))
        costPerShareShorting = $maxValue - $fxpPrice
        tradeCost = safeFxpMul($fxpAmount, costPerShareShorting)
        if(costPerShareShorting > cumulativeScale or tradeCost < MIN_ORDER_VALUE or tradeCost >= MAX_ORDER_VALUE):
            MUTEX.unsetMutex()
            return(-1)
        $moneyEscrowed += tradeCost 
        $paidTradeCost = INFO.getCurrency($market).transferFrom($sender, INFO.getWallet($market), tradeCost)
        if(!paidTradeCost):
            throw()

macro placeBid():
    # If user owns n minus the one outcome we're buying escrow no money but escrow their shares in all the other outcomes.
    MAX_INT = 57896044618658097711785492504343953926634992332820282019728792003956564819967L
    sharesHeld = MAX_INT
    i = 1
    while i < MARKETS.getMarketNumOutcomes($market):
        if(i != $outcome):
            sharesHeld = min(MARKETS.getParticipantSharesPurchased($market, msg.sender, i), sharesHeld)
        i += 1
    if(sharesHeld):
        $minValue = 0
        if(EVENTS.getNumOutcomes(MARKETS.getMarketEvent($market, 0)) > 2):
            $minValue = ONE
        else:
            $minValue = EVENTS.getMinValue(MARKETS.getMarketEvent($market, 0))
        price = $fxpPrice - $minValue
        cost = safeFxpMul($fxpAmount, price)
        if(price > cumulativeScale or cost < MIN_ORDER_VALUE or cost >= MAX_ORDER_VALUE):
            MUTEX.unsetMutex()
            return(-1)
        fill = min(sharesHeld, $fxpAmount)
        $fxpAmount -= fill
        $sharesEscrowed += fill
        i = 1
        while i < MARKETS.getNumOutcomes($market):
            if(i != $outcome):
                MARKETS.modifyParticipantShares($market, msg.sender, i, -fill, 0)
            i += 1
        
    # Take money in escrow for price - min for the remainder of amount that wasn't able to be used up above. Make sure price - min isn't more than range
    if($fxpAmount):
        $minValue = 0
        if(EVENTS.getNumOutcomes(MARKETS.getMarketEvent($market, 0)) > 2):
            $minValue = ONE
        else:
            $minValue = EVENTS.getMinValue(MARKETS.getMarketEvent($market, 0))
        price = $fxpPrice - $minValue
        cost = safeFxpMul($fxpAmount, price)
        $moneyEscrowed += cost
        if(price > cumulativeScale or cost < MIN_ORDER_VALUE or cost >= MAX_ORDER_VALUE):
            MUTEX.unsetMutex()
            return(-1)
        $paidTradeCost = INFO.getCurrency($market).transferFrom($sender, INFO.getWallet($market), cost)
        if(!$paidTradeCost):
            throw()
