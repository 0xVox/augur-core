# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

### This allows users to close markets

# todo fix getoutcome stuff 0 is a valid outcome... and anywhere getoutcome is used

import branches as BRANCHES
import markets as MARKETS
import events as EVENTS
import closeMarketOne as CLOSEONE
import closeMarketTwo as CLOSETWO
import backstops as BACKSTOPS
import eventResolution as RESOLVE
import info as INFO
extern subcurrency: [allowance:[int256,int256]:int256, approve:[int256,int256]:int256, balance:[]:int256, balanceOf:[int256]:int256, transfer:[int256,int256]:int256, transferFrom:[int256,int256,int256]:int256]
inset('../data_api/refund.se')

macro YES: TWO
macro NO: ONE
macro BAD: 3 * ONE_HALF

macro CATCH_TOLERANCE: ONE / 10

# Bins values to 1, 1.5, 2
macro catch($x):
    if($x < (BAD - CATCH_TOLERANCE)):
        NO
    elif($x > (BAD + CATCH_TOLERANCE)):
        YES
    else:
        BAD

# If ethicality value <.5 it's 0, otherwise it's ethical
macro ethicCatch($x):
    if($x < ONE_HALF):
        0
    else:
        ONE

macro scalar($event):
    ((EVENTS.getMaxValue($event) != TWO or EVENTS.getMinValue($event) != ONE) and EVENTS.getNumOutcomes($event) == 2)

macro binary($event):
    (EVENTS.getNumOutcomes($event) == 2 and EVENTS.getMaxValue($event) == TWO and EVENTS.getMinValue($event) == ONE)

macro categorical($event):
    (EVENTS.getNumOutcomes($event) > 2)

# Loop through events in the market, get their outcomes and use those to determine the winning outcomes and resolve a market!
# @return 0 if fail/trading not over yet/event not expired or closed already, if success 1
# Error messages otherwise
    # -1: Market has no cash anyway / already closed
    # -2: 0 outcome / not reported on yet
    # -3: not final round 2 event
    # -4: market isn't in branch
    # -5: Event forked and not final yet
    # -6: bonded pushed forward market not ready to be resolved
    # -7: already resolved
# if market's events have moved due to a fork branch param passed should be the new fork [todo check to make sure it handles the wrong branch param properly here]
def closeMarket(branch, market, sender):
    refund()
    tradingPeriod = MARKETS.getTradingPeriod(market)
    period = BRANCHES.getVotePeriod(branch)
    event = MARKETS.getMarketEvent(market, 0)

    if(INFO.getCurrency(market).balanceOf(INFO.getWallet(market)) <= 0):
        return(-1)
    if(!EVENTS.getUncaughtOutcome(event)):
        return(-2)
    if(BACKSTOPS.getRoundTwo(event) and !BACKSTOPS.getFinal(event)):
        return(-3)
    if(MARKETS.getBranch(market) != branch):
        return(-4)
    # checks whether any events not already resolved
    resolved = 1
    # what if we forked or round 2 won't it be resolved and thus market never gets resolved todo
    if(!EVENTS.getOutcome(event)):
        resolved = 0
    if((period <= tradingPeriod) or resolved):
        return(0)
    # look at through event in the market, get its outcomes, resolve it and use those to determine the winning outcomes for a given market!
    votingPeriodEvent = EVENTS.getExpiration(event) / BRANCHES.getPeriodLength(branch)
    fxpOutcome = EVENTS.getOutcome(event)
    resolution = 1
    forkPeriod = BRANCHES.getForkPeriod(EVENTS.getEventBranch(event))
    currentPeriod = block.timestamp / BRANCHES.getPeriodLength(branch)
    if((EVENTS.getForked(event) and !EVENTS.getForkedDone(event)) or (currentPeriod <= (forkPeriod + 1))):
        return(-5)
    if(binary(event) and !fxpOutcome):
        resolution = RESOLVE.resolveBinary(event, market, branch, votingPeriodEvent)
    elif(scalar(event) and !EVENTS.getMode(event)):
        resolution = RESOLVE.resolveCategoricalOrScalar(EVENTS.getMinValue(event), EVENTS.getMaxValue(event), event, market, branch, votingPeriodEvent)
    elif(categorical(event) and !EVENTS.getMode(event)):
        resolution = RESOLVE.resolveCategoricalOrScalar(ONE, ONE * EVENTS.getNumOutcomes(event), event, market, branch, votingPeriodEvent)
    else:
        throw()
    if(resolution == -6):
        return(-6)
    winningOutcomes = array(8)
    winningOutcomes = RESOLVE.determineWinningOutcomes(event, outitems = 8)
    MARKETS.setWinningOutcomes(market, winningOutcomes)
    # refunds closing cost
    MARKETS.refundClosing(market, sender)
    return(1)
