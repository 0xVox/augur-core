# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
# 
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
# 
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
# 
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

### This allows users to close markets

# todo fix getoutcome stuff 0 is a valid outcome... and anywhere getoutcome is used

import branches as BRANCHES
import markets as MARKETS
import events as EVENTS
import backstops as BACKSTOPS
import eventResolution as RESOLVE
import info as INFO
import mutex as MUTEX
extern subcurrency: [allowance:[uint256,uint256]:uint256, approve:[uint256,uint256]:uint256, balance:[]:uint256, balanceOf:[uint256]:uint256, transfer:[uint256,uint256]:uint256, transferFrom:[uint256,uint256,uint256]:uint256]
inset('../data_api/refund.se')
inset('eventHelpers.se')
inset('logReturn.se')

event closeMarketLogReturn(returnValue)


# Loop through events in the market, get their outcomes and use those to determine the winning outcomes and resolve a market!
# @return 0 if fail/trading not over yet/event not expired or closed already, if success 1
# Error messages otherwise
    # 0: hasn't been reported on yet or already resolved
    # -1: Market has no cash anyway / already closed
    # -2: 0 outcome / not reported on yet
    # -3: not final round 2 event
    # -4: Event forked and not final yet
    # -5: bonded pushed forward market not ready to be resolved
# if market's events have moved due to a fork branch param passed should be the new fork [todo check to make sure it handles the wrong branch param properly here]
def closeMarket(market, sender):
    refund()
    if(MUTEX.getMutex() && !mutexWhitelisted()):
        throw()
    if(!mutexWhitelisted()):
        MUTEX.setMutex()
    branch = MARKETS.getBranch(market)
    tradingPeriod = MARKETS.getTradingPeriod(market)
    period = BRANCHES.getVotePeriod(branch)
    event = MARKETS.getMarketEvent(market, 0)
    fxpOutcome = EVENTS.getOutcome(event)
    resolution = 1
    forkPeriod = BRANCHES.getForkPeriod(EVENTS.getEventBranch(event))
    currentPeriod = block.timestamp / BRANCHES.getPeriodLength(branch)
    checkCloseMarketPreconditions()
    
    resolveEventsInMarket()    
    winningOutcomes = array(8)
    winningOutcomes = RESOLVE.determineWinningOutcomes(event, outitems = 8)
    MARKETS.setWinningOutcomes(market, winningOutcomes)
    # refunds closing cost
    MARKETS.refundClosing(market, sender)
    if(!mutexWhitelisted()):
        MUTEX.unsetMutex()
    logReturn(closeMarketLogReturn, 1)

macro checkCloseMarketPreconditions():
    # what if we forked or round 2 won't it be resolved and thus market never gets resolved todo
    # fix for early res
    if((period <= tradingPeriod) or fxpOutcome):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        logReturn(closeMarketLogReturn, 0)
    if(INFO.getCurrency(market).balanceOf(INFO.getWallet(market)) <= 0):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        logReturn(closeMarketLogReturn, -1)
    # fix for early res
    if(!EVENTS.getUncaughtOutcome(event)):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        logReturn(closeMarketLogReturn, -2)
    # as long as resolved and not challenged we can then resolve, i.e. if not challenged and > 6 days then can take prelim outcome and make it final outcome
    if(BACKSTOPS.getRoundTwo(event) and !BACKSTOPS.getFinal(event)):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        logReturn(closeMarketLogReturn, -3)
    # why can't resolve in period after a fork period todo examine
    if((EVENTS.getForked(event) and !EVENTS.getForkedDone(event)) or (currentPeriod <= (forkPeriod + 1))):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        logReturn(closeMarketLogReturn, -4)

macro resolveEventsInMarket():
    resolution = 0
    # look at event in the market, get its outcomes, resolve it and use those to determine the winning outcomes for a given market!
    if(binary(event) and !fxpOutcome):
        resolution = RESOLVE.resolveBinary(event, market, branch, votingPeriodEvent)
    elif(scalar(event) and !EVENTS.getMode(event)):
        resolution = RESOLVE.resolveCategoricalOrScalar(EVENTS.getMinValue(event), EVENTS.getMaxValue(event), event, market, branch, votingPeriodEvent)
    elif(categorical(event) and !EVENTS.getMode(event)):
        resolution = RESOLVE.resolveCategoricalOrScalar(ONE, ONE * EVENTS.getNumOutcomes(event), event, market, branch, votingPeriodEvent)
    else:
        throw()
    if(resolution == -6):
        if(!mutexWhitelisted()):
            MUTEX.unsetMutex()
        logReturn(closeMarketLogReturn, -5)

def closeChallengeBond(event):
    extraBond = EVENTS.getExtraBond(event)
    branch = EVENTS.getEventBranch(event)
    if(!EVENTS.getChallenged(event)):
        throw()
    periodLength = BRANCHES.getPeriodLength(branch)
    votePeriod = EVENTS.getExpiration(event) / periodLength
    if(BRANCHES.getVotePeriod(branch) <= votePeriod):
        throw()
    forkPeriod = BRANCHES.getForkPeriod(branch)
    forking = forkPeriod == votePeriod or votePeriod == (forkPeriod + 1)
    if(BACKSTOPS.getRoundTwo(event) or forking):
        returnBond()
    if(!EVENTS.getOutcome(event)):
        throw()
    if(EVENTS.getFirstPreliminaryOutcome(event) == EVENTS.getOutcome(event)):
        loseBond
    # outcome is different
    else:
        # challenger is paying validity bond though... we need to move its payment to event creation time and then it'll be a valid use of funds
        returnBond + pay half of validity bond to challenger
    return(1)
