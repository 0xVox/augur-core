### Allows a user to prove that a reporter didn't report enough / skimped on their reporting requirements

import branches as BRANCHES
import expiringEvents as EXPEVENTS
import consensusData as CONSENSUS
import reporting as REPORTING
import reportingThreshold as THRESHOLD
import fxpFunctions as FXP
inset('../data_api/refund.se')
inset('../data_api/periodStage.se')

macro ONE_POINT_TWO: 22136092888451461120

macro POINT_ZERO_ONE: 184467440737095520

macro POINT_ONE: 1844674407370955264

macro POINT_NINE: 16602069666338596864

macro MIN_EVENTS_FOR_WHALE: 30

# Prove both that a reporter voted on less than he/she actually could have and it was <.5 of what they should have reported on using an example event
# The rep lost here is then sent to the branch's rep account and distributed like other redistributed rep.
# Note:
    # Reporters pay an eth bond for this on their first report --- if never called then during collect fees they get it back else it goes back to pay someone who correctly calls this function, so the bond is returned to the poster if not enough penalized is 0 or BRANCHES.getForkPeriod(branch)+1 == lastPeriod during collect fees [which means it's the first period after a fork is initiated]
# Returns 1 if successful penalization
# Errors:
    # 0: branch or event example don't exist
    # -1: already done
    # -2: not in right part of period
    # -3: event isn't in branch
    # -4: fork period exemption
    # Returns 2 if didn't need to be penalized and thus wasn't
def proveReporterDidntReportEnough(branch, reporter, eventExample):
    refund()
    if(!branch or !eventExample):
        return(0)
    lastPeriod = BRANCHES.getVotePeriod(branch) - 1
    periodAfterForkPeriod = BRANCHES.getForkPeriod(branch) + 1 == lastPeriod
    periodLength = BRANCHES.getPeriodLength(branch)
    originalRep = EXPEVENTS.getBeforeRep(branch, lastPeriod, reporter)
    numEventsAvailableToReportOn = EXPEVENTS.getNumEventsToReportOn(branch, lastPeriod)
    # events a user should be reporting on
    # eventsExpected == (numberReportEstimate*((reporterList[n]/totalRep)**1.2))
    # a**b=exp(b*ln(a))=e**(b*ln(a)).
    repConstant = FXP.fxExp(ONE_POINT_TWO * FXP.fxLog(originalRep) / ONE) * ONE / FXP.fxExp(ONE_POINT_TWO * FXP.fxLog(REPORTING.getActiveRep(branch)) / ONE)
    baseReporters = CONSENSUS.getBaseReportersLastPeriod(branch)
    numRequiredEvents = EXPEVENTS.getNumRequired(branch, lastPeriod)
    expectedEventsForReporterIncludingRequired = repConstant * numEventsAvailableToReportOn + numRequiredEvents * ONE
    eventsInPeriod = EXPEVENTS.getNumberEvents(branch, lastPeriod) - EXPEVENTS.getNumRemoved(branch, lastPeriod)
    dealWithWhaleReporters()
    ensureReporterCouldveReportedOnMoreButDidnt()
    checkProveReporterDidntReportEnoughPreconditions()
    redistributeNotEnoughReportsRep()
    # refund gas cost for the sender
    CONSENSUS.doRefund(msg.sender, reporter)
    return(1)

macro checkProveReporterDidntReportEnoughPreconditions():
    if(EVENTS.getEventBranch(eventExample) != branch):
        return(-3)
    if(CONSENSUS.getNotEnoughPenalized(branch, reporter, lastPeriod)):
        return(-1)
    # in period just after fork period no reports required
    if(periodAfterForkPeriod):
        return(-4)
    atFirstHalfOfPeriod()

macro ensureReporterCouldveReportedOnMoreButDidnt()
    numReportsSubmitted = EXPEVENTS.getNumReportsSubmitted(branch, lastPeriod, reporter)
    # reporter couldve reported on event example but didnt
    couldveReported = THRESHOLD.getEventCanReportOn(branch, lastPeriod, reporter, eventExample)
    reportedOnLessThanShouldve = expectedEventsForReporterIncludingRequired / 2 > numReportsSubmitted * ONE and couldveReported
    if(!reportedOnLessThanShouldve):
        return(-4)

macro redistributeNotEnoughReportsRep():
    # penalize people
    newRep = POINT_ONE * numReportsSubmitted * originalRep / (expectedEventsForReporterIncludingRequired / 2)
    oldRep = originalRep * POINT_NINE / ONE
    repChange = (oldRep + newRep) - originalRep
    if(repChange > 0):
        return(1)
    # todo fix issues here w/ withdrawing too much rep and redistribution before/after/etc
    # removes rep from reporter who lost it
    REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, reporter), repChange)
    # sends that rep to the branch rep pool
    REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), -repChange)
    EXPEVENTS.setBeforeRep(branch, lastPeriod, oldRep + newRep, reporter)
    afterRep = EXPEVENTS.getAfterRep(branch, lastPeriod, reporter)
    newAfterRep = afterRep + repChange
    if(newAfterRep <= 0):
        newAfterRep = 0
    # decrease denominator by rep person lost here if they've already done the penalizations / redistributions in consensus
    if(CONSENSUS.getRepRedistributionDone(branch, reporter)):
        diff = afterRep - newAfterRep
        CONSENSUS.decreaseDenominator(branch, lastPeriod, diff)
    EXPEVENTS.setAfterRep(branch, lastPeriod, newAfterRep, reporter)
    CONSENSUS.setNotEnoughPenalized(branch, reporter, lastPeriod)

macro dealWithWhaleReporters():
    reporterIsAWhale = repConstant >= POINT_ZERO_ONE
    if(reporterIsAWhale):
        minimum = min(MIN_EVENTS_FOR_WHALE + numRequiredEvents, eventsInPeriod)
        if(expectedEventsForReporterIncludingRequired / ONE < minimum):
            expectedEventsForReporterIncludingRequired = minimum * ONE
    total = repConstant * baseReporters
    # if total is too high [>1] then expectedEventsForReporterIncludingRequired will estimate a higher number than reality, so need to correct for this below
    # correction for if people have more than x [4.6% of at 40 min reporters] rep in one account - they report on everything (hence incentive to divy rep into mult. accounts and not pool) i.e. if((exp(ln(rep%)*1.2)+0.001)*baseReporters > 1)
    if(total > ONE):
        expectedEventsForReporterIncludingRequired = (numEventsAvailableToReportOn / baseReporters) * ONE + numRequiredEvents * ONE
